
ARM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080050fc  080050fc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050fc  080050fc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004954  20000064  08005168  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049b8  08005168  000249b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5f0  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002792  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00031e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb8  00000000  00000000  00032ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019970  00000000  00000000  00033ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012299  00000000  00000000  0004d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009545d  00000000  00000000  0005f7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c4  00000000  00000000  000f4c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  000f95cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f60 	.word	0x08004f60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08004f60 	.word	0x08004f60

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20003e98 	.word	0x20003e98

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fa29 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f837 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f87b 	bl	80002e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BaseType_t retval = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]

  DWT_CTRL|=0x00000001;
 80001f2:	4b11      	ldr	r3, [pc, #68]	; (8000238 <main+0x5c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a10      	ldr	r2, [pc, #64]	; (8000238 <main+0x5c>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80001fe:	f002 fb29 	bl	8002854 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000202:	f003 fcd9 	bl	8003bb8 <SEGGER_SYSVIEW_Start>

  retval = xTaskCreate(Task_1, "Task_1", 200, "Hello from Task-1", 3, &Task_1_handle);
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <main+0x60>)
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	2303      	movs	r3, #3
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <main+0x64>)
 8000210:	22c8      	movs	r2, #200	; 0xc8
 8000212:	490c      	ldr	r1, [pc, #48]	; (8000244 <main+0x68>)
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <main+0x6c>)
 8000216:	f001 fb87 	bl	8001928 <xTaskCreate>
 800021a:	6078      	str	r0, [r7, #4]
  configASSERT(retval);
  retval = xTaskCreate(Task_2, "Task_2", 200, "Hello from Task-2", 2, 0);
 800021c:	2300      	movs	r3, #0
 800021e:	9301      	str	r3, [sp, #4]
 8000220:	2302      	movs	r3, #2
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <main+0x70>)
 8000226:	22c8      	movs	r2, #200	; 0xc8
 8000228:	4909      	ldr	r1, [pc, #36]	; (8000250 <main+0x74>)
 800022a:	480a      	ldr	r0, [pc, #40]	; (8000254 <main+0x78>)
 800022c:	f001 fb7c 	bl	8001928 <xTaskCreate>
 8000230:	6078      	str	r0, [r7, #4]
  configASSERT(retval);

  vTaskStartScheduler();
 8000232:	f001 fce3 	bl	8001bfc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	e7fe      	b.n	8000236 <main+0x5a>
 8000238:	e0001000 	.word	0xe0001000
 800023c:	20000080 	.word	0x20000080
 8000240:	08004f78 	.word	0x08004f78
 8000244:	08004f8c 	.word	0x08004f8c
 8000248:	08000379 	.word	0x08000379
 800024c:	08004f94 	.word	0x08004f94
 8000250:	08004fa8 	.word	0x08004fa8
 8000254:	080003c5 	.word	0x080003c5

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f004 f9e0 	bl	800462c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028c:	2302      	movs	r3, #2
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000296:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fc77 	bl	8000b94 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ac:	f000 f8c2 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fee4 	bl	8001098 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d6:	f000 f8ad 	bl	8000434 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	; 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_GPIO_Init+0x8c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <MX_GPIO_Init+0x8c>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a16      	ldr	r2, [pc, #88]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_GPIO_Init+0x8c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_GPIO_Init+0x8c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <MX_GPIO_Init+0x8c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2101      	movs	r1, #1
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <MX_GPIO_Init+0x90>)
 8000346:	f000 fc0d 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800034a:	2301      	movs	r3, #1
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_GPIO_Init+0x90>)
 8000362:	f000 fa7b 	bl	800085c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40010c00 	.word	0x40010c00

08000378 <Task_1>:

/* USER CODE BEGIN 4 */
void Task_1(void* parameters)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	; 0x70
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		counter ++;
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <Task_1+0x40>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <Task_1+0x40>)
 800038a:	801a      	strh	r2, [r3, #0]
		char msg[100];
//		printf("%s\n",(char*) parameters);
		snprintf(msg , 100,"%s\n",(char*) parameters);
 800038c:	f107 000c 	add.w	r0, r7, #12
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <Task_1+0x44>)
 8000394:	2164      	movs	r1, #100	; 0x64
 8000396:	f004 f905 	bl	80045a4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 f890 	bl	80044c4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <Task_1+0x48>)
 80003a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	f3bf 8f4f 	dsb	sy
 80003b0:	f3bf 8f6f 	isb	sy
	{
 80003b4:	e7e4      	b.n	8000380 <Task_1+0x8>
 80003b6:	bf00      	nop
 80003b8:	20000084 	.word	0x20000084
 80003bc:	08004fb0 	.word	0x08004fb0
 80003c0:	e000ed04 	.word	0xe000ed04

080003c4 <Task_2>:
	}
//	vTaskDelete(NULL);
}

void Task_2(void* parameters)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b09c      	sub	sp, #112	; 0x70
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

	while(1)
	{
		counter_2 ++;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <Task_2+0x40>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <Task_2+0x40>)
 80003d6:	801a      	strh	r2, [r3, #0]
		char msg[100];
//		printf("%s\n",(char*) parameters);
		snprintf(msg , 100,"%s\n",(char*) parameters);
 80003d8:	f107 000c 	add.w	r0, r7, #12
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <Task_2+0x44>)
 80003e0:	2164      	movs	r1, #100	; 0x64
 80003e2:	f004 f8df 	bl	80045a4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4618      	mov	r0, r3
 80003ec:	f004 f86a 	bl	80044c4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <Task_2+0x48>)
 80003f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	f3bf 8f4f 	dsb	sy
 80003fc:	f3bf 8f6f 	isb	sy
	{
 8000400:	e7e4      	b.n	80003cc <Task_2+0x8>
 8000402:	bf00      	nop
 8000404:	20000086 	.word	0x20000086
 8000408:	08004fb0 	.word	0x08004fb0
 800040c:	e000ed04 	.word	0xe000ed04

08000410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d101      	bne.n	8000426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000422:	f000 f91f 	bl	8000664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40000800 	.word	0x40000800

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08e      	sub	sp, #56	; 0x38
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004ba:	4b34      	ldr	r3, [pc, #208]	; (800058c <HAL_InitTick+0xe8>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a33      	ldr	r2, [pc, #204]	; (800058c <HAL_InitTick+0xe8>)
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b31      	ldr	r3, [pc, #196]	; (800058c <HAL_InitTick+0xe8>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0304 	and.w	r3, r3, #4
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d2:	f107 0210 	add.w	r2, r7, #16
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 ff37 	bl	8001350 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004e2:	6a3b      	ldr	r3, [r7, #32]
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d103      	bne.n	80004f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004ec:	f000 ff1c 	bl	8001328 <HAL_RCC_GetPCLK1Freq>
 80004f0:	6378      	str	r0, [r7, #52]	; 0x34
 80004f2:	e004      	b.n	80004fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004f4:	f000 ff18 	bl	8001328 <HAL_RCC_GetPCLK1Freq>
 80004f8:	4603      	mov	r3, r0
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000500:	4a23      	ldr	r2, [pc, #140]	; (8000590 <HAL_InitTick+0xec>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3b01      	subs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <HAL_InitTick+0xf0>)
 800050e:	4a22      	ldr	r2, [pc, #136]	; (8000598 <HAL_InitTick+0xf4>)
 8000510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <HAL_InitTick+0xf0>)
 8000514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000518:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800051a:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <HAL_InitTick+0xf0>)
 800051c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <HAL_InitTick+0xf0>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <HAL_InitTick+0xf0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <HAL_InitTick+0xf0>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <HAL_InitTick+0xf0>)
 8000534:	f000 ff5a 	bl	80013ec <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800053e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000542:	2b00      	cmp	r3, #0
 8000544:	d11b      	bne.n	800057e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <HAL_InitTick+0xf0>)
 8000548:	f000 ffa8 	bl	800149c <HAL_TIM_Base_Start_IT>
 800054c:	4603      	mov	r3, r0
 800054e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000556:	2b00      	cmp	r3, #0
 8000558:	d111      	bne.n	800057e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800055a:	201e      	movs	r0, #30
 800055c:	f000 f96f 	bl	800083e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b0f      	cmp	r3, #15
 8000564:	d808      	bhi.n	8000578 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000566:	2200      	movs	r2, #0
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	201e      	movs	r0, #30
 800056c:	f000 f94b 	bl	8000806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <HAL_InitTick+0xf8>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e002      	b.n	800057e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800057e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000582:	4618      	mov	r0, r3
 8000584:	3738      	adds	r7, #56	; 0x38
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	431bde83 	.word	0x431bde83
 8000594:	20000088 	.word	0x20000088
 8000598:	40000800 	.word	0x40000800
 800059c:	20000004 	.word	0x20000004

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <MemManage_Handler+0x4>

080005b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <UsageFault_Handler+0x4>

080005be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
	...

080005cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <TIM4_IRQHandler+0x10>)
 80005d2:	f000 ffb5 	bl	8001540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000088 	.word	0x20000088

080005e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ec:	f7ff fff8 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005f2:	490c      	ldr	r1, [pc, #48]	; (8000624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000608:	4c09      	ldr	r4, [pc, #36]	; (8000630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000616:	f004 f811 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fddf 	bl	80001dc <main>
  bx lr
 800061e:	4770      	bx	lr
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000628:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 800062c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000630:	200049b8 	.word	0x200049b8

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>
	...

08000638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_Init+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_Init+0x28>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f8d1 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	200f      	movs	r0, #15
 8000650:	f7ff ff28 	bl	80004a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000654:	f7ff fef4 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40022000 	.word	0x40022000

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	200000d0 	.word	0x200000d0

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	200000d0 	.word	0x200000d0

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <__NVIC_EnableIRQ+0x34>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff4f 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff64 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ffb2 	bl	800078c <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff81 	bl	8000738 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff57 	bl	8000700 <__NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e169      	b.n	8000b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000870:	2201      	movs	r2, #1
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8158 	bne.w	8000b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a9a      	ldr	r2, [pc, #616]	; (8000afc <HAL_GPIO_Init+0x2a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d05e      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 8000898:	4a98      	ldr	r2, [pc, #608]	; (8000afc <HAL_GPIO_Init+0x2a0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d875      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 800089e:	4a98      	ldr	r2, [pc, #608]	; (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d058      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008a4:	4a96      	ldr	r2, [pc, #600]	; (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d86f      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008aa:	4a96      	ldr	r2, [pc, #600]	; (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d052      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008b0:	4a94      	ldr	r2, [pc, #592]	; (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008b6:	4a94      	ldr	r2, [pc, #592]	; (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008bc:	4a92      	ldr	r2, [pc, #584]	; (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d863      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008c2:	4a92      	ldr	r2, [pc, #584]	; (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d046      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008c8:	4a90      	ldr	r2, [pc, #576]	; (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d85d      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d82a      	bhi.n	8000928 <HAL_GPIO_Init+0xcc>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d859      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <HAL_GPIO_Init+0x80>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000985 	.word	0x08000985
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	0800098b 	.word	0x0800098b
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	0800098b 	.word	0x0800098b
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	08000939 	.word	0x08000939
 8000924:	0800094d 	.word	0x0800094d
 8000928:	4a79      	ldr	r2, [pc, #484]	; (8000b10 <HAL_GPIO_Init+0x2b4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e029      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e024      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01f      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e01a      	b.n	800098c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e013      	b.n	800098c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e009      	b.n	800098c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x130>
          break;
 800098a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d801      	bhi.n	8000996 <HAL_GPIO_Init+0x13a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e001      	b.n	800099a <HAL_GPIO_Init+0x13e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d802      	bhi.n	80009a8 <HAL_GPIO_Init+0x14c>
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x152>
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3b08      	subs	r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	210f      	movs	r1, #15
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f4:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2bc>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <HAL_GPIO_Init+0x2c0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d013      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3f      	ldr	r2, [pc, #252]	; (8000b20 <HAL_GPIO_Init+0x2c4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <HAL_GPIO_Init+0x2c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5a:	492f      	ldr	r1, [pc, #188]	; (8000b18 <HAL_GPIO_Init+0x2bc>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	492c      	ldr	r1, [pc, #176]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4928      	ldr	r1, [pc, #160]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	4922      	ldr	r1, [pc, #136]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	491e      	ldr	r1, [pc, #120]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4918      	ldr	r1, [pc, #96]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4914      	ldr	r1, [pc, #80]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	490e      	ldr	r1, [pc, #56]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	600b      	str	r3, [r1, #0]
 8000af8:	e021      	b.n	8000b3e <HAL_GPIO_Init+0x2e2>
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_GPIO_Init+0x304>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4909      	ldr	r1, [pc, #36]	; (8000b60 <HAL_GPIO_Init+0x304>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3301      	adds	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f47f ae8e 	bne.w	8000870 <HAL_GPIO_Init+0x14>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	372c      	adds	r7, #44	; 0x2c
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e272      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8087 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb4:	4b92      	ldr	r3, [pc, #584]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d00c      	beq.n	8000bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc0:	4b8f      	ldr	r3, [pc, #572]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d112      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	4b89      	ldr	r3, [pc, #548]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d06c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d168      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e24c      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfa:	d106      	bne.n	8000c0a <HAL_RCC_OscConfig+0x76>
 8000bfc:	4b80      	ldr	r3, [pc, #512]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a7f      	ldr	r2, [pc, #508]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e02e      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x98>
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a77      	ldr	r2, [pc, #476]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01d      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0xbc>
 8000c36:	4b72      	ldr	r3, [pc, #456]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a71      	ldr	r2, [pc, #452]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b6f      	ldr	r3, [pc, #444]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a6e      	ldr	r2, [pc, #440]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a6a      	ldr	r2, [pc, #424]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a67      	ldr	r2, [pc, #412]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd0a 	bl	8000688 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fd06 	bl	8000688 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e200      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0xe4>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fcf6 	bl	8000688 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fcf2 	bl	8000688 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1ec      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x10c>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cce:	4b4c      	ldr	r3, [pc, #304]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d11c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e1c0      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4939      	ldr	r1, [pc, #228]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	e03a      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fcab 	bl	8000688 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fca7 	bl	8000688 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e1a1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4927      	ldr	r1, [pc, #156]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc8a 	bl	8000688 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc86 	bl	8000688 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e180      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d019      	beq.n	8000dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc6a 	bl	8000688 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc66 	bl	8000688 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e160      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 faea 	bl	80013b0 <RCC_Delay>
 8000ddc:	e01c      	b.n	8000e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc50 	bl	8000688 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	e00f      	b.n	8000e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc4c 	bl	8000688 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d908      	bls.n	8000e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e146      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	42420000 	.word	0x42420000
 8000e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	4b92      	ldr	r3, [pc, #584]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e9      	bne.n	8000dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a6 	beq.w	8000f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10d      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a87      	ldr	r2, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b82      	ldr	r3, [pc, #520]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4b7f      	ldr	r3, [pc, #508]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7e      	ldr	r2, [pc, #504]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fc0d 	bl	8000688 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e72:	f7ff fc09 	bl	8000688 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e103      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4b75      	ldr	r3, [pc, #468]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x312>
 8000e98:	4b6f      	ldr	r3, [pc, #444]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	e02d      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x334>
 8000eae:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a69      	ldr	r2, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a66      	ldr	r2, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	e01c      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x356>
 8000ed0:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a60      	ldr	r2, [pc, #384]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a5d      	ldr	r2, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000eea:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a5a      	ldr	r2, [pc, #360]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a57      	ldr	r2, [pc, #348]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d015      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fbbd 	bl	8000688 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fbb9 	bl	8000688 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0b1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ee      	beq.n	8000f12 <HAL_RCC_OscConfig+0x37e>
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fba7 	bl	8000688 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fba3 	bl	8000688 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e09b      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	4b40      	ldr	r3, [pc, #256]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d105      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d061      	beq.n	800104c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d146      	bne.n	800101e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fb77 	bl	8000688 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fb73 	bl	8000688 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e06d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc4:	d108      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4921      	ldr	r1, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a19      	ldr	r1, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	491b      	ldr	r1, [pc, #108]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb47 	bl	8000688 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fb43 	bl	8000688 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e03d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46a>
 800101c:	e035      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fb30 	bl	8000688 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fb2c 	bl	8000688 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e026      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x498>
 800104a:	e01e      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e019      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_RCC_OscConfig+0x500>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0d0      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d910      	bls.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0207 	bic.w	r2, r3, #7
 80010c2:	4965      	ldr	r1, [pc, #404]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0b8      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	494d      	ldr	r1, [pc, #308]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d040      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e07f      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e073      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06b      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0203 	bic.w	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4936      	ldr	r1, [pc, #216]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fa7e 	bl	8000688 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fa7a 	bl	8000688 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e053      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d210      	bcs.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e032      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4916      	ldr	r1, [pc, #88]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001226:	f000 f821 	bl	800126c <HAL_RCC_GetSysClockFreq>
 800122a:	4602      	mov	r2, r0
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	490a      	ldr	r1, [pc, #40]	; (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1cc>)
 8001240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_ClockConfig+0x1d0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f92c 	bl	80004a4 <HAL_InitTick>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000
 800125c:	40021000 	.word	0x40021000
 8001260:	08005078 	.word	0x08005078
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d002      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x30>
 8001296:	2b08      	cmp	r3, #8
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_GetSysClockFreq+0x36>
 800129a:	e027      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 800129e:	613b      	str	r3, [r7, #16]
      break;
 80012a0:	e027      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0c9b      	lsrs	r3, r3, #18
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0c5b      	lsrs	r3, r3, #17
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ce:	fb03 f202 	mul.w	r2, r3, r2
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e004      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	613b      	str	r3, [r7, #16]
      break;
 80012ea:	e002      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
      break;
 80012f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f2:	693b      	ldr	r3, [r7, #16]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	007a1200 	.word	0x007a1200
 8001308:	08005090 	.word	0x08005090
 800130c:	080050a0 	.word	0x080050a0
 8001310:	003d0900 	.word	0x003d0900

08001314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_RCC_GetHCLKFreq+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000000 	.word	0x20000000

08001328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800132c:	f7ff fff2 	bl	8001314 <HAL_RCC_GetHCLKFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	4903      	ldr	r1, [pc, #12]	; (800134c <HAL_RCC_GetPCLK1Freq+0x24>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	08005088 	.word	0x08005088

08001350 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	220f      	movs	r2, #15
 800135e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_RCC_GetClockConfig+0x5c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40022000 	.word	0x40022000

080013b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <RCC_Delay+0x34>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <RCC_Delay+0x38>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a5b      	lsrs	r3, r3, #9
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013cc:	bf00      	nop
  }
  while (Delay --);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	60fa      	str	r2, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <RCC_Delay+0x1c>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000000 	.word	0x20000000
 80013e8:	10624dd3 	.word	0x10624dd3

080013ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e041      	b.n	8001482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f839 	bl	800148a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f000 f9b4 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d001      	beq.n	80014b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e03a      	b.n	800152a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_TIM_Base_Start_IT+0x98>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00e      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014de:	d009      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_TIM_Base_Start_IT+0x9c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d004      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_TIM_Base_Start_IT+0xa0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d111      	bne.n	8001518 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b06      	cmp	r3, #6
 8001504:	d010      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001516:	e007      	b.n	8001528 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40000400 	.word	0x40000400
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d122      	bne.n	800159c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d11b      	bne.n	800159c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0202 	mvn.w	r2, #2
 800156c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8ed 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001588:	e005      	b.n	8001596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8e0 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8ef 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d122      	bne.n	80015f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d11b      	bne.n	80015f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0204 	mvn.w	r2, #4
 80015c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8c3 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 80015dc:	e005      	b.n	80015ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8b6 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f8c5 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d122      	bne.n	8001644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b08      	cmp	r3, #8
 800160a:	d11b      	bne.n	8001644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0208 	mvn.w	r2, #8
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2204      	movs	r2, #4
 800161a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f899 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001630:	e005      	b.n	800163e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f88c 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f89b 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b10      	cmp	r3, #16
 8001650:	d122      	bne.n	8001698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b10      	cmp	r3, #16
 800165e:	d11b      	bne.n	8001698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0210 	mvn.w	r2, #16
 8001668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2208      	movs	r2, #8
 800166e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f86f 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f862 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f871 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10e      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0201 	mvn.w	r2, #1
 80016bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe fea6 	bl	8000410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b80      	cmp	r3, #128	; 0x80
 80016d0:	d10e      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b80      	cmp	r3, #128	; 0x80
 80016de:	d107      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8bf 	bl	800186e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	2b40      	cmp	r3, #64	; 0x40
 800170a:	d107      	bne.n	800171c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f835 	bl	8001786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b20      	cmp	r3, #32
 8001728:	d10e      	bne.n	8001748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b20      	cmp	r3, #32
 8001736:	d107      	bne.n	8001748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0220 	mvn.w	r2, #32
 8001740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f88a 	bl	800185c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b6:	d007      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <TIM_Base_SetConfig+0xbc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <TIM_Base_SetConfig+0xc0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00b      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d007      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <TIM_Base_SetConfig+0xbc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <TIM_Base_SetConfig+0xc0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d108      	bne.n	800180c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d103      	bne.n	8001840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	615a      	str	r2, [r3, #20]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40000400 	.word	0x40000400
 8001858:	40000800 	.word	0x40000800

0800185c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f103 0208 	add.w	r2, r3, #8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f103 0208 	add.w	r2, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 0208 	add.w	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6892      	ldr	r2, [r2, #8]
 80018ec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6852      	ldr	r2, [r2, #4]
 80018f6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d103      	bne.n	800190a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af04      	add	r7, sp, #16
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fdef 	bl	8002520 <pvPortMalloc>
 8001942:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d013      	beq.n	8001972 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800194a:	205c      	movs	r0, #92	; 0x5c
 800194c:	f000 fde8 	bl	8002520 <pvPortMalloc>
 8001950:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001958:	225c      	movs	r2, #92	; 0x5c
 800195a:	2100      	movs	r1, #0
 800195c:	69f8      	ldr	r0, [r7, #28]
 800195e:	f002 fe65 	bl	800462c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
 8001968:	e005      	b.n	8001976 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f000 fe72 	bl	8002654 <vPortFree>
 8001970:	e001      	b.n	8001976 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800197c:	88fa      	ldrh	r2, [r7, #6]
 800197e:	2300      	movs	r3, #0
 8001980:	9303      	str	r3, [sp, #12]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f80e 	bl	80019b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001998:	69f8      	ldr	r0, [r7, #28]
 800199a:	f000 f87b 	bl	8001a94 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	e002      	b.n	80019aa <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019aa:	69bb      	ldr	r3, [r7, #24]
    }
 80019ac:	4618      	mov	r0, r3
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	21a5      	movs	r1, #165	; 0xa5
 80019ce:	f002 fe2d 	bl	800462c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019dc:	3b01      	subs	r3, #1
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f023 0307 	bic.w	r3, r3, #7
 80019ea:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01e      	beq.n	8001a30 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e012      	b.n	8001a1e <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4413      	add	r3, r2
 80019fe:	7819      	ldrb	r1, [r3, #0]
 8001a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	3334      	adds	r3, #52	; 0x34
 8001a08:	460a      	mov	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	4413      	add	r3, r2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d9e9      	bls.n	80019f8 <prvInitialiseNewTask+0x44>
 8001a24:	e000      	b.n	8001a28 <prvInitialiseNewTask+0x74>
            {
                break;
 8001a26:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d901      	bls.n	8001a3a <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a36:	2304      	movs	r3, #4
 8001a38:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	6a3a      	ldr	r2, [r7, #32]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	3304      	adds	r3, #4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff37 	bl	80018be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	3318      	adds	r3, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff32 	bl	80018be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f1c3 0205 	rsb	r2, r3, #5
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	6938      	ldr	r0, [r7, #16]
 8001a76:	f000 fc29 	bl	80022cc <pxPortInitialiseStack>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001a9c:	f000 fca6 	bl	80023ec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <prvAddNewTaskToReadyList+0x14c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <prvAddNewTaskToReadyList+0x14c>)
 8001aa8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <prvAddNewTaskToReadyList+0x150>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001ab2:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <prvAddNewTaskToReadyList+0x150>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <prvAddNewTaskToReadyList+0x14c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d110      	bne.n	8001ae2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001ac0:	f000 fb6c 	bl	800219c <prvInitialiseTaskLists>
 8001ac4:	e00d      	b.n	8001ae2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <prvAddNewTaskToReadyList+0x154>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ace:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <prvAddNewTaskToReadyList+0x150>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d802      	bhi.n	8001ae2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001adc:	4a41      	ldr	r2, [pc, #260]	; (8001be4 <prvAddNewTaskToReadyList+0x150>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001ae2:	4b42      	ldr	r3, [pc, #264]	; (8001bec <prvAddNewTaskToReadyList+0x158>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4a40      	ldr	r2, [pc, #256]	; (8001bec <prvAddNewTaskToReadyList+0x158>)
 8001aea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <prvAddNewTaskToReadyList+0x158>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <prvAddNewTaskToReadyList+0x94>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fb3f 	bl	8004180 <SEGGER_SYSVIEW_OnTaskCreate>
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	461d      	mov	r5, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461c      	mov	r4, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	1ae3      	subs	r3, r4, r3
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	462b      	mov	r3, r5
 8001b24:	f000 ff36 	bl	8002994 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fbac 	bl	8004288 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2201      	movs	r2, #1
 8001b36:	409a      	lsls	r2, r3
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <prvAddNewTaskToReadyList+0x15c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	4a2c      	ldr	r2, [pc, #176]	; (8001bf0 <prvAddNewTaskToReadyList+0x15c>)
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b46:	492b      	ldr	r1, [pc, #172]	; (8001bf4 <prvAddNewTaskToReadyList+0x160>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	3204      	adds	r2, #4
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1d1a      	adds	r2, r3, #4
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <prvAddNewTaskToReadyList+0x160>)
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	4918      	ldr	r1, [pc, #96]	; (8001bf4 <prvAddNewTaskToReadyList+0x160>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1c59      	adds	r1, r3, #1
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <prvAddNewTaskToReadyList+0x160>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4403      	add	r3, r0
 8001bac:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001bae:	f000 fc37 	bl	8002420 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <prvAddNewTaskToReadyList+0x154>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <prvAddNewTaskToReadyList+0x150>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <prvAddNewTaskToReadyList+0x164>)
 8001bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}
 8001be0:	200001ac 	.word	0x200001ac
 8001be4:	200000d4 	.word	0x200000d4
 8001be8:	200001b8 	.word	0x200001b8
 8001bec:	200001c8 	.word	0x200001c8
 8001bf0:	200001b4 	.word	0x200001b4
 8001bf4:	200000d8 	.word	0x200000d8
 8001bf8:	e000ed04 	.word	0xe000ed04

08001bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <vTaskStartScheduler+0x78>)
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2278      	movs	r2, #120	; 0x78
 8001c0e:	491a      	ldr	r1, [pc, #104]	; (8001c78 <vTaskStartScheduler+0x7c>)
 8001c10:	481a      	ldr	r0, [pc, #104]	; (8001c7c <vTaskStartScheduler+0x80>)
 8001c12:	f7ff fe89 	bl	8001928 <xTaskCreate>
 8001c16:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d123      	bne.n	8001c66 <vTaskStartScheduler+0x6a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c1e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c30:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <vTaskStartScheduler+0x84>)
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <vTaskStartScheduler+0x88>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <vTaskStartScheduler+0x8c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <vTaskStartScheduler+0x90>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <vTaskStartScheduler+0x78>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d102      	bne.n	8001c58 <vTaskStartScheduler+0x5c>
 8001c52:	f002 fa79 	bl	8004148 <SEGGER_SYSVIEW_OnIdle>
 8001c56:	e004      	b.n	8001c62 <vTaskStartScheduler+0x66>
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <vTaskStartScheduler+0x90>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fad1 	bl	8004204 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001c62:	f000 fba3 	bl	80023ac <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <vTaskStartScheduler+0x94>)
 8001c68:	681b      	ldr	r3, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200001d0 	.word	0x200001d0
 8001c78:	08004fb4 	.word	0x08004fb4
 8001c7c:	0800216d 	.word	0x0800216d
 8001c80:	200001cc 	.word	0x200001cc
 8001c84:	200001b8 	.word	0x200001b8
 8001c88:	200001b0 	.word	0x200001b0
 8001c8c:	200000d4 	.word	0x200000d4
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <vTaskSuspendAll+0x18>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <vTaskSuspendAll+0x18>)
 8001ca0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200001d4 	.word	0x200001d4

08001cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001cbe:	f000 fb95 	bl	80023ec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <xTaskResumeAll+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	4a68      	ldr	r2, [pc, #416]	; (8001e6c <xTaskResumeAll+0x1bc>)
 8001cca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ccc:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <xTaskResumeAll+0x1bc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 80c4 	bne.w	8001e5e <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cd6:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <xTaskResumeAll+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80bf 	beq.w	8001e5e <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ce0:	e08e      	b.n	8001e00 <xTaskResumeAll+0x150>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ce2:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <xTaskResumeAll+0x1c4>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	6a12      	ldr	r2, [r2, #32]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	69d2      	ldr	r2, [r2, #28]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3318      	adds	r3, #24
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d103      	bne.n	8001d18 <xTaskResumeAll+0x68>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	6892      	ldr	r2, [r2, #8]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d103      	bne.n	8001d56 <xTaskResumeAll+0xa6>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fa8d 	bl	8004288 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	2201      	movs	r2, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <xTaskResumeAll+0x1c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <xTaskResumeAll+0x1c8>)
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	493d      	ldr	r1, [pc, #244]	; (8001e7c <xTaskResumeAll+0x1cc>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3304      	adds	r3, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	3204      	adds	r2, #4
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1d1a      	adds	r2, r3, #4
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <xTaskResumeAll+0x1cc>)
 8001dc4:	441a      	add	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dce:	492b      	ldr	r1, [pc, #172]	; (8001e7c <xTaskResumeAll+0x1cc>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	1c59      	adds	r1, r3, #1
 8001dde:	4827      	ldr	r0, [pc, #156]	; (8001e7c <xTaskResumeAll+0x1cc>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4403      	add	r3, r0
 8001dea:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <xTaskResumeAll+0x1d0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <xTaskResumeAll+0x150>
                    {
                        xYieldPending = pdTRUE;
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <xTaskResumeAll+0x1c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f47f af6c 	bne.w	8001ce2 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <xTaskResumeAll+0x164>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e10:	f000 fa42 	bl	8002298 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <xTaskResumeAll+0x1d8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001e20:	f000 f846 	bl	8001eb0 <xTaskIncrementTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f1      	bne.n	8001e20 <xTaskResumeAll+0x170>

                        xPendedTicks = 0;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <xTaskResumeAll+0x1d8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <xTaskResumeAll+0x1ae>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <xTaskResumeAll+0x1dc>)
 8001e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001e5e:	f000 fadf 	bl	8002420 <vPortExitCritical>

    return xAlreadyYielded;
 8001e62:	693b      	ldr	r3, [r7, #16]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200001d4 	.word	0x200001d4
 8001e70:	200001ac 	.word	0x200001ac
 8001e74:	2000016c 	.word	0x2000016c
 8001e78:	200001b4 	.word	0x200001b4
 8001e7c:	200000d8 	.word	0x200000d8
 8001e80:	200000d4 	.word	0x200000d4
 8001e84:	200001c0 	.word	0x200001c0
 8001e88:	200001bc 	.word	0x200001bc
 8001e8c:	e000ed04 	.word	0xe000ed04

08001e90 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <xTaskGetTickCountFromISR+0x1c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001ea0:	683b      	ldr	r3, [r7, #0]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	200001b0 	.word	0x200001b0

08001eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eba:	4b77      	ldr	r3, [pc, #476]	; (8002098 <xTaskIncrementTick+0x1e8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 80e0 	bne.w	8002084 <xTaskIncrementTick+0x1d4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <xTaskIncrementTick+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001ecc:	4a73      	ldr	r2, [pc, #460]	; (800209c <xTaskIncrementTick+0x1ec>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d110      	bne.n	8001efa <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ed8:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <xTaskIncrementTick+0x1f0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <xTaskIncrementTick+0x1f4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6f      	ldr	r2, [pc, #444]	; (80020a0 <xTaskIncrementTick+0x1f0>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4a6f      	ldr	r2, [pc, #444]	; (80020a4 <xTaskIncrementTick+0x1f4>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b6e      	ldr	r3, [pc, #440]	; (80020a8 <xTaskIncrementTick+0x1f8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	4a6d      	ldr	r2, [pc, #436]	; (80020a8 <xTaskIncrementTick+0x1f8>)
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	f000 f9cf 	bl	8002298 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001efa:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <xTaskIncrementTick+0x1fc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f0c0 80aa 	bcc.w	800205a <xTaskIncrementTick+0x1aa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f06:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <xTaskIncrementTick+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d104      	bne.n	8001f1a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <xTaskIncrementTick+0x1fc>)
 8001f12:	f04f 32ff 	mov.w	r2, #4294967295
 8001f16:	601a      	str	r2, [r3, #0]
                    break;
 8001f18:	e09f      	b.n	800205a <xTaskIncrementTick+0x1aa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f1a:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <xTaskIncrementTick+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d203      	bcs.n	8001f3a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <xTaskIncrementTick+0x1fc>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001f38:	e08f      	b.n	800205a <xTaskIncrementTick+0x1aa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	68d2      	ldr	r2, [r2, #12]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	6892      	ldr	r2, [r2, #8]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d103      	bne.n	8001f68 <xTaskIncrementTick+0xb8>
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1e5a      	subs	r2, r3, #1
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01e      	beq.n	8001fbe <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	6a12      	ldr	r2, [r2, #32]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	69d2      	ldr	r2, [r2, #28]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d103      	bne.n	8001fae <xTaskIncrementTick+0xfe>
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 f961 	bl	8004288 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <xTaskIncrementTick+0x200>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	4a36      	ldr	r2, [pc, #216]	; (80020b0 <xTaskIncrementTick+0x200>)
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fdc:	4935      	ldr	r1, [pc, #212]	; (80020b4 <xTaskIncrementTick+0x204>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3304      	adds	r3, #4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	3204      	adds	r2, #4
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1d1a      	adds	r2, r3, #4
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <xTaskIncrementTick+0x204>)
 800201c:	441a      	add	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	615a      	str	r2, [r3, #20]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002026:	4923      	ldr	r1, [pc, #140]	; (80020b4 <xTaskIncrementTick+0x204>)
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1c59      	adds	r1, r3, #1
 8002036:	481f      	ldr	r0, [pc, #124]	; (80020b4 <xTaskIncrementTick+0x204>)
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4403      	add	r3, r0
 8002042:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <xTaskIncrementTick+0x208>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	429a      	cmp	r2, r3
 8002050:	f67f af59 	bls.w	8001f06 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002058:	e755      	b.n	8001f06 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <xTaskIncrementTick+0x208>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	4914      	ldr	r1, [pc, #80]	; (80020b4 <xTaskIncrementTick+0x204>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d901      	bls.n	8002076 <xTaskIncrementTick+0x1c6>
            {
                xSwitchRequired = pdTRUE;
 8002072:	2301      	movs	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <xTaskIncrementTick+0x20c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800207e:	2301      	movs	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e004      	b.n	800208e <xTaskIncrementTick+0x1de>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <xTaskIncrementTick+0x210>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <xTaskIncrementTick+0x210>)
 800208c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800208e:	69fb      	ldr	r3, [r7, #28]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200001d4 	.word	0x200001d4
 800209c:	200001b0 	.word	0x200001b0
 80020a0:	20000164 	.word	0x20000164
 80020a4:	20000168 	.word	0x20000168
 80020a8:	200001c4 	.word	0x200001c4
 80020ac:	200001cc 	.word	0x200001cc
 80020b0:	200001b4 	.word	0x200001b4
 80020b4:	200000d8 	.word	0x200000d8
 80020b8:	200000d4 	.word	0x200000d4
 80020bc:	200001c0 	.word	0x200001c0
 80020c0:	200001bc 	.word	0x200001bc

080020c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <vTaskSwitchContext+0x90>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <vTaskSwitchContext+0x94>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80020d8:	e038      	b.n	800214c <vTaskSwitchContext+0x88>
        xYieldPending = pdFALSE;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <vTaskSwitchContext+0x94>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <vTaskSwitchContext+0x98>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f1c3 031f 	rsb	r3, r3, #31
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <vTaskSwitchContext+0x9c>)
 8002102:	4413      	add	r3, r2
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3308      	adds	r3, #8
 8002118:	429a      	cmp	r2, r3
 800211a:	d104      	bne.n	8002126 <vTaskSwitchContext+0x62>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <vTaskSwitchContext+0xa0>)
 800212e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <vTaskSwitchContext+0xa0>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <vTaskSwitchContext+0xa4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d102      	bne.n	8002142 <vTaskSwitchContext+0x7e>
 800213c:	f002 f804 	bl	8004148 <SEGGER_SYSVIEW_OnIdle>
}
 8002140:	e004      	b.n	800214c <vTaskSwitchContext+0x88>
        traceTASK_SWITCHED_IN();
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <vTaskSwitchContext+0xa0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 f85c 	bl	8004204 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200001d4 	.word	0x200001d4
 8002158:	200001c0 	.word	0x200001c0
 800215c:	200001b4 	.word	0x200001b4
 8002160:	200000d8 	.word	0x200000d8
 8002164:	200000d4 	.word	0x200000d4
 8002168:	200001d0 	.word	0x200001d0

0800216c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002174:	f000 f852 	bl	800221c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <prvIdleTask+0x28>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d9f9      	bls.n	8002174 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <prvIdleTask+0x2c>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002190:	e7f0      	b.n	8002174 <prvIdleTask+0x8>
 8002192:	bf00      	nop
 8002194:	200000d8 	.word	0x200000d8
 8002198:	e000ed04 	.word	0xe000ed04

0800219c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	e00c      	b.n	80021c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <prvInitialiseTaskLists+0x60>)
 80021b4:	4413      	add	r3, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fb62 	bl	8001880 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d9ef      	bls.n	80021a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <prvInitialiseTaskLists+0x64>)
 80021ca:	f7ff fb59 	bl	8001880 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <prvInitialiseTaskLists+0x68>)
 80021d0:	f7ff fb56 	bl	8001880 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <prvInitialiseTaskLists+0x6c>)
 80021d6:	f7ff fb53 	bl	8001880 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <prvInitialiseTaskLists+0x70>)
 80021dc:	f7ff fb50 	bl	8001880 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80021e0:	480b      	ldr	r0, [pc, #44]	; (8002210 <prvInitialiseTaskLists+0x74>)
 80021e2:	f7ff fb4d 	bl	8001880 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <prvInitialiseTaskLists+0x78>)
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <prvInitialiseTaskLists+0x64>)
 80021ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <prvInitialiseTaskLists+0x7c>)
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <prvInitialiseTaskLists+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200000d8 	.word	0x200000d8
 8002200:	2000013c 	.word	0x2000013c
 8002204:	20000150 	.word	0x20000150
 8002208:	2000016c 	.word	0x2000016c
 800220c:	20000180 	.word	0x20000180
 8002210:	20000198 	.word	0x20000198
 8002214:	20000164 	.word	0x20000164
 8002218:	20000168 	.word	0x20000168

0800221c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002222:	e019      	b.n	8002258 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002224:	f000 f8e2 	bl	80023ec <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <prvCheckTasksWaitingTermination+0x50>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fb4e 	bl	80018d6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <prvCheckTasksWaitingTermination+0x54>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <prvCheckTasksWaitingTermination+0x54>)
 8002242:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <prvCheckTasksWaitingTermination+0x58>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <prvCheckTasksWaitingTermination+0x58>)
 800224c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800224e:	f000 f8e7 	bl	8002420 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f810 	bl	8002278 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <prvCheckTasksWaitingTermination+0x58>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e1      	bne.n	8002224 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000180 	.word	0x20000180
 8002270:	200001ac 	.word	0x200001ac
 8002274:	20000194 	.word	0x20000194

08002278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f9e5 	bl	8002654 <vPortFree>
            vPortFree( pxTCB );
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f9e2 	bl	8002654 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <prvResetNextTaskUnblockTime+0x2c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <prvResetNextTaskUnblockTime+0x30>)
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022ae:	e005      	b.n	80022bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <prvResetNextTaskUnblockTime+0x2c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a03      	ldr	r2, [pc, #12]	; (80022c8 <prvResetNextTaskUnblockTime+0x30>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000164 	.word	0x20000164
 80022c8:	200001cc 	.word	0x200001cc

080022cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3b04      	subs	r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3b04      	subs	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f023 0201 	bic.w	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b04      	subs	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80022fc:	4a08      	ldr	r2, [pc, #32]	; (8002320 <pxPortInitialiseStack+0x54>)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3b14      	subs	r3, #20
 8002306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3b20      	subs	r3, #32
 8002312:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	08002325 	.word	0x08002325

08002324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800232e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	607b      	str	r3, [r7, #4]
    }
 8002340:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002342:	bf00      	nop
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0fc      	beq.n	8002344 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <pxCurrentTCBConst2>)
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	6808      	ldr	r0, [r1, #0]
 8002366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800236a:	f380 8809 	msr	PSP, r0
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	f380 8811 	msr	BASEPRI, r0
 800237a:	f04e 0e0d 	orr.w	lr, lr, #13
 800237e:	4770      	bx	lr

08002380 <pxCurrentTCBConst2>:
 8002380:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop

08002388 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002388:	4806      	ldr	r0, [pc, #24]	; (80023a4 <prvPortStartFirstTask+0x1c>)
 800238a:	6800      	ldr	r0, [r0, #0]
 800238c:	6800      	ldr	r0, [r0, #0]
 800238e:	f380 8808 	msr	MSP, r0
 8002392:	b662      	cpsie	i
 8002394:	b661      	cpsie	f
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	df00      	svc	0
 80023a0:	bf00      	nop
 80023a2:	0000      	.short	0x0000
 80023a4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop

080023ac <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <xPortStartScheduler+0x38>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <xPortStartScheduler+0x38>)
 80023b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <xPortStartScheduler+0x38>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <xPortStartScheduler+0x38>)
 80023c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80023c8:	f000 f890 	bl	80024ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <xPortStartScheduler+0x3c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80023d2:	f7ff ffd9 	bl	8002388 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80023d6:	f7ff fe75 	bl	80020c4 <vTaskSwitchContext>
    prvTaskExitError();
 80023da:	f7ff ffa3 	bl	8002324 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000ed20 	.word	0xe000ed20
 80023e8:	20000010 	.word	0x20000010

080023ec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
        __asm volatile
 80023f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	607b      	str	r3, [r7, #4]
    }
 8002404:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <vPortEnterCritical+0x30>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <vPortEnterCritical+0x30>)
 800240e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000010 	.word	0x20000010

08002420 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <vPortExitCritical+0x30>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3b01      	subs	r3, #1
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <vPortExitCritical+0x30>)
 800242e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <vPortExitCritical+0x30>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <vPortExitCritical+0x24>
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002442:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000010 	.word	0x20000010
	...

08002460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002460:	f3ef 8009 	mrs	r0, PSP
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <pxCurrentTCBConst>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002470:	6010      	str	r0, [r2, #0]
 8002472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002476:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800247a:	f380 8811 	msr	BASEPRI, r0
 800247e:	f7ff fe21 	bl	80020c4 <vTaskSwitchContext>
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f380 8811 	msr	BASEPRI, r0
 800248a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	6808      	ldr	r0, [r1, #0]
 8002492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002496:	f380 8809 	msr	PSP, r0
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	4770      	bx	lr

080024a0 <pxCurrentTCBConst>:
 80024a0:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop

080024a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
        __asm volatile
 80024ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	607b      	str	r3, [r7, #4]
    }
 80024c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80024c2:	f7ff fcf5 	bl	8001eb0 <xTaskIncrementTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <SysTick_Handler+0x40>)
 80024ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f383 8811 	msr	BASEPRI, r3
    }
 80024de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	e000ed04 	.word	0xe000ed04

080024ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <vPortSetupTimerInterrupt+0x24>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <vPortSetupTimerInterrupt+0x28>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <vPortSetupTimerInterrupt+0x2c>)
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <vPortSetupTimerInterrupt+0x30>)
 8002500:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002502:	4b03      	ldr	r3, [pc, #12]	; (8002510 <vPortSetupTimerInterrupt+0x24>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	e000e010 	.word	0xe000e010
 8002514:	e000e018 	.word	0xe000e018
 8002518:	e000e014 	.word	0xe000e014
 800251c:	0001193f 	.word	0x0001193f

08002520 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800252c:	f7ff fbb2 	bl	8001c94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002530:	4b43      	ldr	r3, [pc, #268]	; (8002640 <pvPortMalloc+0x120>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002538:	f000 f8ca 	bl	80026d0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002542:	2208      	movs	r2, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	3308      	adds	r3, #8
 800254e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d804      	bhi.n	8002564 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	e001      	b.n	8002568 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db60      	blt.n	8002630 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05d      	beq.n	8002630 <pvPortMalloc+0x110>
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <pvPortMalloc+0x124>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d858      	bhi.n	8002630 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <pvPortMalloc+0x128>)
 8002580:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <pvPortMalloc+0x128>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002588:	e004      	b.n	8002594 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d903      	bls.n	80025a6 <pvPortMalloc+0x86>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f1      	bne.n	800258a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <pvPortMalloc+0x120>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d03f      	beq.n	8002630 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2208      	movs	r2, #8
 80025b6:	4413      	add	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	1ad2      	subs	r2, r2, r3
 80025ca:	2308      	movs	r3, #8
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d90f      	bls.n	80025f2 <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	1ad2      	subs	r2, r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f8cb 	bl	8002788 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <pvPortMalloc+0x124>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a11      	ldr	r2, [pc, #68]	; (8002644 <pvPortMalloc+0x124>)
 80025fe:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <pvPortMalloc+0x124>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <pvPortMalloc+0x12c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d203      	bcs.n	8002614 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <pvPortMalloc+0x124>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <pvPortMalloc+0x12c>)
 8002612:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <pvPortMalloc+0x130>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	4a08      	ldr	r2, [pc, #32]	; (8002650 <pvPortMalloc+0x130>)
 800262e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002630:	f7ff fb3e 	bl	8001cb0 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8002634:	697b      	ldr	r3, [r7, #20]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20003de0 	.word	0x20003de0
 8002644:	20003de4 	.word	0x20003de4
 8002648:	20003dd8 	.word	0x20003dd8
 800264c:	20003de8 	.word	0x20003de8
 8002650:	20003dec 	.word	0x20003dec

08002654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d02b      	beq.n	80026be <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002666:	2308      	movs	r3, #8
 8002668:	425b      	negs	r3, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4413      	add	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0fdb      	lsrs	r3, r3, #31
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01c      	beq.n	80026be <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002698:	f7ff fafc 	bl	8001c94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <vPortFree+0x74>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <vPortFree+0x74>)
 80026a8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026aa:	68b8      	ldr	r0, [r7, #8]
 80026ac:	f000 f86c 	bl	8002788 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <vPortFree+0x78>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <vPortFree+0x78>)
 80026b8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80026ba:	f7ff faf9 	bl	8001cb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20003de4 	.word	0x20003de4
 80026cc:	20003df0 	.word	0x20003df0

080026d0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80026da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <prvHeapInit+0xa4>)
 80026de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3307      	adds	r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0307 	bic.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <prvHeapInit+0xa4>)
 8002700:	4413      	add	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <prvHeapInit+0xa8>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <prvHeapInit+0xa8>)
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800271c:	2208      	movs	r2, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <prvHeapInit+0xac>)
 8002730:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <prvHeapInit+0xac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <prvHeapInit+0xac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	1ad2      	subs	r2, r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <prvHeapInit+0xac>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a08      	ldr	r2, [pc, #32]	; (8002780 <prvHeapInit+0xb0>)
 800275e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <prvHeapInit+0xb4>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200001d8 	.word	0x200001d8
 8002778:	20003dd8 	.word	0x20003dd8
 800277c:	20003de0 	.word	0x20003de0
 8002780:	20003de8 	.word	0x20003de8
 8002784:	20003de4 	.word	0x20003de4

08002788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <prvInsertBlockIntoFreeList+0xa8>)
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e002      	b.n	800279c <prvInsertBlockIntoFreeList+0x14>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d8f7      	bhi.n	8002796 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d108      	bne.n	80027ca <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	441a      	add	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d118      	bne.n	8002810 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <prvInsertBlockIntoFreeList+0xac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d00d      	beq.n	8002806 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	441a      	add	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e008      	b.n	8002818 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <prvInsertBlockIntoFreeList+0xac>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e003      	b.n	8002818 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d002      	beq.n	8002826 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20003dd8 	.word	0x20003dd8
 8002834:	20003de0 	.word	0x20003de0

08002838 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800283c:	4803      	ldr	r0, [pc, #12]	; (800284c <_cbSendSystemDesc+0x14>)
 800283e:	f001 fc2d 	bl	800409c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002842:	4803      	ldr	r0, [pc, #12]	; (8002850 <_cbSendSystemDesc+0x18>)
 8002844:	f001 fc2a 	bl	800409c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	08004fbc 	.word	0x08004fbc
 8002850:	08004ff0 	.word	0x08004ff0

08002854 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <SEGGER_SYSVIEW_Conf+0x1c>)
 800285a:	4a06      	ldr	r2, [pc, #24]	; (8002874 <SEGGER_SYSVIEW_Conf+0x20>)
 800285c:	4906      	ldr	r1, [pc, #24]	; (8002878 <SEGGER_SYSVIEW_Conf+0x24>)
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <SEGGER_SYSVIEW_Conf+0x24>)
 8002860:	f001 f8a4 	bl	80039ac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002864:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002868:	f001 f8e4 	bl	8003a34 <SEGGER_SYSVIEW_SetRAMBase>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	08002839 	.word	0x08002839
 8002874:	080050a4 	.word	0x080050a4
 8002878:	044aa200 	.word	0x044aa200

0800287c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	b085      	sub	sp, #20
 8002880:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	e033      	b.n	80028f0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002888:	491e      	ldr	r1, [pc, #120]	; (8002904 <_cbSendTaskList+0x88>)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	491a      	ldr	r1, [pc, #104]	; (8002904 <_cbSendTaskList+0x88>)
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3304      	adds	r3, #4
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	4c16      	ldr	r4, [pc, #88]	; (8002904 <_cbSendTaskList+0x88>)
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4423      	add	r3, r4
 80028b8:	3308      	adds	r3, #8
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	4d11      	ldr	r5, [pc, #68]	; (8002904 <_cbSendTaskList+0x88>)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	442b      	add	r3, r5
 80028ca:	330c      	adds	r3, #12
 80028cc:	681d      	ldr	r5, [r3, #0]
 80028ce:	4e0d      	ldr	r6, [pc, #52]	; (8002904 <_cbSendTaskList+0x88>)
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4433      	add	r3, r6
 80028dc:	3310      	adds	r3, #16
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	462b      	mov	r3, r5
 80028e4:	4622      	mov	r2, r4
 80028e6:	f000 f8bd 	bl	8002a64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3301      	adds	r3, #1
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <_cbSendTaskList+0x8c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3c6      	bcc.n	8002888 <_cbSendTaskList+0xc>
  }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002904:	20003df4 	.word	0x20003df4
 8002908:	20003e94 	.word	0x20003e94

0800290c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800290c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002914:	f7ff fabc 	bl	8001e90 <xTaskGetTickCountFromISR>
 8002918:	4603      	mov	r3, r0
 800291a:	2200      	movs	r2, #0
 800291c:	469a      	mov	sl, r3
 800291e:	4693      	mov	fp, r2
 8002920:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	f04f 0a00 	mov.w	sl, #0
 8002930:	f04f 0b00 	mov.w	fp, #0
 8002934:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002938:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800293c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002940:	4652      	mov	r2, sl
 8002942:	465b      	mov	r3, fp
 8002944:	1a14      	subs	r4, r2, r0
 8002946:	eb63 0501 	sbc.w	r5, r3, r1
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	00ab      	lsls	r3, r5, #2
 8002954:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002958:	00a2      	lsls	r2, r4, #2
 800295a:	4614      	mov	r4, r2
 800295c:	461d      	mov	r5, r3
 800295e:	eb14 0800 	adds.w	r8, r4, r0
 8002962:	eb45 0901 	adc.w	r9, r5, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002982:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002994 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80029a2:	2205      	movs	r2, #5
 80029a4:	492b      	ldr	r1, [pc, #172]	; (8002a54 <SYSVIEW_AddTask+0xc0>)
 80029a6:	68b8      	ldr	r0, [r7, #8]
 80029a8:	f001 fe30 	bl	800460c <memcmp>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d04b      	beq.n	8002a4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d903      	bls.n	80029c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80029ba:	4828      	ldr	r0, [pc, #160]	; (8002a5c <SYSVIEW_AddTask+0xc8>)
 80029bc:	f001 fd96 	bl	80044ec <SEGGER_SYSVIEW_Warn>
    return;
 80029c0:	e044      	b.n	8002a4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4926      	ldr	r1, [pc, #152]	; (8002a60 <SYSVIEW_AddTask+0xcc>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4921      	ldr	r1, [pc, #132]	; (8002a60 <SYSVIEW_AddTask+0xcc>)
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	491b      	ldr	r1, [pc, #108]	; (8002a60 <SYSVIEW_AddTask+0xcc>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3308      	adds	r3, #8
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4916      	ldr	r1, [pc, #88]	; (8002a60 <SYSVIEW_AddTask+0xcc>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	330c      	adds	r3, #12
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4910      	ldr	r1, [pc, #64]	; (8002a60 <SYSVIEW_AddTask+0xcc>)
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3310      	adds	r3, #16
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <SYSVIEW_AddTask+0xc4>)
 8002a36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f80e 	bl	8002a64 <SYSVIEW_SendTaskInfo>
 8002a48:	e000      	b.n	8002a4c <SYSVIEW_AddTask+0xb8>
    return;
 8002a4a:	bf00      	nop

}
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	08005000 	.word	0x08005000
 8002a58:	20003e94 	.word	0x20003e94
 8002a5c:	08005008 	.word	0x08005008
 8002a60:	20003df4 	.word	0x20003df4

08002a64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	2214      	movs	r2, #20
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 fdd6 	bl	800462c <memset>
  TaskInfo.TaskID     = TaskID;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fa07 	bl	8003eac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002a9e:	bf00      	nop
 8002aa0:	3728      	adds	r7, #40	; 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <_DoInit+0x8c>)
 8002ab0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <_DoInit+0x90>)
 8002ac2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <_DoInit+0x94>)
 8002ac8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <_DoInit+0x90>)
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <_DoInit+0x98>)
 8002aee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2210      	movs	r2, #16
 8002af4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3307      	adds	r3, #7
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <_DoInit+0x9c>)
 8002b0e:	6810      	ldr	r0, [r2, #0]
 8002b10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <_DoInit+0xa0>)
 8002b16:	6810      	ldr	r0, [r2, #0]
 8002b18:	6018      	str	r0, [r3, #0]
 8002b1a:	8891      	ldrh	r1, [r2, #4]
 8002b1c:	7992      	ldrb	r2, [r2, #6]
 8002b1e:	8099      	strh	r1, [r3, #4]
 8002b20:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20003e98 	.word	0x20003e98
 8002b38:	08005058 	.word	0x08005058
 8002b3c:	20003f40 	.word	0x20003f40
 8002b40:	20004340 	.word	0x20004340
 8002b44:	08005064 	.word	0x08005064
 8002b48:	08005068 	.word	0x08005068

08002b4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002b58:	4b3e      	ldr	r3, [pc, #248]	; (8002c54 <SEGGER_RTT_ReadNoLock+0x108>)
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <SEGGER_RTT_ReadNoLock+0x1e>
 8002b66:	f7ff ff9f 	bl	8002aa8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	4a37      	ldr	r2, [pc, #220]	; (8002c54 <SEGGER_RTT_ReadNoLock+0x108>)
 8002b78:	4413      	add	r3, r2
 8002b7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d92b      	bls.n	8002bf0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	bf28      	it	cs
 8002baa:	4613      	movcs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	4413      	add	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6939      	ldr	r1, [r7, #16]
 8002bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bbe:	f001 fd63 	bl	8004688 <memcpy>
    NumBytesRead += NumBytesRem;
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4413      	add	r3, r2
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4413      	add	r3, r2
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d101      	bne.n	8002bf0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf28      	it	cs
 8002c00:	4613      	movcs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d019      	beq.n	8002c3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	4413      	add	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	6939      	ldr	r1, [r7, #16]
 8002c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c1a:	f001 fd35 	bl	8004688 <memcpy>
    NumBytesRead += NumBytesRem;
 8002c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	4413      	add	r3, r2
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3730      	adds	r7, #48	; 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20003e98 	.word	0x20003e98

08002c58 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002c66:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002c74:	f7ff ff18 	bl	8002aa8 <_DoInit>
  SEGGER_RTT_LOCK();
 8002c78:	f3ef 8311 	mrs	r3, BASEPRI
 8002c7c:	f04f 0120 	mov.w	r1, #32
 8002c80:	f381 8811 	msr	BASEPRI, r1
 8002c84:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8002c88:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dbeb      	blt.n	8002c8e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002cb6:	e000      	b.n	8002cba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002cb8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	da3d      	bge.n	8002d40 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002cc4:	6939      	ldr	r1, [r7, #16]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002cd8:	6939      	ldr	r1, [r7, #16]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3304      	adds	r3, #4
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3320      	adds	r3, #32
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002d02:	6939      	ldr	r1, [r7, #16]
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3328      	adds	r3, #40	; 0x28
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002d16:	6939      	ldr	r1, [r7, #16]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	3324      	adds	r3, #36	; 0x24
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002d2a:	6939      	ldr	r1, [r7, #16]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	332c      	adds	r3, #44	; 0x2c
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e002      	b.n	8002d46 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20003e98 	.word	0x20003e98

08002d5c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002d78:	f7ff fe96 	bl	8002aa8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8002d7e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d24b      	bcs.n	8002e24 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 8002d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8002d90:	f04f 0120 	mov.w	r1, #32
 8002d94:	f381 8811 	msr	BASEPRI, r1
 8002d98:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d031      	beq.n	8002e04 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	3360      	adds	r3, #96	; 0x60
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002db4:	6979      	ldr	r1, [r7, #20]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3364      	adds	r3, #100	; 0x64
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002dc8:	6979      	ldr	r1, [r7, #20]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3368      	adds	r3, #104	; 0x68
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8002ddc:	6979      	ldr	r1, [r7, #20]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3370      	adds	r3, #112	; 0x70
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8002df0:	6979      	ldr	r1, [r7, #20]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	336c      	adds	r3, #108	; 0x6c
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8002e04:	6979      	ldr	r1, [r7, #20]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3374      	adds	r3, #116	; 0x74
 8002e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e16:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	e002      	b.n	8002e2a <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20003e98 	.word	0x20003e98

08002e38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002e48:	e002      	b.n	8002e50 <_EncodeStr+0x18>
    Len++;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f6      	bne.n	8002e4a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d901      	bls.n	8002e68 <_EncodeStr+0x30>
    Len = Limit;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2bfe      	cmp	r3, #254	; 0xfe
 8002e6c:	d806      	bhi.n	8002e7c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	60fa      	str	r2, [r7, #12]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e011      	b.n	8002ea0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60fa      	str	r2, [r7, #12]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	60fa      	str	r2, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	0a19      	lsrs	r1, r3, #8
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	60fa      	str	r2, [r7, #12]
 8002e9c:	b2ca      	uxtb	r2, r1
 8002e9e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002ea4:	e00a      	b.n	8002ebc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	1c53      	adds	r3, r2, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1c59      	adds	r1, r3, #1
 8002eb0:	60f9      	str	r1, [r7, #12]
 8002eb2:	7812      	ldrb	r2, [r2, #0]
 8002eb4:	701a      	strb	r2, [r3, #0]
    n++;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3f0      	bcc.n	8002ea6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002eee:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <_HandleIncomingPacket+0xdc>)
 8002ef0:	7e1b      	ldrb	r3, [r3, #24]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	1cfb      	adds	r3, r7, #3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f7ff fe27 	bl	8002b4c <SEGGER_RTT_ReadNoLock>
 8002efe:	4603      	mov	r3, r0
 8002f00:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dd59      	ble.n	8002fbc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d032      	beq.n	8002f74 <_HandleIncomingPacket+0x8c>
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	dc42      	bgt.n	8002f98 <_HandleIncomingPacket+0xb0>
 8002f12:	2b07      	cmp	r3, #7
 8002f14:	dc16      	bgt.n	8002f44 <_HandleIncomingPacket+0x5c>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	dd3e      	ble.n	8002f98 <_HandleIncomingPacket+0xb0>
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d83b      	bhi.n	8002f98 <_HandleIncomingPacket+0xb0>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <_HandleIncomingPacket+0x40>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f4b 	.word	0x08002f4b
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f57 	.word	0x08002f57
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f63 	.word	0x08002f63
 8002f3c:	08002f69 	.word	0x08002f69
 8002f40:	08002f6f 	.word	0x08002f6f
 8002f44:	2b7f      	cmp	r3, #127	; 0x7f
 8002f46:	d034      	beq.n	8002fb2 <_HandleIncomingPacket+0xca>
 8002f48:	e026      	b.n	8002f98 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002f4a:	f000 fe35 	bl	8003bb8 <SEGGER_SYSVIEW_Start>
      break;
 8002f4e:	e035      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002f50:	f000 feec 	bl	8003d2c <SEGGER_SYSVIEW_Stop>
      break;
 8002f54:	e032      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002f56:	f001 f8c5 	bl	80040e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002f5a:	e02f      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002f5c:	f001 f88a 	bl	8004074 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002f60:	e02c      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002f62:	f000 ff09 	bl	8003d78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002f66:	e029      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002f68:	f001 fa6e 	bl	8004448 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002f6c:	e026      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002f6e:	f001 fa4d 	bl	800440c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002f72:	e023      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <_HandleIncomingPacket+0xdc>)
 8002f76:	7e1b      	ldrb	r3, [r3, #24]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	1cfb      	adds	r3, r7, #3
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff fde4 	bl	8002b4c <SEGGER_RTT_ReadNoLock>
 8002f84:	4603      	mov	r3, r0
 8002f86:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd13      	ble.n	8002fb6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f9bb 	bl	800430c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002f96:	e00e      	b.n	8002fb6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da0c      	bge.n	8002fba <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <_HandleIncomingPacket+0xdc>)
 8002fa2:	7e1b      	ldrb	r3, [r3, #24]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	1cfb      	adds	r3, r7, #3
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4619      	mov	r1, r3
 8002fac:	f7ff fdce 	bl	8002b4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002fb0:	e003      	b.n	8002fba <_HandleIncomingPacket+0xd2>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <_HandleIncomingPacket+0xd4>
      break;
 8002fba:	bf00      	nop
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20004758 	.word	0x20004758

08002fc8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002fce:	2301      	movs	r3, #1
 8002fd0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe2:	e00b      	b.n	8002ffc <_TrySendOverflowPacket+0x34>
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	1c59      	adds	r1, r3, #1
 8002fec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002fee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	09db      	lsrs	r3, r3, #7
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8003000:	d8f0      	bhi.n	8002fe4 <_TrySendOverflowPacket+0x1c>
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <_TrySendOverflowPacket+0xe0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	e00b      	b.n	8003044 <_TrySendOverflowPacket+0x7c>
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	1c59      	adds	r1, r3, #1
 8003034:	6279      	str	r1, [r7, #36]	; 0x24
 8003036:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	09db      	lsrs	r3, r3, #7
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b7f      	cmp	r3, #127	; 0x7f
 8003048:	d8f0      	bhi.n	800302c <_TrySendOverflowPacket+0x64>
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	627a      	str	r2, [r7, #36]	; 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	4618      	mov	r0, r3
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	461a      	mov	r2, r3
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	4619      	mov	r1, r3
 800306c:	f7fd f870 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003070:	4603      	mov	r3, r0
 8003072:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	3b01      	subs	r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e004      	b.n	8003098 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	3301      	adds	r3, #1
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <_TrySendOverflowPacket+0xdc>)
 8003096:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003098:	693b      	ldr	r3, [r7, #16]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3730      	adds	r7, #48	; 0x30
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20004758 	.word	0x20004758
 80030a8:	e0001004 	.word	0xe0001004

080030ac <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80030b8:	4b6c      	ldr	r3, [pc, #432]	; (800326c <_SendPacket+0x1c0>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d010      	beq.n	80030e2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <_SendPacket+0x1c0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a3 	beq.w	8003210 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80030ca:	4b68      	ldr	r3, [pc, #416]	; (800326c <_SendPacket+0x1c0>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d109      	bne.n	80030e6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80030d2:	f7ff ff79 	bl	8002fc8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <_SendPacket+0x1c0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 809a 	bne.w	8003214 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80030e0:	e001      	b.n	80030e6 <_SendPacket+0x3a>
    goto Send;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <_SendPacket+0x3c>
Send:
 80030e6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b1f      	cmp	r3, #31
 80030ec:	d809      	bhi.n	8003102 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80030ee:	4b5f      	ldr	r3, [pc, #380]	; (800326c <_SendPacket+0x1c0>)
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 808b 	bne.w	8003218 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b17      	cmp	r3, #23
 8003106:	d807      	bhi.n	8003118 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e03d      	b.n	8003194 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b7f      	cmp	r3, #127	; 0x7f
 8003124:	d912      	bls.n	800314c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	09da      	lsrs	r2, r3, #7
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3b01      	subs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	3a01      	subs	r2, #1
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e006      	b.n	800315a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b7f      	cmp	r3, #127	; 0x7f
 800315e:	d912      	bls.n	8003186 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	09da      	lsrs	r2, r3, #7
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	3a01      	subs	r2, #1
 8003178:	60fa      	str	r2, [r7, #12]
 800317a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e006      	b.n	8003194 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b01      	subs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <_SendPacket+0x1c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <_SendPacket+0x1c0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	e00b      	b.n	80031c6 <_SendPacket+0x11a>
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1c59      	adds	r1, r3, #1
 80031b6:	6279      	str	r1, [r7, #36]	; 0x24
 80031b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	09db      	lsrs	r3, r3, #7
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2b7f      	cmp	r3, #127	; 0x7f
 80031ca:	d8f0      	bhi.n	80031ae <_SendPacket+0x102>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	627a      	str	r2, [r7, #36]	; 0x24
 80031d2:	6a3a      	ldr	r2, [r7, #32]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <_SendPacket+0x1c0>)
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	4618      	mov	r0, r3
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	f7fc ffb0 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80031f0:	4603      	mov	r3, r0
 80031f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <_SendPacket+0x1c0>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	60d3      	str	r3, [r2, #12]
 8003200:	e00b      	b.n	800321a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <_SendPacket+0x1c0>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <_SendPacket+0x1c0>)
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e004      	b.n	800321a <_SendPacket+0x16e>
    goto SendDone;
 8003210:	bf00      	nop
 8003212:	e002      	b.n	800321a <_SendPacket+0x16e>
      goto SendDone;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <_SendPacket+0x16e>
      goto SendDone;
 8003218:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <_SendPacket+0x1c0>)
 800321c:	7e1b      	ldrb	r3, [r3, #24]
 800321e:	4619      	mov	r1, r3
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <_SendPacket+0x1c8>)
 8003222:	460b      	mov	r3, r1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	440b      	add	r3, r1
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	336c      	adds	r3, #108	; 0x6c
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <_SendPacket+0x1c0>)
 8003232:	7e1b      	ldrb	r3, [r3, #24]
 8003234:	4618      	mov	r0, r3
 8003236:	490f      	ldr	r1, [pc, #60]	; (8003274 <_SendPacket+0x1c8>)
 8003238:	4603      	mov	r3, r0
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4403      	add	r3, r0
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	3370      	adds	r3, #112	; 0x70
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d00b      	beq.n	8003262 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <_SendPacket+0x1c0>)
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <_SendPacket+0x1c0>)
 8003254:	2201      	movs	r2, #1
 8003256:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003258:	f7ff fe46 	bl	8002ee8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <_SendPacket+0x1c0>)
 800325e:	2200      	movs	r2, #0
 8003260:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003262:	bf00      	nop
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20004758 	.word	0x20004758
 8003270:	e0001004 	.word	0xe0001004
 8003274:	20003e98 	.word	0x20003e98

08003278 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3301      	adds	r3, #1
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d80a      	bhi.n	80032a8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6051      	str	r1, [r2, #4]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d15a      	bne.n	8003366 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	e00b      	b.n	80032ea <_StoreChar+0x72>
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	1c59      	adds	r1, r3, #1
 80032da:	6279      	str	r1, [r7, #36]	; 0x24
 80032dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	09db      	lsrs	r3, r3, #7
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b7f      	cmp	r3, #127	; 0x7f
 80032ee:	d8f0      	bhi.n	80032d2 <_StoreChar+0x5a>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	627a      	str	r2, [r7, #36]	; 0x24
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e00b      	b.n	8003322 <_StoreChar+0xaa>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	61f9      	str	r1, [r7, #28]
 8003314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	09db      	lsrs	r3, r3, #7
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b7f      	cmp	r3, #127	; 0x7f
 8003326:	d8f0      	bhi.n	800330a <_StoreChar+0x92>
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	221a      	movs	r2, #26
 800333e:	6939      	ldr	r1, [r7, #16]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff feb3 	bl	80030ac <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fdc0 	bl	8002ed0 <_PreparePacket>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  }
}
 8003366:	bf00      	nop
 8003368:	3728      	adds	r7, #40	; 0x28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003382:	2301      	movs	r3, #1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003386:	2301      	movs	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800338a:	e007      	b.n	800339c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	623b      	str	r3, [r7, #32]
    Width++;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d2f3      	bcs.n	800338c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d901      	bls.n	80033b0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11f      	bne.n	80033fa <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <_PrintUnsigned+0x66>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <_PrintUnsigned+0x66>
        c = '0';
 80033d0:	2330      	movs	r3, #48	; 0x30
 80033d2:	76fb      	strb	r3, [r7, #27]
 80033d4:	e001      	b.n	80033da <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80033d6:	2320      	movs	r3, #32
 80033d8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033da:	e007      	b.n	80033ec <_PrintUnsigned+0x7c>
        FieldWidth--;
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	3b01      	subs	r3, #1
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80033e2:	7efb      	ldrb	r3, [r7, #27]
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff ff46 	bl	8003278 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <_PrintUnsigned+0x8a>
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3f0      	bcc.n	80033dc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d903      	bls.n	8003408 <_PrintUnsigned+0x98>
      NumDigits--;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	3b01      	subs	r3, #1
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	e009      	b.n	800341c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d200      	bcs.n	800341c <_PrintUnsigned+0xac>
        break;
 800341a:	e005      	b.n	8003428 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003426:	e7e8      	b.n	80033fa <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003440:	4a15      	ldr	r2, [pc, #84]	; (8003498 <_PrintUnsigned+0x128>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	4413      	add	r3, r2
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff ff14 	bl	8003278 <_StoreChar>
    Digit /= Base;
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e3      	bne.n	8003428 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003470:	e006      	b.n	8003480 <_PrintUnsigned+0x110>
        FieldWidth--;
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	3b01      	subs	r3, #1
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003478:	2120      	movs	r1, #32
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff fefc 	bl	8003278 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <_PrintUnsigned+0x11e>
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	429a      	cmp	r2, r3
 800348c:	d3f1      	bcc.n	8003472 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800348e:	bf00      	nop
 8003490:	3728      	adds	r7, #40	; 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	080050b8 	.word	0x080050b8

0800349c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bfb8      	it	lt
 80034b0:	425b      	neglt	r3, r3
 80034b2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80034b8:	e007      	b.n	80034ca <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	fb92 f3f3 	sdiv	r3, r2, r3
 80034c2:	613b      	str	r3, [r7, #16]
    Width++;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	daf3      	bge.n	80034ba <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d901      	bls.n	80034de <_PrintInt+0x42>
    Width = NumDigits;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <_PrintInt+0x5e>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db04      	blt.n	80034f4 <_PrintInt+0x58>
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <_PrintInt+0x5e>
    FieldWidth--;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <_PrintInt+0x6e>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <_PrintInt+0x9c>
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d111      	bne.n	8003538 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00e      	beq.n	8003538 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800351a:	e006      	b.n	800352a <_PrintInt+0x8e>
        FieldWidth--;
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	3b01      	subs	r3, #1
 8003520:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003522:	2120      	movs	r1, #32
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fea7 	bl	8003278 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <_PrintInt+0x9c>
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3f1      	bcc.n	800351c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da07      	bge.n	800354e <_PrintInt+0xb2>
    v = -v;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	425b      	negs	r3, r3
 8003542:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003544:	212d      	movs	r1, #45	; 0x2d
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff fe96 	bl	8003278 <_StoreChar>
 800354c:	e008      	b.n	8003560 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003558:	212b      	movs	r1, #43	; 0x2b
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff fe8c 	bl	8003278 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <_PrintInt+0x102>
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d114      	bne.n	800359e <_PrintInt+0x102>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d111      	bne.n	800359e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003580:	e006      	b.n	8003590 <_PrintInt+0xf4>
        FieldWidth--;
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	3b01      	subs	r3, #1
 8003586:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003588:	2130      	movs	r1, #48	; 0x30
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fe74 	bl	8003278 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <_PrintInt+0x102>
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	429a      	cmp	r2, r3
 800359c:	d3f1      	bcc.n	8003582 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff fedf 	bl	8003370 <_PrintUnsigned>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b098      	sub	sp, #96	; 0x60
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80035c8:	f3ef 8311 	mrs	r3, BASEPRI
 80035cc:	f04f 0120 	mov.w	r1, #32
 80035d0:	f381 8811 	msr	BASEPRI, r1
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	48b7      	ldr	r0, [pc, #732]	; (80038b4 <_VPrintTarget+0x2f8>)
 80035d8:	f7ff fc7a 	bl	8002ed0 <_PreparePacket>
 80035dc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80035de:	4bb5      	ldr	r3, [pc, #724]	; (80038b4 <_VPrintTarget+0x2f8>)
 80035e0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3301      	adds	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003602:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8183 	beq.w	8003912 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800360c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003610:	2b25      	cmp	r3, #37	; 0x25
 8003612:	f040 8170 	bne.w	80038f6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003616:	2300      	movs	r3, #0
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8003626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800362a:	3b23      	subs	r3, #35	; 0x23
 800362c:	2b0d      	cmp	r3, #13
 800362e:	d83f      	bhi.n	80036b0 <_VPrintTarget+0xf4>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <_VPrintTarget+0x7c>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	080036a1 	.word	0x080036a1
 800363c:	080036b1 	.word	0x080036b1
 8003640:	080036b1 	.word	0x080036b1
 8003644:	080036b1 	.word	0x080036b1
 8003648:	080036b1 	.word	0x080036b1
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080036b1 	.word	0x080036b1
 8003654:	080036b1 	.word	0x080036b1
 8003658:	08003691 	.word	0x08003691
 800365c:	080036b1 	.word	0x080036b1
 8003660:	08003671 	.word	0x08003671
 8003664:	080036b1 	.word	0x080036b1
 8003668:	080036b1 	.word	0x080036b1
 800366c:	08003681 	.word	0x08003681
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e01a      	b.n	80036b6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e012      	b.n	80036b6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	64bb      	str	r3, [r7, #72]	; 0x48
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e00a      	b.n	80036b6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80036a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3301      	adds	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e002      	b.n	80036b6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80036b0:	2300      	movs	r3, #0
 80036b2:	653b      	str	r3, [r7, #80]	; 0x50
 80036b4:	bf00      	nop
        }
      } while (v);
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1b0      	bne.n	800361e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80036bc:	2300      	movs	r3, #0
 80036be:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80036c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036cc:	2b2f      	cmp	r3, #47	; 0x2f
 80036ce:	d912      	bls.n	80036f6 <_VPrintTarget+0x13a>
 80036d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036d4:	2b39      	cmp	r3, #57	; 0x39
 80036d6:	d80e      	bhi.n	80036f6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80036de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	461a      	mov	r2, r3
 80036ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036ee:	4413      	add	r3, r2
 80036f0:	3b30      	subs	r3, #48	; 0x30
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80036f4:	e7e4      	b.n	80036c0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80036f6:	2300      	movs	r3, #0
 80036f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003702:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003706:	2b2e      	cmp	r3, #46	; 0x2e
 8003708:	d11d      	bne.n	8003746 <_VPrintTarget+0x18a>
        sFormat++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800371c:	2b2f      	cmp	r3, #47	; 0x2f
 800371e:	d912      	bls.n	8003746 <_VPrintTarget+0x18a>
 8003720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003724:	2b39      	cmp	r3, #57	; 0x39
 8003726:	d80e      	bhi.n	8003746 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800372e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	461a      	mov	r2, r3
 800373a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800373e:	4413      	add	r3, r2
 8003740:	3b30      	subs	r3, #48	; 0x30
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8003744:	e7e4      	b.n	8003710 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800374e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003752:	2b6c      	cmp	r3, #108	; 0x6c
 8003754:	d003      	beq.n	800375e <_VPrintTarget+0x1a2>
 8003756:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800375a:	2b68      	cmp	r3, #104	; 0x68
 800375c:	d107      	bne.n	800376e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3301      	adds	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800376c:	e7ef      	b.n	800374e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800376e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003772:	2b25      	cmp	r3, #37	; 0x25
 8003774:	f000 80b3 	beq.w	80038de <_VPrintTarget+0x322>
 8003778:	2b25      	cmp	r3, #37	; 0x25
 800377a:	f2c0 80b7 	blt.w	80038ec <_VPrintTarget+0x330>
 800377e:	2b78      	cmp	r3, #120	; 0x78
 8003780:	f300 80b4 	bgt.w	80038ec <_VPrintTarget+0x330>
 8003784:	2b58      	cmp	r3, #88	; 0x58
 8003786:	f2c0 80b1 	blt.w	80038ec <_VPrintTarget+0x330>
 800378a:	3b58      	subs	r3, #88	; 0x58
 800378c:	2b20      	cmp	r3, #32
 800378e:	f200 80ad 	bhi.w	80038ec <_VPrintTarget+0x330>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <_VPrintTarget+0x1dc>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	0800388f 	.word	0x0800388f
 800379c:	080038ed 	.word	0x080038ed
 80037a0:	080038ed 	.word	0x080038ed
 80037a4:	080038ed 	.word	0x080038ed
 80037a8:	080038ed 	.word	0x080038ed
 80037ac:	080038ed 	.word	0x080038ed
 80037b0:	080038ed 	.word	0x080038ed
 80037b4:	080038ed 	.word	0x080038ed
 80037b8:	080038ed 	.word	0x080038ed
 80037bc:	080038ed 	.word	0x080038ed
 80037c0:	080038ed 	.word	0x080038ed
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	08003843 	.word	0x08003843
 80037cc:	080038ed 	.word	0x080038ed
 80037d0:	080038ed 	.word	0x080038ed
 80037d4:	080038ed 	.word	0x080038ed
 80037d8:	080038ed 	.word	0x080038ed
 80037dc:	080038ed 	.word	0x080038ed
 80037e0:	080038ed 	.word	0x080038ed
 80037e4:	080038ed 	.word	0x080038ed
 80037e8:	080038ed 	.word	0x080038ed
 80037ec:	080038ed 	.word	0x080038ed
 80037f0:	080038ed 	.word	0x080038ed
 80037f4:	080038ed 	.word	0x080038ed
 80037f8:	080038b9 	.word	0x080038b9
 80037fc:	080038ed 	.word	0x080038ed
 8003800:	080038ed 	.word	0x080038ed
 8003804:	080038ed 	.word	0x080038ed
 8003808:	080038ed 	.word	0x080038ed
 800380c:	08003869 	.word	0x08003869
 8003810:	080038ed 	.word	0x080038ed
 8003814:	080038ed 	.word	0x080038ed
 8003818:	0800388f 	.word	0x0800388f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1d19      	adds	r1, r3, #4
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6011      	str	r1, [r2, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003830:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fd1c 	bl	8003278 <_StoreChar>
        break;
 8003840:	e055      	b.n	80038ee <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	1d19      	adds	r1, r3, #4
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6011      	str	r1, [r2, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003850:	f107 0014 	add.w	r0, r7, #20
 8003854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	220a      	movs	r2, #10
 8003860:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003862:	f7ff fe1b 	bl	800349c <_PrintInt>
        break;
 8003866:	e042      	b.n	80038ee <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1d19      	adds	r1, r3, #4
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6011      	str	r1, [r2, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003878:	f107 0014 	add.w	r0, r7, #20
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	220a      	movs	r2, #10
 8003888:	f7ff fd72 	bl	8003370 <_PrintUnsigned>
        break;
 800388c:	e02f      	b.n	80038ee <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1d19      	adds	r1, r3, #4
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6011      	str	r1, [r2, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800389c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800389e:	f107 0014 	add.w	r0, r7, #20
 80038a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ac:	2210      	movs	r2, #16
 80038ae:	f7ff fd5f 	bl	8003370 <_PrintUnsigned>
        break;
 80038b2:	e01c      	b.n	80038ee <_VPrintTarget+0x332>
 80038b4:	20004788 	.word	0x20004788
      case 'p':
        v = va_arg(*pParamList, int);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1d19      	adds	r1, r3, #4
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6011      	str	r1, [r2, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80038c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038c8:	f107 0014 	add.w	r0, r7, #20
 80038cc:	2300      	movs	r3, #0
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	2308      	movs	r3, #8
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2308      	movs	r3, #8
 80038d6:	2210      	movs	r2, #16
 80038d8:	f7ff fd4a 	bl	8003370 <_PrintUnsigned>
        break;
 80038dc:	e007      	b.n	80038ee <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	2125      	movs	r1, #37	; 0x25
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fcc7 	bl	8003278 <_StoreChar>
        break;
 80038ea:	e000      	b.n	80038ee <_VPrintTarget+0x332>
      default:
        break;
 80038ec:	bf00      	nop
      }
      sFormat++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e007      	b.n	8003906 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80038f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fcb9 	bl	8003278 <_StoreChar>
    }
  } while (*sFormat);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f47f ae72 	bne.w	80035f4 <_VPrintTarget+0x38>
 8003910:	e000      	b.n	8003914 <_VPrintTarget+0x358>
      break;
 8003912:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d041      	beq.n	800399e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	643b      	str	r3, [r7, #64]	; 0x40
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392a:	e00b      	b.n	8003944 <_VPrintTarget+0x388>
 800392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392e:	b2da      	uxtb	r2, r3
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	1c59      	adds	r1, r3, #1
 8003934:	6439      	str	r1, [r7, #64]	; 0x40
 8003936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003940:	09db      	lsrs	r3, r3, #7
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003946:	2b7f      	cmp	r3, #127	; 0x7f
 8003948:	d8f0      	bhi.n	800392c <_VPrintTarget+0x370>
 800394a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	643a      	str	r2, [r7, #64]	; 0x40
 8003950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003958:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
 800395e:	2300      	movs	r3, #0
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
 8003962:	e00b      	b.n	800397c <_VPrintTarget+0x3c0>
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	b2da      	uxtb	r2, r3
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	63b9      	str	r1, [r7, #56]	; 0x38
 800396e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	09db      	lsrs	r3, r3, #7
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	2b7f      	cmp	r3, #127	; 0x7f
 8003980:	d8f0      	bhi.n	8003964 <_VPrintTarget+0x3a8>
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	63ba      	str	r2, [r7, #56]	; 0x38
 8003988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	69b9      	ldr	r1, [r7, #24]
 8003996:	221a      	movs	r2, #26
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb87 	bl	80030ac <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80039a4:	bf00      	nop
 80039a6:	3758      	adds	r7, #88	; 0x58
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039ba:	2300      	movs	r3, #0
 80039bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c0:	4917      	ldr	r1, [pc, #92]	; (8003a20 <SEGGER_SYSVIEW_Init+0x74>)
 80039c2:	4818      	ldr	r0, [pc, #96]	; (8003a24 <SEGGER_SYSVIEW_Init+0x78>)
 80039c4:	f7ff f948 	bl	8002c58 <SEGGER_RTT_AllocUpBuffer>
 80039c8:	4603      	mov	r3, r0
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039ce:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039d2:	785a      	ldrb	r2, [r3, #1]
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039d6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039da:	7e1b      	ldrb	r3, [r3, #24]
 80039dc:	4618      	mov	r0, r3
 80039de:	2300      	movs	r3, #0
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2308      	movs	r3, #8
 80039e4:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <SEGGER_SYSVIEW_Init+0x80>)
 80039e6:	490f      	ldr	r1, [pc, #60]	; (8003a24 <SEGGER_SYSVIEW_Init+0x78>)
 80039e8:	f7ff f9b8 	bl	8002d5c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <SEGGER_SYSVIEW_Init+0x84>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039f8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80039fa:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003a0c:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20004350 	.word	0x20004350
 8003a24:	08005070 	.word	0x08005070
 8003a28:	20004758 	.word	0x20004758
 8003a2c:	20004750 	.word	0x20004750
 8003a30:	e0001004 	.word	0xe0001004

08003a34 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003a3c:	4a03      	ldr	r2, [pc, #12]	; (8003a4c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6113      	str	r3, [r2, #16]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	20004758 	.word	0x20004758

08003a50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a58:	f3ef 8311 	mrs	r3, BASEPRI
 8003a5c:	f04f 0120 	mov.w	r1, #32
 8003a60:	f381 8811 	msr	BASEPRI, r1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4808      	ldr	r0, [pc, #32]	; (8003a88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003a68:	f7ff fa32 	bl	8002ed0 <_PreparePacket>
 8003a6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f7ff fb1a 	bl	80030ac <_SendPacket>
  RECORD_END();
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f383 8811 	msr	BASEPRI, r3
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20004788 	.word	0x20004788

08003a8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a96:	f3ef 8311 	mrs	r3, BASEPRI
 8003a9a:	f04f 0120 	mov.w	r1, #32
 8003a9e:	f381 8811 	msr	BASEPRI, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	4816      	ldr	r0, [pc, #88]	; (8003b00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003aa6:	f7ff fa13 	bl	8002ed0 <_PreparePacket>
 8003aaa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e00b      	b.n	8003ad2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	61f9      	str	r1, [r7, #28]
 8003ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	09db      	lsrs	r3, r3, #7
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ad6:	d8f0      	bhi.n	8003aba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	61fa      	str	r2, [r7, #28]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	6938      	ldr	r0, [r7, #16]
 8003aee:	f7ff fadd 	bl	80030ac <_SendPacket>
  RECORD_END();
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f383 8811 	msr	BASEPRI, r3
}
 8003af8:	bf00      	nop
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20004788 	.word	0x20004788

08003b04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b10:	f3ef 8311 	mrs	r3, BASEPRI
 8003b14:	f04f 0120 	mov.w	r1, #32
 8003b18:	f381 8811 	msr	BASEPRI, r1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003b20:	f7ff f9d6 	bl	8002ed0 <_PreparePacket>
 8003b24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b32:	e00b      	b.n	8003b4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	09db      	lsrs	r3, r3, #7
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b50:	d8f0      	bhi.n	8003b34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	e00b      	b.n	8003b84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	6279      	str	r1, [r7, #36]	; 0x24
 8003b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	09db      	lsrs	r3, r3, #7
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	2b7f      	cmp	r3, #127	; 0x7f
 8003b88:	d8f0      	bhi.n	8003b6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	69b8      	ldr	r0, [r7, #24]
 8003ba0:	f7ff fa84 	bl	80030ac <_SendPacket>
  RECORD_END();
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f383 8811 	msr	BASEPRI, r3
}
 8003baa:	bf00      	nop
 8003bac:	3730      	adds	r7, #48	; 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20004788 	.word	0x20004788

08003bb8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003bbe:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8003bc8:	f04f 0120 	mov.w	r1, #32
 8003bcc:	f381 8811 	msr	BASEPRI, r1
 8003bd0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	220a      	movs	r2, #10
 8003bd8:	4952      	ldr	r1, [pc, #328]	; (8003d24 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc fab8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003be6:	200a      	movs	r0, #10
 8003be8:	f7ff ff32 	bl	8003a50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bec:	f3ef 8311 	mrs	r3, BASEPRI
 8003bf0:	f04f 0120 	mov.w	r1, #32
 8003bf4:	f381 8811 	msr	BASEPRI, r1
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	484b      	ldr	r0, [pc, #300]	; (8003d28 <SEGGER_SYSVIEW_Start+0x170>)
 8003bfc:	f7ff f968 	bl	8002ed0 <_PreparePacket>
 8003c00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0a:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c10:	e00b      	b.n	8003c2a <SEGGER_SYSVIEW_Start+0x72>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	1c59      	adds	r1, r3, #1
 8003c1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	09db      	lsrs	r3, r3, #7
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2e:	d8f0      	bhi.n	8003c12 <SEGGER_SYSVIEW_Start+0x5a>
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	e00b      	b.n	8003c64 <SEGGER_SYSVIEW_Start+0xac>
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	6279      	str	r1, [r7, #36]	; 0x24
 8003c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	09db      	lsrs	r3, r3, #7
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2b7f      	cmp	r3, #127	; 0x7f
 8003c68:	d8f0      	bhi.n	8003c4c <SEGGER_SYSVIEW_Start+0x94>
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e00b      	b.n	8003c9e <SEGGER_SYSVIEW_Start+0xe6>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	1c59      	adds	r1, r3, #1
 8003c8e:	61f9      	str	r1, [r7, #28]
 8003c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	09db      	lsrs	r3, r3, #7
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca2:	d8f0      	bhi.n	8003c86 <SEGGER_SYSVIEW_Start+0xce>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	61fa      	str	r2, [r7, #28]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e00b      	b.n	8003cd6 <SEGGER_SYSVIEW_Start+0x11e>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1c59      	adds	r1, r3, #1
 8003cc6:	6179      	str	r1, [r7, #20]
 8003cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	09db      	lsrs	r3, r3, #7
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cda:	d8f0      	bhi.n	8003cbe <SEGGER_SYSVIEW_Start+0x106>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	617a      	str	r2, [r7, #20]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003cec:	2218      	movs	r2, #24
 8003cee:	6839      	ldr	r1, [r7, #0]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff f9db 	bl	80030ac <_SendPacket>
      RECORD_END();
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <SEGGER_SYSVIEW_Start+0x168>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003d0a:	f000 f9eb 	bl	80040e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003d0e:	f000 f9b1 	bl	8004074 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003d12:	f000 fb99 	bl	8004448 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003d16:	bf00      	nop
 8003d18:	3730      	adds	r7, #48	; 0x30
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20004758 	.word	0x20004758
 8003d24:	080050ac 	.word	0x080050ac
 8003d28:	20004788 	.word	0x20004788

08003d2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d32:	f3ef 8311 	mrs	r3, BASEPRI
 8003d36:	f04f 0120 	mov.w	r1, #32
 8003d3a:	f381 8811 	msr	BASEPRI, r1
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	480b      	ldr	r0, [pc, #44]	; (8003d70 <SEGGER_SYSVIEW_Stop+0x44>)
 8003d42:	f7ff f8c5 	bl	8002ed0 <_PreparePacket>
 8003d46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003d50:	220b      	movs	r2, #11
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	6838      	ldr	r0, [r7, #0]
 8003d56:	f7ff f9a9 	bl	80030ac <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f383 8811 	msr	BASEPRI, r3
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20004788 	.word	0x20004788
 8003d74:	20004758 	.word	0x20004758

08003d78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	; 0x30
 8003d7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d82:	f04f 0120 	mov.w	r1, #32
 8003d86:	f381 8811 	msr	BASEPRI, r1
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	4845      	ldr	r0, [pc, #276]	; (8003ea4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003d8e:	f7ff f89f 	bl	8002ed0 <_PreparePacket>
 8003d92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	4b42      	ldr	r3, [pc, #264]	; (8003ea8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da2:	e00b      	b.n	8003dbc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	1c59      	adds	r1, r3, #1
 8003dac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	09db      	lsrs	r3, r3, #7
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc0:	d8f0      	bhi.n	8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	e00b      	b.n	8003df6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1c59      	adds	r1, r3, #1
 8003de6:	6279      	str	r1, [r7, #36]	; 0x24
 8003de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	09db      	lsrs	r3, r3, #7
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dfa:	d8f0      	bhi.n	8003dde <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	627a      	str	r2, [r7, #36]	; 0x24
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e00b      	b.n	8003e30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	61f9      	str	r1, [r7, #28]
 8003e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d8f0      	bhi.n	8003e18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	61fa      	str	r2, [r7, #28]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e00b      	b.n	8003e68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	6179      	str	r1, [r7, #20]
 8003e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	09db      	lsrs	r3, r3, #7
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e6c:	d8f0      	bhi.n	8003e50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	617a      	str	r2, [r7, #20]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e7e:	2218      	movs	r2, #24
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68b8      	ldr	r0, [r7, #8]
 8003e84:	f7ff f912 	bl	80030ac <_SendPacket>
  RECORD_END();
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	4798      	blx	r3
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20004788 	.word	0x20004788
 8003ea8:	20004758 	.word	0x20004758

08003eac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b092      	sub	sp, #72	; 0x48
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8003eb8:	f04f 0120 	mov.w	r1, #32
 8003ebc:	f381 8811 	msr	BASEPRI, r1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	486a      	ldr	r0, [pc, #424]	; (800406c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003ec4:	f7ff f804 	bl	8002ed0 <_PreparePacket>
 8003ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b66      	ldr	r3, [pc, #408]	; (8004070 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ede:	e00b      	b.n	8003ef8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	6479      	str	r1, [r7, #68]	; 0x44
 8003eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef4:	09db      	lsrs	r3, r3, #7
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	2b7f      	cmp	r3, #127	; 0x7f
 8003efc:	d8f0      	bhi.n	8003ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	647a      	str	r2, [r7, #68]	; 0x44
 8003f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f18:	e00b      	b.n	8003f32 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f20:	1c59      	adds	r1, r3, #1
 8003f22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	09db      	lsrs	r3, r3, #7
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b7f      	cmp	r3, #127	; 0x7f
 8003f36:	d8f0      	bhi.n	8003f1a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f46:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	4619      	mov	r1, r3
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7fe ff71 	bl	8002e38 <_EncodeStr>
 8003f56:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003f58:	2209      	movs	r2, #9
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	6938      	ldr	r0, [r7, #16]
 8003f5e:	f7ff f8a5 	bl	80030ac <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30
 8003f76:	e00b      	b.n	8003f90 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	6379      	str	r1, [r7, #52]	; 0x34
 8003f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	09db      	lsrs	r3, r3, #7
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	2b7f      	cmp	r3, #127	; 0x7f
 8003f94:	d8f0      	bhi.n	8003f78 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb0:	e00b      	b.n	8003fca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	1c59      	adds	r1, r3, #1
 8003fba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	09db      	lsrs	r3, r3, #7
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003fce:	d8f0      	bhi.n	8003fb2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	e00b      	b.n	8004004 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	6279      	str	r1, [r7, #36]	; 0x24
 8003ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	09db      	lsrs	r3, r3, #7
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2b7f      	cmp	r3, #127	; 0x7f
 8004008:	d8f0      	bhi.n	8003fec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	627a      	str	r2, [r7, #36]	; 0x24
 8004010:	6a3a      	ldr	r2, [r7, #32]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e00b      	b.n	800403c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	b2da      	uxtb	r2, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	61f9      	str	r1, [r7, #28]
 800402e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	09db      	lsrs	r3, r3, #7
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b7f      	cmp	r3, #127	; 0x7f
 8004040:	d8f0      	bhi.n	8004024 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	61fa      	str	r2, [r7, #28]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004052:	2215      	movs	r2, #21
 8004054:	68f9      	ldr	r1, [r7, #12]
 8004056:	6938      	ldr	r0, [r7, #16]
 8004058:	f7ff f828 	bl	80030ac <_SendPacket>
  RECORD_END();
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f383 8811 	msr	BASEPRI, r3
}
 8004062:	bf00      	nop
 8004064:	3748      	adds	r7, #72	; 0x48
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20004788 	.word	0x20004788
 8004070:	20004758 	.word	0x20004758

08004074 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800408a:	4b03      	ldr	r3, [pc, #12]	; (8004098 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4798      	blx	r3
  }
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20004758 	.word	0x20004758

0800409c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040a4:	f3ef 8311 	mrs	r3, BASEPRI
 80040a8:	f04f 0120 	mov.w	r1, #32
 80040ac:	f381 8811 	msr	BASEPRI, r1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	480b      	ldr	r0, [pc, #44]	; (80040e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80040b4:	f7fe ff0c 	bl	8002ed0 <_PreparePacket>
 80040b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	6938      	ldr	r0, [r7, #16]
 80040c0:	f7fe feba 	bl	8002e38 <_EncodeStr>
 80040c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80040c6:	220e      	movs	r2, #14
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f7fe ffee 	bl	80030ac <_SendPacket>
  RECORD_END();
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f383 8811 	msr	BASEPRI, r3
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20004788 	.word	0x20004788

080040e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01a      	beq.n	8004128 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80040f2:	4b13      	ldr	r3, [pc, #76]	; (8004140 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4798      	blx	r3
 8004104:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004108:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800410a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	000a      	movs	r2, r1
 8004118:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800411a:	4613      	mov	r3, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4621      	mov	r1, r4
 8004120:	200d      	movs	r0, #13
 8004122:	f7ff fcef 	bl	8003b04 <SEGGER_SYSVIEW_RecordU32x2>
 8004126:	e006      	b.n	8004136 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	200c      	movs	r0, #12
 8004130:	f7ff fcac 	bl	8003a8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}
 800413e:	bf00      	nop
 8004140:	20004758 	.word	0x20004758
 8004144:	e0001004 	.word	0xe0001004

08004148 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800414e:	f3ef 8311 	mrs	r3, BASEPRI
 8004152:	f04f 0120 	mov.w	r1, #32
 8004156:	f381 8811 	msr	BASEPRI, r1
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	4807      	ldr	r0, [pc, #28]	; (800417c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800415e:	f7fe feb7 	bl	8002ed0 <_PreparePacket>
 8004162:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004164:	2211      	movs	r2, #17
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	6838      	ldr	r0, [r7, #0]
 800416a:	f7fe ff9f 	bl	80030ac <_SendPacket>
  RECORD_END();
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f383 8811 	msr	BASEPRI, r3
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20004788 	.word	0x20004788

08004180 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004188:	f3ef 8311 	mrs	r3, BASEPRI
 800418c:	f04f 0120 	mov.w	r1, #32
 8004190:	f381 8811 	msr	BASEPRI, r1
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4819      	ldr	r0, [pc, #100]	; (80041fc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004198:	f7fe fe9a 	bl	8002ed0 <_PreparePacket>
 800419c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	e00b      	b.n	80041ce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	1c59      	adds	r1, r3, #1
 80041be:	61f9      	str	r1, [r7, #28]
 80041c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	09db      	lsrs	r3, r3, #7
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b7f      	cmp	r3, #127	; 0x7f
 80041d2:	d8f0      	bhi.n	80041b6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80041e4:	2208      	movs	r2, #8
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	6938      	ldr	r0, [r7, #16]
 80041ea:	f7fe ff5f 	bl	80030ac <_SendPacket>
  RECORD_END();
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f383 8811 	msr	BASEPRI, r3
}
 80041f4:	bf00      	nop
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20004788 	.word	0x20004788
 8004200:	20004758 	.word	0x20004758

08004204 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800420c:	f3ef 8311 	mrs	r3, BASEPRI
 8004210:	f04f 0120 	mov.w	r1, #32
 8004214:	f381 8811 	msr	BASEPRI, r1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	4819      	ldr	r0, [pc, #100]	; (8004280 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800421c:	f7fe fe58 	bl	8002ed0 <_PreparePacket>
 8004220:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	e00b      	b.n	8004252 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	1c59      	adds	r1, r3, #1
 8004242:	61f9      	str	r1, [r7, #28]
 8004244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	09db      	lsrs	r3, r3, #7
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b7f      	cmp	r3, #127	; 0x7f
 8004256:	d8f0      	bhi.n	800423a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	61fa      	str	r2, [r7, #28]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004268:	2204      	movs	r2, #4
 800426a:	68f9      	ldr	r1, [r7, #12]
 800426c:	6938      	ldr	r0, [r7, #16]
 800426e:	f7fe ff1d 	bl	80030ac <_SendPacket>
  RECORD_END();
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f383 8811 	msr	BASEPRI, r3
}
 8004278:	bf00      	nop
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20004788 	.word	0x20004788
 8004284:	20004758 	.word	0x20004758

08004288 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004290:	f3ef 8311 	mrs	r3, BASEPRI
 8004294:	f04f 0120 	mov.w	r1, #32
 8004298:	f381 8811 	msr	BASEPRI, r1
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	4819      	ldr	r0, [pc, #100]	; (8004304 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80042a0:	f7fe fe16 	bl	8002ed0 <_PreparePacket>
 80042a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e00b      	b.n	80042d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	61f9      	str	r1, [r7, #28]
 80042c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	09db      	lsrs	r3, r3, #7
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b7f      	cmp	r3, #127	; 0x7f
 80042da:	d8f0      	bhi.n	80042be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80042ec:	2206      	movs	r2, #6
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6938      	ldr	r0, [r7, #16]
 80042f2:	f7fe fedb 	bl	80030ac <_SendPacket>
  RECORD_END();
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f383 8811 	msr	BASEPRI, r3
}
 80042fc:	bf00      	nop
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20004788 	.word	0x20004788
 8004308:	20004758 	.word	0x20004758

0800430c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	; 0x30
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004316:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d06d      	beq.n	80043fa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004324:	2300      	movs	r3, #0
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
 8004328:	e008      	b.n	800433c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	3301      	adds	r3, #1
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	429a      	cmp	r2, r3
 8004342:	d3f2      	bcc.n	800432a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004344:	e000      	b.n	8004348 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004346:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d055      	beq.n	80043fa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800434e:	f3ef 8311 	mrs	r3, BASEPRI
 8004352:	f04f 0120 	mov.w	r1, #32
 8004356:	f381 8811 	msr	BASEPRI, r1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	482a      	ldr	r0, [pc, #168]	; (8004408 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800435e:	f7fe fdb7 	bl	8002ed0 <_PreparePacket>
 8004362:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	e00b      	b.n	800438a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	6279      	str	r1, [r7, #36]	; 0x24
 800437c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	09db      	lsrs	r3, r3, #7
 8004388:	623b      	str	r3, [r7, #32]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b7f      	cmp	r3, #127	; 0x7f
 800438e:	d8f0      	bhi.n	8004372 <SEGGER_SYSVIEW_SendModule+0x66>
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	627a      	str	r2, [r7, #36]	; 0x24
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	e00b      	b.n	80043c4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	61f9      	str	r1, [r7, #28]
 80043b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	09db      	lsrs	r3, r3, #7
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b7f      	cmp	r3, #127	; 0x7f
 80043c8:	d8f0      	bhi.n	80043ac <SEGGER_SYSVIEW_SendModule+0xa0>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2280      	movs	r2, #128	; 0x80
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7fe fd28 	bl	8002e38 <_EncodeStr>
 80043e8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80043ea:	2216      	movs	r2, #22
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f7fe fe5c 	bl	80030ac <_SendPacket>
      RECORD_END();
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80043fa:	bf00      	nop
 80043fc:	3730      	adds	r7, #48	; 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20004780 	.word	0x20004780
 8004408:	20004788 	.word	0x20004788

0800440c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f2      	bne.n	8004420 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20004780 	.word	0x20004780

08004448 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800444e:	f3ef 8311 	mrs	r3, BASEPRI
 8004452:	f04f 0120 	mov.w	r1, #32
 8004456:	f381 8811 	msr	BASEPRI, r1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	4817      	ldr	r0, [pc, #92]	; (80044bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800445e:	f7fe fd37 	bl	8002ed0 <_PreparePacket>
 8004462:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	e00b      	b.n	800448c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	6179      	str	r1, [r7, #20]
 800447e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	09db      	lsrs	r3, r3, #7
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b7f      	cmp	r3, #127	; 0x7f
 8004490:	d8f0      	bhi.n	8004474 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	617a      	str	r2, [r7, #20]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80044a2:	221b      	movs	r2, #27
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	68b8      	ldr	r0, [r7, #8]
 80044a8:	f7fe fe00 	bl	80030ac <_SendPacket>
  RECORD_END();
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f383 8811 	msr	BASEPRI, r3
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20004788 	.word	0x20004788
 80044c0:	20004784 	.word	0x20004784

080044c4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80044c4:	b40f      	push	{r0, r1, r2, r3}
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	461a      	mov	r2, r3
 80044d6:	2100      	movs	r1, #0
 80044d8:	6938      	ldr	r0, [r7, #16]
 80044da:	f7ff f86f 	bl	80035bc <_VPrintTarget>
  va_end(ParamList);
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e8:	b004      	add	sp, #16
 80044ea:	4770      	bx	lr

080044ec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044f4:	f3ef 8311 	mrs	r3, BASEPRI
 80044f8:	f04f 0120 	mov.w	r1, #32
 80044fc:	f381 8811 	msr	BASEPRI, r1
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	4827      	ldr	r0, [pc, #156]	; (80045a0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004504:	f7fe fce4 	bl	8002ed0 <_PreparePacket>
 8004508:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	6938      	ldr	r0, [r7, #16]
 8004510:	f7fe fc92 	bl	8002e38 <_EncodeStr>
 8004514:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	2301      	movs	r3, #1
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	e00b      	b.n	8004538 <SEGGER_SYSVIEW_Warn+0x4c>
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	1c59      	adds	r1, r3, #1
 8004528:	6279      	str	r1, [r7, #36]	; 0x24
 800452a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	09db      	lsrs	r3, r3, #7
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2b7f      	cmp	r3, #127	; 0x7f
 800453c:	d8f0      	bhi.n	8004520 <SEGGER_SYSVIEW_Warn+0x34>
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	627a      	str	r2, [r7, #36]	; 0x24
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e00b      	b.n	8004570 <SEGGER_SYSVIEW_Warn+0x84>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	61f9      	str	r1, [r7, #28]
 8004562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	09db      	lsrs	r3, r3, #7
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b7f      	cmp	r3, #127	; 0x7f
 8004574:	d8f0      	bhi.n	8004558 <SEGGER_SYSVIEW_Warn+0x6c>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	61fa      	str	r2, [r7, #28]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004586:	221a      	movs	r2, #26
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	6938      	ldr	r0, [r7, #16]
 800458c:	f7fe fd8e 	bl	80030ac <_SendPacket>
  RECORD_END();
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f383 8811 	msr	BASEPRI, r3
}
 8004596:	bf00      	nop
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20004788 	.word	0x20004788

080045a4 <sniprintf>:
 80045a4:	b40c      	push	{r2, r3}
 80045a6:	b530      	push	{r4, r5, lr}
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <sniprintf+0x64>)
 80045aa:	1e0c      	subs	r4, r1, #0
 80045ac:	681d      	ldr	r5, [r3, #0]
 80045ae:	b09d      	sub	sp, #116	; 0x74
 80045b0:	da08      	bge.n	80045c4 <sniprintf+0x20>
 80045b2:	238b      	movs	r3, #139	; 0x8b
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	b01d      	add	sp, #116	; 0x74
 80045bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045c0:	b002      	add	sp, #8
 80045c2:	4770      	bx	lr
 80045c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80045c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045cc:	bf0c      	ite	eq
 80045ce:	4623      	moveq	r3, r4
 80045d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	9307      	str	r3, [sp, #28]
 80045d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045dc:	9002      	str	r0, [sp, #8]
 80045de:	9006      	str	r0, [sp, #24]
 80045e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045e4:	4628      	mov	r0, r5
 80045e6:	ab21      	add	r3, sp, #132	; 0x84
 80045e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045ea:	a902      	add	r1, sp, #8
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	f000 f9a7 	bl	8004940 <_svfiprintf_r>
 80045f2:	1c43      	adds	r3, r0, #1
 80045f4:	bfbc      	itt	lt
 80045f6:	238b      	movlt	r3, #139	; 0x8b
 80045f8:	602b      	strlt	r3, [r5, #0]
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d0dd      	beq.n	80045ba <sniprintf+0x16>
 80045fe:	2200      	movs	r2, #0
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e7d9      	b.n	80045ba <sniprintf+0x16>
 8004606:	bf00      	nop
 8004608:	20000060 	.word	0x20000060

0800460c <memcmp>:
 800460c:	b510      	push	{r4, lr}
 800460e:	3901      	subs	r1, #1
 8004610:	4402      	add	r2, r0
 8004612:	4290      	cmp	r0, r2
 8004614:	d101      	bne.n	800461a <memcmp+0xe>
 8004616:	2000      	movs	r0, #0
 8004618:	e005      	b.n	8004626 <memcmp+0x1a>
 800461a:	7803      	ldrb	r3, [r0, #0]
 800461c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004620:	42a3      	cmp	r3, r4
 8004622:	d001      	beq.n	8004628 <memcmp+0x1c>
 8004624:	1b18      	subs	r0, r3, r4
 8004626:	bd10      	pop	{r4, pc}
 8004628:	3001      	adds	r0, #1
 800462a:	e7f2      	b.n	8004612 <memcmp+0x6>

0800462c <memset>:
 800462c:	4603      	mov	r3, r0
 800462e:	4402      	add	r2, r0
 8004630:	4293      	cmp	r3, r2
 8004632:	d100      	bne.n	8004636 <memset+0xa>
 8004634:	4770      	bx	lr
 8004636:	f803 1b01 	strb.w	r1, [r3], #1
 800463a:	e7f9      	b.n	8004630 <memset+0x4>

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	2600      	movs	r6, #0
 8004640:	4d0c      	ldr	r5, [pc, #48]	; (8004674 <__libc_init_array+0x38>)
 8004642:	4c0d      	ldr	r4, [pc, #52]	; (8004678 <__libc_init_array+0x3c>)
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	f000 fc88 	bl	8004f60 <_init>
 8004650:	2600      	movs	r6, #0
 8004652:	4d0a      	ldr	r5, [pc, #40]	; (800467c <__libc_init_array+0x40>)
 8004654:	4c0a      	ldr	r4, [pc, #40]	; (8004680 <__libc_init_array+0x44>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	080050fc 	.word	0x080050fc
 8004678:	080050fc 	.word	0x080050fc
 800467c:	080050fc 	.word	0x080050fc
 8004680:	08005100 	.word	0x08005100

08004684 <__retarget_lock_acquire_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_release_recursive>:
 8004686:	4770      	bx	lr

08004688 <memcpy>:
 8004688:	440a      	add	r2, r1
 800468a:	4291      	cmp	r1, r2
 800468c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004690:	d100      	bne.n	8004694 <memcpy+0xc>
 8004692:	4770      	bx	lr
 8004694:	b510      	push	{r4, lr}
 8004696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469a:	4291      	cmp	r1, r2
 800469c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a0:	d1f9      	bne.n	8004696 <memcpy+0xe>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <_free_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4605      	mov	r5, r0
 80046a8:	2900      	cmp	r1, #0
 80046aa:	d040      	beq.n	800472e <_free_r+0x8a>
 80046ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b0:	1f0c      	subs	r4, r1, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfb8      	it	lt
 80046b6:	18e4      	addlt	r4, r4, r3
 80046b8:	f000 f8dc 	bl	8004874 <__malloc_lock>
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <_free_r+0x8c>)
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	b933      	cbnz	r3, 80046d0 <_free_r+0x2c>
 80046c2:	6063      	str	r3, [r4, #4]
 80046c4:	6014      	str	r4, [r2, #0]
 80046c6:	4628      	mov	r0, r5
 80046c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046cc:	f000 b8d8 	b.w	8004880 <__malloc_unlock>
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	d908      	bls.n	80046e6 <_free_r+0x42>
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	1821      	adds	r1, r4, r0
 80046d8:	428b      	cmp	r3, r1
 80046da:	bf01      	itttt	eq
 80046dc:	6819      	ldreq	r1, [r3, #0]
 80046de:	685b      	ldreq	r3, [r3, #4]
 80046e0:	1809      	addeq	r1, r1, r0
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	e7ed      	b.n	80046c2 <_free_r+0x1e>
 80046e6:	461a      	mov	r2, r3
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b10b      	cbz	r3, 80046f0 <_free_r+0x4c>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d9fa      	bls.n	80046e6 <_free_r+0x42>
 80046f0:	6811      	ldr	r1, [r2, #0]
 80046f2:	1850      	adds	r0, r2, r1
 80046f4:	42a0      	cmp	r0, r4
 80046f6:	d10b      	bne.n	8004710 <_free_r+0x6c>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	4401      	add	r1, r0
 80046fc:	1850      	adds	r0, r2, r1
 80046fe:	4283      	cmp	r3, r0
 8004700:	6011      	str	r1, [r2, #0]
 8004702:	d1e0      	bne.n	80046c6 <_free_r+0x22>
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4408      	add	r0, r1
 800470a:	6010      	str	r0, [r2, #0]
 800470c:	6053      	str	r3, [r2, #4]
 800470e:	e7da      	b.n	80046c6 <_free_r+0x22>
 8004710:	d902      	bls.n	8004718 <_free_r+0x74>
 8004712:	230c      	movs	r3, #12
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	e7d6      	b.n	80046c6 <_free_r+0x22>
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	1821      	adds	r1, r4, r0
 800471c:	428b      	cmp	r3, r1
 800471e:	bf01      	itttt	eq
 8004720:	6819      	ldreq	r1, [r3, #0]
 8004722:	685b      	ldreq	r3, [r3, #4]
 8004724:	1809      	addeq	r1, r1, r0
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	6063      	str	r3, [r4, #4]
 800472a:	6054      	str	r4, [r2, #4]
 800472c:	e7cb      	b.n	80046c6 <_free_r+0x22>
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	200049ac 	.word	0x200049ac

08004734 <sbrk_aligned>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4e0e      	ldr	r6, [pc, #56]	; (8004770 <sbrk_aligned+0x3c>)
 8004738:	460c      	mov	r4, r1
 800473a:	6831      	ldr	r1, [r6, #0]
 800473c:	4605      	mov	r5, r0
 800473e:	b911      	cbnz	r1, 8004746 <sbrk_aligned+0x12>
 8004740:	f000 fbaa 	bl	8004e98 <_sbrk_r>
 8004744:	6030      	str	r0, [r6, #0]
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	f000 fba5 	bl	8004e98 <_sbrk_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	d00a      	beq.n	8004768 <sbrk_aligned+0x34>
 8004752:	1cc4      	adds	r4, r0, #3
 8004754:	f024 0403 	bic.w	r4, r4, #3
 8004758:	42a0      	cmp	r0, r4
 800475a:	d007      	beq.n	800476c <sbrk_aligned+0x38>
 800475c:	1a21      	subs	r1, r4, r0
 800475e:	4628      	mov	r0, r5
 8004760:	f000 fb9a 	bl	8004e98 <_sbrk_r>
 8004764:	3001      	adds	r0, #1
 8004766:	d101      	bne.n	800476c <sbrk_aligned+0x38>
 8004768:	f04f 34ff 	mov.w	r4, #4294967295
 800476c:	4620      	mov	r0, r4
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	200049b0 	.word	0x200049b0

08004774 <_malloc_r>:
 8004774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004778:	1ccd      	adds	r5, r1, #3
 800477a:	f025 0503 	bic.w	r5, r5, #3
 800477e:	3508      	adds	r5, #8
 8004780:	2d0c      	cmp	r5, #12
 8004782:	bf38      	it	cc
 8004784:	250c      	movcc	r5, #12
 8004786:	2d00      	cmp	r5, #0
 8004788:	4607      	mov	r7, r0
 800478a:	db01      	blt.n	8004790 <_malloc_r+0x1c>
 800478c:	42a9      	cmp	r1, r5
 800478e:	d905      	bls.n	800479c <_malloc_r+0x28>
 8004790:	230c      	movs	r3, #12
 8004792:	2600      	movs	r6, #0
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4630      	mov	r0, r6
 8004798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800479c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004870 <_malloc_r+0xfc>
 80047a0:	f000 f868 	bl	8004874 <__malloc_lock>
 80047a4:	f8d8 3000 	ldr.w	r3, [r8]
 80047a8:	461c      	mov	r4, r3
 80047aa:	bb5c      	cbnz	r4, 8004804 <_malloc_r+0x90>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ffc0 	bl	8004734 <sbrk_aligned>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	4604      	mov	r4, r0
 80047b8:	d155      	bne.n	8004866 <_malloc_r+0xf2>
 80047ba:	f8d8 4000 	ldr.w	r4, [r8]
 80047be:	4626      	mov	r6, r4
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	d145      	bne.n	8004850 <_malloc_r+0xdc>
 80047c4:	2c00      	cmp	r4, #0
 80047c6:	d048      	beq.n	800485a <_malloc_r+0xe6>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	4631      	mov	r1, r6
 80047cc:	4638      	mov	r0, r7
 80047ce:	eb04 0903 	add.w	r9, r4, r3
 80047d2:	f000 fb61 	bl	8004e98 <_sbrk_r>
 80047d6:	4581      	cmp	r9, r0
 80047d8:	d13f      	bne.n	800485a <_malloc_r+0xe6>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	4638      	mov	r0, r7
 80047de:	1a6d      	subs	r5, r5, r1
 80047e0:	4629      	mov	r1, r5
 80047e2:	f7ff ffa7 	bl	8004734 <sbrk_aligned>
 80047e6:	3001      	adds	r0, #1
 80047e8:	d037      	beq.n	800485a <_malloc_r+0xe6>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	442b      	add	r3, r5
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	f8d8 3000 	ldr.w	r3, [r8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d038      	beq.n	800486a <_malloc_r+0xf6>
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	42a2      	cmp	r2, r4
 80047fc:	d12b      	bne.n	8004856 <_malloc_r+0xe2>
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e00f      	b.n	8004824 <_malloc_r+0xb0>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	1b52      	subs	r2, r2, r5
 8004808:	d41f      	bmi.n	800484a <_malloc_r+0xd6>
 800480a:	2a0b      	cmp	r2, #11
 800480c:	d917      	bls.n	800483e <_malloc_r+0xca>
 800480e:	1961      	adds	r1, r4, r5
 8004810:	42a3      	cmp	r3, r4
 8004812:	6025      	str	r5, [r4, #0]
 8004814:	bf18      	it	ne
 8004816:	6059      	strne	r1, [r3, #4]
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	bf08      	it	eq
 800481c:	f8c8 1000 	streq.w	r1, [r8]
 8004820:	5162      	str	r2, [r4, r5]
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	4638      	mov	r0, r7
 8004826:	f104 060b 	add.w	r6, r4, #11
 800482a:	f000 f829 	bl	8004880 <__malloc_unlock>
 800482e:	f026 0607 	bic.w	r6, r6, #7
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	1af2      	subs	r2, r6, r3
 8004836:	d0ae      	beq.n	8004796 <_malloc_r+0x22>
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	50a3      	str	r3, [r4, r2]
 800483c:	e7ab      	b.n	8004796 <_malloc_r+0x22>
 800483e:	42a3      	cmp	r3, r4
 8004840:	6862      	ldr	r2, [r4, #4]
 8004842:	d1dd      	bne.n	8004800 <_malloc_r+0x8c>
 8004844:	f8c8 2000 	str.w	r2, [r8]
 8004848:	e7ec      	b.n	8004824 <_malloc_r+0xb0>
 800484a:	4623      	mov	r3, r4
 800484c:	6864      	ldr	r4, [r4, #4]
 800484e:	e7ac      	b.n	80047aa <_malloc_r+0x36>
 8004850:	4634      	mov	r4, r6
 8004852:	6876      	ldr	r6, [r6, #4]
 8004854:	e7b4      	b.n	80047c0 <_malloc_r+0x4c>
 8004856:	4613      	mov	r3, r2
 8004858:	e7cc      	b.n	80047f4 <_malloc_r+0x80>
 800485a:	230c      	movs	r3, #12
 800485c:	4638      	mov	r0, r7
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	f000 f80e 	bl	8004880 <__malloc_unlock>
 8004864:	e797      	b.n	8004796 <_malloc_r+0x22>
 8004866:	6025      	str	r5, [r4, #0]
 8004868:	e7dc      	b.n	8004824 <_malloc_r+0xb0>
 800486a:	605b      	str	r3, [r3, #4]
 800486c:	deff      	udf	#255	; 0xff
 800486e:	bf00      	nop
 8004870:	200049ac 	.word	0x200049ac

08004874 <__malloc_lock>:
 8004874:	4801      	ldr	r0, [pc, #4]	; (800487c <__malloc_lock+0x8>)
 8004876:	f7ff bf05 	b.w	8004684 <__retarget_lock_acquire_recursive>
 800487a:	bf00      	nop
 800487c:	200049a8 	.word	0x200049a8

08004880 <__malloc_unlock>:
 8004880:	4801      	ldr	r0, [pc, #4]	; (8004888 <__malloc_unlock+0x8>)
 8004882:	f7ff bf00 	b.w	8004686 <__retarget_lock_release_recursive>
 8004886:	bf00      	nop
 8004888:	200049a8 	.word	0x200049a8

0800488c <__ssputs_r>:
 800488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004890:	461f      	mov	r7, r3
 8004892:	688e      	ldr	r6, [r1, #8]
 8004894:	4682      	mov	sl, r0
 8004896:	42be      	cmp	r6, r7
 8004898:	460c      	mov	r4, r1
 800489a:	4690      	mov	r8, r2
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	d82c      	bhi.n	80048fa <__ssputs_r+0x6e>
 80048a0:	898a      	ldrh	r2, [r1, #12]
 80048a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048a6:	d026      	beq.n	80048f6 <__ssputs_r+0x6a>
 80048a8:	6965      	ldr	r5, [r4, #20]
 80048aa:	6909      	ldr	r1, [r1, #16]
 80048ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048b0:	eba3 0901 	sub.w	r9, r3, r1
 80048b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048b8:	1c7b      	adds	r3, r7, #1
 80048ba:	444b      	add	r3, r9
 80048bc:	106d      	asrs	r5, r5, #1
 80048be:	429d      	cmp	r5, r3
 80048c0:	bf38      	it	cc
 80048c2:	461d      	movcc	r5, r3
 80048c4:	0553      	lsls	r3, r2, #21
 80048c6:	d527      	bpl.n	8004918 <__ssputs_r+0x8c>
 80048c8:	4629      	mov	r1, r5
 80048ca:	f7ff ff53 	bl	8004774 <_malloc_r>
 80048ce:	4606      	mov	r6, r0
 80048d0:	b360      	cbz	r0, 800492c <__ssputs_r+0xa0>
 80048d2:	464a      	mov	r2, r9
 80048d4:	6921      	ldr	r1, [r4, #16]
 80048d6:	f7ff fed7 	bl	8004688 <memcpy>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e4:	81a3      	strh	r3, [r4, #12]
 80048e6:	6126      	str	r6, [r4, #16]
 80048e8:	444e      	add	r6, r9
 80048ea:	6026      	str	r6, [r4, #0]
 80048ec:	463e      	mov	r6, r7
 80048ee:	6165      	str	r5, [r4, #20]
 80048f0:	eba5 0509 	sub.w	r5, r5, r9
 80048f4:	60a5      	str	r5, [r4, #8]
 80048f6:	42be      	cmp	r6, r7
 80048f8:	d900      	bls.n	80048fc <__ssputs_r+0x70>
 80048fa:	463e      	mov	r6, r7
 80048fc:	4632      	mov	r2, r6
 80048fe:	4641      	mov	r1, r8
 8004900:	6820      	ldr	r0, [r4, #0]
 8004902:	f000 faaf 	bl	8004e64 <memmove>
 8004906:	2000      	movs	r0, #0
 8004908:	68a3      	ldr	r3, [r4, #8]
 800490a:	1b9b      	subs	r3, r3, r6
 800490c:	60a3      	str	r3, [r4, #8]
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	4433      	add	r3, r6
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004918:	462a      	mov	r2, r5
 800491a:	f000 fadb 	bl	8004ed4 <_realloc_r>
 800491e:	4606      	mov	r6, r0
 8004920:	2800      	cmp	r0, #0
 8004922:	d1e0      	bne.n	80048e6 <__ssputs_r+0x5a>
 8004924:	4650      	mov	r0, sl
 8004926:	6921      	ldr	r1, [r4, #16]
 8004928:	f7ff febc 	bl	80046a4 <_free_r>
 800492c:	230c      	movs	r3, #12
 800492e:	f8ca 3000 	str.w	r3, [sl]
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	e7e9      	b.n	8004914 <__ssputs_r+0x88>

08004940 <_svfiprintf_r>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4698      	mov	r8, r3
 8004946:	898b      	ldrh	r3, [r1, #12]
 8004948:	4607      	mov	r7, r0
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	460d      	mov	r5, r1
 800494e:	4614      	mov	r4, r2
 8004950:	b09d      	sub	sp, #116	; 0x74
 8004952:	d50e      	bpl.n	8004972 <_svfiprintf_r+0x32>
 8004954:	690b      	ldr	r3, [r1, #16]
 8004956:	b963      	cbnz	r3, 8004972 <_svfiprintf_r+0x32>
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	f7ff ff0b 	bl	8004774 <_malloc_r>
 800495e:	6028      	str	r0, [r5, #0]
 8004960:	6128      	str	r0, [r5, #16]
 8004962:	b920      	cbnz	r0, 800496e <_svfiprintf_r+0x2e>
 8004964:	230c      	movs	r3, #12
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e0d0      	b.n	8004b10 <_svfiprintf_r+0x1d0>
 800496e:	2340      	movs	r3, #64	; 0x40
 8004970:	616b      	str	r3, [r5, #20]
 8004972:	2300      	movs	r3, #0
 8004974:	9309      	str	r3, [sp, #36]	; 0x24
 8004976:	2320      	movs	r3, #32
 8004978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800497c:	2330      	movs	r3, #48	; 0x30
 800497e:	f04f 0901 	mov.w	r9, #1
 8004982:	f8cd 800c 	str.w	r8, [sp, #12]
 8004986:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004b28 <_svfiprintf_r+0x1e8>
 800498a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800498e:	4623      	mov	r3, r4
 8004990:	469a      	mov	sl, r3
 8004992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004996:	b10a      	cbz	r2, 800499c <_svfiprintf_r+0x5c>
 8004998:	2a25      	cmp	r2, #37	; 0x25
 800499a:	d1f9      	bne.n	8004990 <_svfiprintf_r+0x50>
 800499c:	ebba 0b04 	subs.w	fp, sl, r4
 80049a0:	d00b      	beq.n	80049ba <_svfiprintf_r+0x7a>
 80049a2:	465b      	mov	r3, fp
 80049a4:	4622      	mov	r2, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	4638      	mov	r0, r7
 80049aa:	f7ff ff6f 	bl	800488c <__ssputs_r>
 80049ae:	3001      	adds	r0, #1
 80049b0:	f000 80a9 	beq.w	8004b06 <_svfiprintf_r+0x1c6>
 80049b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049b6:	445a      	add	r2, fp
 80049b8:	9209      	str	r2, [sp, #36]	; 0x24
 80049ba:	f89a 3000 	ldrb.w	r3, [sl]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80a1 	beq.w	8004b06 <_svfiprintf_r+0x1c6>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ce:	f10a 0a01 	add.w	sl, sl, #1
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	9307      	str	r3, [sp, #28]
 80049d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049da:	931a      	str	r3, [sp, #104]	; 0x68
 80049dc:	4654      	mov	r4, sl
 80049de:	2205      	movs	r2, #5
 80049e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e4:	4850      	ldr	r0, [pc, #320]	; (8004b28 <_svfiprintf_r+0x1e8>)
 80049e6:	f000 fa67 	bl	8004eb8 <memchr>
 80049ea:	9a04      	ldr	r2, [sp, #16]
 80049ec:	b9d8      	cbnz	r0, 8004a26 <_svfiprintf_r+0xe6>
 80049ee:	06d0      	lsls	r0, r2, #27
 80049f0:	bf44      	itt	mi
 80049f2:	2320      	movmi	r3, #32
 80049f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f8:	0711      	lsls	r1, r2, #28
 80049fa:	bf44      	itt	mi
 80049fc:	232b      	movmi	r3, #43	; 0x2b
 80049fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a02:	f89a 3000 	ldrb.w	r3, [sl]
 8004a06:	2b2a      	cmp	r3, #42	; 0x2a
 8004a08:	d015      	beq.n	8004a36 <_svfiprintf_r+0xf6>
 8004a0a:	4654      	mov	r4, sl
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f04f 0c0a 	mov.w	ip, #10
 8004a12:	9a07      	ldr	r2, [sp, #28]
 8004a14:	4621      	mov	r1, r4
 8004a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a1a:	3b30      	subs	r3, #48	; 0x30
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d94d      	bls.n	8004abc <_svfiprintf_r+0x17c>
 8004a20:	b1b0      	cbz	r0, 8004a50 <_svfiprintf_r+0x110>
 8004a22:	9207      	str	r2, [sp, #28]
 8004a24:	e014      	b.n	8004a50 <_svfiprintf_r+0x110>
 8004a26:	eba0 0308 	sub.w	r3, r0, r8
 8004a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	46a2      	mov	sl, r4
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	e7d2      	b.n	80049dc <_svfiprintf_r+0x9c>
 8004a36:	9b03      	ldr	r3, [sp, #12]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	9103      	str	r1, [sp, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfbb      	ittet	lt
 8004a42:	425b      	neglt	r3, r3
 8004a44:	f042 0202 	orrlt.w	r2, r2, #2
 8004a48:	9307      	strge	r3, [sp, #28]
 8004a4a:	9307      	strlt	r3, [sp, #28]
 8004a4c:	bfb8      	it	lt
 8004a4e:	9204      	strlt	r2, [sp, #16]
 8004a50:	7823      	ldrb	r3, [r4, #0]
 8004a52:	2b2e      	cmp	r3, #46	; 0x2e
 8004a54:	d10c      	bne.n	8004a70 <_svfiprintf_r+0x130>
 8004a56:	7863      	ldrb	r3, [r4, #1]
 8004a58:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5a:	d134      	bne.n	8004ac6 <_svfiprintf_r+0x186>
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	3402      	adds	r4, #2
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9203      	str	r2, [sp, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfb8      	it	lt
 8004a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004b2c <_svfiprintf_r+0x1ec>
 8004a74:	2203      	movs	r2, #3
 8004a76:	4650      	mov	r0, sl
 8004a78:	7821      	ldrb	r1, [r4, #0]
 8004a7a:	f000 fa1d 	bl	8004eb8 <memchr>
 8004a7e:	b138      	cbz	r0, 8004a90 <_svfiprintf_r+0x150>
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	9b04      	ldr	r3, [sp, #16]
 8004a84:	eba0 000a 	sub.w	r0, r0, sl
 8004a88:	4082      	lsls	r2, r0
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a94:	2206      	movs	r2, #6
 8004a96:	4826      	ldr	r0, [pc, #152]	; (8004b30 <_svfiprintf_r+0x1f0>)
 8004a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a9c:	f000 fa0c 	bl	8004eb8 <memchr>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d038      	beq.n	8004b16 <_svfiprintf_r+0x1d6>
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <_svfiprintf_r+0x1f4>)
 8004aa6:	bb1b      	cbnz	r3, 8004af0 <_svfiprintf_r+0x1b0>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	3307      	adds	r3, #7
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	9303      	str	r3, [sp, #12]
 8004ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab6:	4433      	add	r3, r6
 8004ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aba:	e768      	b.n	800498e <_svfiprintf_r+0x4e>
 8004abc:	460c      	mov	r4, r1
 8004abe:	2001      	movs	r0, #1
 8004ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac4:	e7a6      	b.n	8004a14 <_svfiprintf_r+0xd4>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f04f 0c0a 	mov.w	ip, #10
 8004acc:	4619      	mov	r1, r3
 8004ace:	3401      	adds	r4, #1
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ad8:	3a30      	subs	r2, #48	; 0x30
 8004ada:	2a09      	cmp	r2, #9
 8004adc:	d903      	bls.n	8004ae6 <_svfiprintf_r+0x1a6>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0c6      	beq.n	8004a70 <_svfiprintf_r+0x130>
 8004ae2:	9105      	str	r1, [sp, #20]
 8004ae4:	e7c4      	b.n	8004a70 <_svfiprintf_r+0x130>
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	2301      	movs	r3, #1
 8004aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aee:	e7f0      	b.n	8004ad2 <_svfiprintf_r+0x192>
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4638      	mov	r0, r7
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <_svfiprintf_r+0x1f8>)
 8004afa:	a904      	add	r1, sp, #16
 8004afc:	f3af 8000 	nop.w
 8004b00:	1c42      	adds	r2, r0, #1
 8004b02:	4606      	mov	r6, r0
 8004b04:	d1d6      	bne.n	8004ab4 <_svfiprintf_r+0x174>
 8004b06:	89ab      	ldrh	r3, [r5, #12]
 8004b08:	065b      	lsls	r3, r3, #25
 8004b0a:	f53f af2d 	bmi.w	8004968 <_svfiprintf_r+0x28>
 8004b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b10:	b01d      	add	sp, #116	; 0x74
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b16:	ab03      	add	r3, sp, #12
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <_svfiprintf_r+0x1f8>)
 8004b20:	a904      	add	r1, sp, #16
 8004b22:	f000 f87d 	bl	8004c20 <_printf_i>
 8004b26:	e7eb      	b.n	8004b00 <_svfiprintf_r+0x1c0>
 8004b28:	080050c8 	.word	0x080050c8
 8004b2c:	080050ce 	.word	0x080050ce
 8004b30:	080050d2 	.word	0x080050d2
 8004b34:	00000000 	.word	0x00000000
 8004b38:	0800488d 	.word	0x0800488d

08004b3c <_printf_common>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	4616      	mov	r6, r2
 8004b42:	4699      	mov	r9, r3
 8004b44:	688a      	ldr	r2, [r1, #8]
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	4607      	mov	r7, r0
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	bfb8      	it	lt
 8004b4e:	4613      	movlt	r3, r2
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b56:	460c      	mov	r4, r1
 8004b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b5c:	b10a      	cbz	r2, 8004b62 <_printf_common+0x26>
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	bf42      	ittt	mi
 8004b68:	6833      	ldrmi	r3, [r6, #0]
 8004b6a:	3302      	addmi	r3, #2
 8004b6c:	6033      	strmi	r3, [r6, #0]
 8004b6e:	6825      	ldr	r5, [r4, #0]
 8004b70:	f015 0506 	ands.w	r5, r5, #6
 8004b74:	d106      	bne.n	8004b84 <_printf_common+0x48>
 8004b76:	f104 0a19 	add.w	sl, r4, #25
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	6832      	ldr	r2, [r6, #0]
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dc2b      	bgt.n	8004bdc <_printf_common+0xa0>
 8004b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b88:	1e13      	subs	r3, r2, #0
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	bf18      	it	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	0692      	lsls	r2, r2, #26
 8004b92:	d430      	bmi.n	8004bf6 <_printf_common+0xba>
 8004b94:	4649      	mov	r1, r9
 8004b96:	4638      	mov	r0, r7
 8004b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d023      	beq.n	8004bea <_printf_common+0xae>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	f003 0306 	and.w	r3, r3, #6
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf14      	ite	ne
 8004bae:	2500      	movne	r5, #0
 8004bb0:	6833      	ldreq	r3, [r6, #0]
 8004bb2:	f04f 0600 	mov.w	r6, #0
 8004bb6:	bf08      	it	eq
 8004bb8:	68e5      	ldreq	r5, [r4, #12]
 8004bba:	f104 041a 	add.w	r4, r4, #26
 8004bbe:	bf08      	it	eq
 8004bc0:	1aed      	subeq	r5, r5, r3
 8004bc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004bc6:	bf08      	it	eq
 8004bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bfc4      	itt	gt
 8004bd0:	1a9b      	subgt	r3, r3, r2
 8004bd2:	18ed      	addgt	r5, r5, r3
 8004bd4:	42b5      	cmp	r5, r6
 8004bd6:	d11a      	bne.n	8004c0e <_printf_common+0xd2>
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e008      	b.n	8004bee <_printf_common+0xb2>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4652      	mov	r2, sl
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d103      	bne.n	8004bf2 <_printf_common+0xb6>
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	e7c1      	b.n	8004b7a <_printf_common+0x3e>
 8004bf6:	2030      	movs	r0, #48	; 0x30
 8004bf8:	18e1      	adds	r1, r4, r3
 8004bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c04:	4422      	add	r2, r4
 8004c06:	3302      	adds	r3, #2
 8004c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c0c:	e7c2      	b.n	8004b94 <_printf_common+0x58>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4622      	mov	r2, r4
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d0e6      	beq.n	8004bea <_printf_common+0xae>
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	e7d9      	b.n	8004bd4 <_printf_common+0x98>

08004c20 <_printf_i>:
 8004c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	7e0f      	ldrb	r7, [r1, #24]
 8004c26:	4691      	mov	r9, r2
 8004c28:	2f78      	cmp	r7, #120	; 0x78
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	469a      	mov	sl, r3
 8004c30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c36:	d807      	bhi.n	8004c48 <_printf_i+0x28>
 8004c38:	2f62      	cmp	r7, #98	; 0x62
 8004c3a:	d80a      	bhi.n	8004c52 <_printf_i+0x32>
 8004c3c:	2f00      	cmp	r7, #0
 8004c3e:	f000 80d5 	beq.w	8004dec <_printf_i+0x1cc>
 8004c42:	2f58      	cmp	r7, #88	; 0x58
 8004c44:	f000 80c1 	beq.w	8004dca <_printf_i+0x1aa>
 8004c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c50:	e03a      	b.n	8004cc8 <_printf_i+0xa8>
 8004c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c56:	2b15      	cmp	r3, #21
 8004c58:	d8f6      	bhi.n	8004c48 <_printf_i+0x28>
 8004c5a:	a101      	add	r1, pc, #4	; (adr r1, 8004c60 <_printf_i+0x40>)
 8004c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004ccd 	.word	0x08004ccd
 8004c68:	08004c49 	.word	0x08004c49
 8004c6c:	08004c49 	.word	0x08004c49
 8004c70:	08004c49 	.word	0x08004c49
 8004c74:	08004c49 	.word	0x08004c49
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c49 	.word	0x08004c49
 8004c80:	08004c49 	.word	0x08004c49
 8004c84:	08004c49 	.word	0x08004c49
 8004c88:	08004c49 	.word	0x08004c49
 8004c8c:	08004dd3 	.word	0x08004dd3
 8004c90:	08004cf9 	.word	0x08004cf9
 8004c94:	08004d8d 	.word	0x08004d8d
 8004c98:	08004c49 	.word	0x08004c49
 8004c9c:	08004c49 	.word	0x08004c49
 8004ca0:	08004df5 	.word	0x08004df5
 8004ca4:	08004c49 	.word	0x08004c49
 8004ca8:	08004cf9 	.word	0x08004cf9
 8004cac:	08004c49 	.word	0x08004c49
 8004cb0:	08004c49 	.word	0x08004c49
 8004cb4:	08004d95 	.word	0x08004d95
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	602a      	str	r2, [r5, #0]
 8004cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0a0      	b.n	8004e0e <_printf_i+0x1ee>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	0607      	lsls	r7, r0, #24
 8004cd2:	f103 0104 	add.w	r1, r3, #4
 8004cd6:	6029      	str	r1, [r5, #0]
 8004cd8:	d501      	bpl.n	8004cde <_printf_i+0xbe>
 8004cda:	681e      	ldr	r6, [r3, #0]
 8004cdc:	e003      	b.n	8004ce6 <_printf_i+0xc6>
 8004cde:	0646      	lsls	r6, r0, #25
 8004ce0:	d5fb      	bpl.n	8004cda <_printf_i+0xba>
 8004ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	da03      	bge.n	8004cf2 <_printf_i+0xd2>
 8004cea:	232d      	movs	r3, #45	; 0x2d
 8004cec:	4276      	negs	r6, r6
 8004cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	4859      	ldr	r0, [pc, #356]	; (8004e5c <_printf_i+0x23c>)
 8004cf6:	e012      	b.n	8004d1e <_printf_i+0xfe>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6820      	ldr	r0, [r4, #0]
 8004cfc:	1d19      	adds	r1, r3, #4
 8004cfe:	6029      	str	r1, [r5, #0]
 8004d00:	0605      	lsls	r5, r0, #24
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0xe8>
 8004d04:	681e      	ldr	r6, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0xee>
 8004d08:	0641      	lsls	r1, r0, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0xe4>
 8004d0c:	881e      	ldrh	r6, [r3, #0]
 8004d0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004d10:	bf0c      	ite	eq
 8004d12:	2308      	moveq	r3, #8
 8004d14:	230a      	movne	r3, #10
 8004d16:	4851      	ldr	r0, [pc, #324]	; (8004e5c <_printf_i+0x23c>)
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d1e:	6865      	ldr	r5, [r4, #4]
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	bfa8      	it	ge
 8004d24:	6821      	ldrge	r1, [r4, #0]
 8004d26:	60a5      	str	r5, [r4, #8]
 8004d28:	bfa4      	itt	ge
 8004d2a:	f021 0104 	bicge.w	r1, r1, #4
 8004d2e:	6021      	strge	r1, [r4, #0]
 8004d30:	b90e      	cbnz	r6, 8004d36 <_printf_i+0x116>
 8004d32:	2d00      	cmp	r5, #0
 8004d34:	d04b      	beq.n	8004dce <_printf_i+0x1ae>
 8004d36:	4615      	mov	r5, r2
 8004d38:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d3c:	fb03 6711 	mls	r7, r3, r1, r6
 8004d40:	5dc7      	ldrb	r7, [r0, r7]
 8004d42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d46:	4637      	mov	r7, r6
 8004d48:	42bb      	cmp	r3, r7
 8004d4a:	460e      	mov	r6, r1
 8004d4c:	d9f4      	bls.n	8004d38 <_printf_i+0x118>
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d10b      	bne.n	8004d6a <_printf_i+0x14a>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	07de      	lsls	r6, r3, #31
 8004d56:	d508      	bpl.n	8004d6a <_printf_i+0x14a>
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	6861      	ldr	r1, [r4, #4]
 8004d5c:	4299      	cmp	r1, r3
 8004d5e:	bfde      	ittt	le
 8004d60:	2330      	movle	r3, #48	; 0x30
 8004d62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d6a:	1b52      	subs	r2, r2, r5
 8004d6c:	6122      	str	r2, [r4, #16]
 8004d6e:	464b      	mov	r3, r9
 8004d70:	4621      	mov	r1, r4
 8004d72:	4640      	mov	r0, r8
 8004d74:	f8cd a000 	str.w	sl, [sp]
 8004d78:	aa03      	add	r2, sp, #12
 8004d7a:	f7ff fedf 	bl	8004b3c <_printf_common>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d14a      	bne.n	8004e18 <_printf_i+0x1f8>
 8004d82:	f04f 30ff 	mov.w	r0, #4294967295
 8004d86:	b004      	add	sp, #16
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	f043 0320 	orr.w	r3, r3, #32
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	2778      	movs	r7, #120	; 0x78
 8004d96:	4832      	ldr	r0, [pc, #200]	; (8004e60 <_printf_i+0x240>)
 8004d98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	6829      	ldr	r1, [r5, #0]
 8004da0:	061f      	lsls	r7, r3, #24
 8004da2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004da6:	d402      	bmi.n	8004dae <_printf_i+0x18e>
 8004da8:	065f      	lsls	r7, r3, #25
 8004daa:	bf48      	it	mi
 8004dac:	b2b6      	uxthmi	r6, r6
 8004dae:	07df      	lsls	r7, r3, #31
 8004db0:	bf48      	it	mi
 8004db2:	f043 0320 	orrmi.w	r3, r3, #32
 8004db6:	6029      	str	r1, [r5, #0]
 8004db8:	bf48      	it	mi
 8004dba:	6023      	strmi	r3, [r4, #0]
 8004dbc:	b91e      	cbnz	r6, 8004dc6 <_printf_i+0x1a6>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f023 0320 	bic.w	r3, r3, #32
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	e7a6      	b.n	8004d18 <_printf_i+0xf8>
 8004dca:	4824      	ldr	r0, [pc, #144]	; (8004e5c <_printf_i+0x23c>)
 8004dcc:	e7e4      	b.n	8004d98 <_printf_i+0x178>
 8004dce:	4615      	mov	r5, r2
 8004dd0:	e7bd      	b.n	8004d4e <_printf_i+0x12e>
 8004dd2:	682b      	ldr	r3, [r5, #0]
 8004dd4:	6826      	ldr	r6, [r4, #0]
 8004dd6:	1d18      	adds	r0, r3, #4
 8004dd8:	6961      	ldr	r1, [r4, #20]
 8004dda:	6028      	str	r0, [r5, #0]
 8004ddc:	0635      	lsls	r5, r6, #24
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	d501      	bpl.n	8004de6 <_printf_i+0x1c6>
 8004de2:	6019      	str	r1, [r3, #0]
 8004de4:	e002      	b.n	8004dec <_printf_i+0x1cc>
 8004de6:	0670      	lsls	r0, r6, #25
 8004de8:	d5fb      	bpl.n	8004de2 <_printf_i+0x1c2>
 8004dea:	8019      	strh	r1, [r3, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	4615      	mov	r5, r2
 8004df0:	6123      	str	r3, [r4, #16]
 8004df2:	e7bc      	b.n	8004d6e <_printf_i+0x14e>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	2100      	movs	r1, #0
 8004df8:	1d1a      	adds	r2, r3, #4
 8004dfa:	602a      	str	r2, [r5, #0]
 8004dfc:	681d      	ldr	r5, [r3, #0]
 8004dfe:	6862      	ldr	r2, [r4, #4]
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 f859 	bl	8004eb8 <memchr>
 8004e06:	b108      	cbz	r0, 8004e0c <_printf_i+0x1ec>
 8004e08:	1b40      	subs	r0, r0, r5
 8004e0a:	6060      	str	r0, [r4, #4]
 8004e0c:	6863      	ldr	r3, [r4, #4]
 8004e0e:	6123      	str	r3, [r4, #16]
 8004e10:	2300      	movs	r3, #0
 8004e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e16:	e7aa      	b.n	8004d6e <_printf_i+0x14e>
 8004e18:	462a      	mov	r2, r5
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	47d0      	blx	sl
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0ad      	beq.n	8004d82 <_printf_i+0x162>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	079b      	lsls	r3, r3, #30
 8004e2a:	d413      	bmi.n	8004e54 <_printf_i+0x234>
 8004e2c:	68e0      	ldr	r0, [r4, #12]
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	4298      	cmp	r0, r3
 8004e32:	bfb8      	it	lt
 8004e34:	4618      	movlt	r0, r3
 8004e36:	e7a6      	b.n	8004d86 <_printf_i+0x166>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4632      	mov	r2, r6
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4640      	mov	r0, r8
 8004e40:	47d0      	blx	sl
 8004e42:	3001      	adds	r0, #1
 8004e44:	d09d      	beq.n	8004d82 <_printf_i+0x162>
 8004e46:	3501      	adds	r5, #1
 8004e48:	68e3      	ldr	r3, [r4, #12]
 8004e4a:	9903      	ldr	r1, [sp, #12]
 8004e4c:	1a5b      	subs	r3, r3, r1
 8004e4e:	42ab      	cmp	r3, r5
 8004e50:	dcf2      	bgt.n	8004e38 <_printf_i+0x218>
 8004e52:	e7eb      	b.n	8004e2c <_printf_i+0x20c>
 8004e54:	2500      	movs	r5, #0
 8004e56:	f104 0619 	add.w	r6, r4, #25
 8004e5a:	e7f5      	b.n	8004e48 <_printf_i+0x228>
 8004e5c:	080050d9 	.word	0x080050d9
 8004e60:	080050ea 	.word	0x080050ea

08004e64 <memmove>:
 8004e64:	4288      	cmp	r0, r1
 8004e66:	b510      	push	{r4, lr}
 8004e68:	eb01 0402 	add.w	r4, r1, r2
 8004e6c:	d902      	bls.n	8004e74 <memmove+0x10>
 8004e6e:	4284      	cmp	r4, r0
 8004e70:	4623      	mov	r3, r4
 8004e72:	d807      	bhi.n	8004e84 <memmove+0x20>
 8004e74:	1e43      	subs	r3, r0, #1
 8004e76:	42a1      	cmp	r1, r4
 8004e78:	d008      	beq.n	8004e8c <memmove+0x28>
 8004e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e82:	e7f8      	b.n	8004e76 <memmove+0x12>
 8004e84:	4601      	mov	r1, r0
 8004e86:	4402      	add	r2, r0
 8004e88:	428a      	cmp	r2, r1
 8004e8a:	d100      	bne.n	8004e8e <memmove+0x2a>
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e96:	e7f7      	b.n	8004e88 <memmove+0x24>

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4d05      	ldr	r5, [pc, #20]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f000 f84e 	bl	8004f44 <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200049a4 	.word	0x200049a4

08004eb8 <memchr>:
 8004eb8:	4603      	mov	r3, r0
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	b2c9      	uxtb	r1, r1
 8004ebe:	4402      	add	r2, r0
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	d101      	bne.n	8004eca <memchr+0x12>
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e003      	b.n	8004ed2 <memchr+0x1a>
 8004eca:	7804      	ldrb	r4, [r0, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	428c      	cmp	r4, r1
 8004ed0:	d1f6      	bne.n	8004ec0 <memchr+0x8>
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <_realloc_r>:
 8004ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	4680      	mov	r8, r0
 8004eda:	4614      	mov	r4, r2
 8004edc:	460e      	mov	r6, r1
 8004ede:	b921      	cbnz	r1, 8004eea <_realloc_r+0x16>
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee6:	f7ff bc45 	b.w	8004774 <_malloc_r>
 8004eea:	b92a      	cbnz	r2, 8004ef8 <_realloc_r+0x24>
 8004eec:	f7ff fbda 	bl	80046a4 <_free_r>
 8004ef0:	4625      	mov	r5, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef8:	f000 f81b 	bl	8004f32 <_malloc_usable_size_r>
 8004efc:	4284      	cmp	r4, r0
 8004efe:	4607      	mov	r7, r0
 8004f00:	d802      	bhi.n	8004f08 <_realloc_r+0x34>
 8004f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f06:	d812      	bhi.n	8004f2e <_realloc_r+0x5a>
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fc32 	bl	8004774 <_malloc_r>
 8004f10:	4605      	mov	r5, r0
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0ed      	beq.n	8004ef2 <_realloc_r+0x1e>
 8004f16:	42bc      	cmp	r4, r7
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	bf28      	it	cs
 8004f1e:	463a      	movcs	r2, r7
 8004f20:	f7ff fbb2 	bl	8004688 <memcpy>
 8004f24:	4631      	mov	r1, r6
 8004f26:	4640      	mov	r0, r8
 8004f28:	f7ff fbbc 	bl	80046a4 <_free_r>
 8004f2c:	e7e1      	b.n	8004ef2 <_realloc_r+0x1e>
 8004f2e:	4635      	mov	r5, r6
 8004f30:	e7df      	b.n	8004ef2 <_realloc_r+0x1e>

08004f32 <_malloc_usable_size_r>:
 8004f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f36:	1f18      	subs	r0, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfbc      	itt	lt
 8004f3c:	580b      	ldrlt	r3, [r1, r0]
 8004f3e:	18c0      	addlt	r0, r0, r3
 8004f40:	4770      	bx	lr
	...

08004f44 <_sbrk>:
 8004f44:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <_sbrk+0x14>)
 8004f46:	4603      	mov	r3, r0
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	b909      	cbnz	r1, 8004f50 <_sbrk+0xc>
 8004f4c:	4903      	ldr	r1, [pc, #12]	; (8004f5c <_sbrk+0x18>)
 8004f4e:	6011      	str	r1, [r2, #0]
 8004f50:	6810      	ldr	r0, [r2, #0]
 8004f52:	4403      	add	r3, r0
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4770      	bx	lr
 8004f58:	200049b4 	.word	0x200049b4
 8004f5c:	200049b8 	.word	0x200049b8

08004f60 <_init>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr

08004f6c <_fini>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr
