
ARM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800316c  0800316c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800316c  0800316c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800316c  0800316c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e0  20000070  080031e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004750  080031e4  00024750  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abe5  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208b  00000000  00000000  0002acc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e4  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019136  00000000  00000000  0002e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de27  00000000  00000000  00047552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000911b4  00000000  00000000  00055379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ac4  00000000  00000000  000e6530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e9ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080030e8 	.word	0x080030e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080030e8 	.word	0x080030e8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fa87 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f831 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f875 	bl	800024c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BaseType_t retval = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
  retval = xTaskCreate(Task_1, "Task_1", 100, "Hello from Task-1", 2, &Task_1_handle);
 8000166:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <main+0x50>)
 8000168:	9301      	str	r3, [sp, #4]
 800016a:	2302      	movs	r3, #2
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <main+0x54>)
 8000170:	2264      	movs	r2, #100	; 0x64
 8000172:	490d      	ldr	r1, [pc, #52]	; (80001a8 <main+0x58>)
 8000174:	480d      	ldr	r0, [pc, #52]	; (80001ac <main+0x5c>)
 8000176:	f001 fbef 	bl	8001958 <xTaskCreate>
 800017a:	6078      	str	r0, [r7, #4]
  retval = xTaskCreate(Task_2, "Task_2", 100, "Hello from Task-2", 2, 0);
 800017c:	2300      	movs	r3, #0
 800017e:	9301      	str	r3, [sp, #4]
 8000180:	2302      	movs	r3, #2
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <main+0x60>)
 8000186:	2264      	movs	r2, #100	; 0x64
 8000188:	490a      	ldr	r1, [pc, #40]	; (80001b4 <main+0x64>)
 800018a:	480b      	ldr	r0, [pc, #44]	; (80001b8 <main+0x68>)
 800018c:	f001 fbe4 	bl	8001958 <xTaskCreate>
 8000190:	6078      	str	r0, [r7, #4]

  vTaskStartScheduler();
 8000192:	f001 fd2d 	bl	8001bf0 <vTaskStartScheduler>
  Task_1(&counter);
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <main+0x6c>)
 8000198:	f000 f8a2 	bl	80002e0 <Task_1>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019c:	e7fe      	b.n	800019c <main+0x4c>
 800019e:	bf00      	nop
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	08003100 	.word	0x08003100
 80001a8:	08003114 	.word	0x08003114
 80001ac:	080002e1 	.word	0x080002e1
 80001b0:	0800311c 	.word	0x0800311c
 80001b4:	08003130 	.word	0x08003130
 80001b8:	08000301 	.word	0x08000301
 80001bc:	20000090 	.word	0x20000090

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	; 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fcd6 	bl	8002b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f4:	2302      	movs	r3, #2
 80001f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fcdb 	bl	8000bc4 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000214:	f000 f896 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff48 	bl	80010c8 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023e:	f000 f881 	bl	8000344 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000260:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <MX_GPIO_Init+0x8c>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1c      	ldr	r2, [pc, #112]	; (80002d8 <MX_GPIO_Init+0x8c>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <MX_GPIO_Init+0x8c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <MX_GPIO_Init+0x8c>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <MX_GPIO_Init+0x8c>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <MX_GPIO_Init+0x8c>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <MX_GPIO_Init+0x8c>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <MX_GPIO_Init+0x8c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MX_GPIO_Init+0x8c>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	480b      	ldr	r0, [pc, #44]	; (80002dc <MX_GPIO_Init+0x90>)
 80002ae:	f000 fc71 	bl	8000b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002b2:	2301      	movs	r3, #1
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2302      	movs	r3, #2
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_GPIO_Init+0x90>)
 80002ca:	f000 fadf 	bl	800088c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ce:	bf00      	nop
 80002d0:	3720      	adds	r7, #32
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <Task_1>:

/* USER CODE BEGIN 4 */
void Task_1(void* parameters)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		counter ++;
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <Task_1+0x1c>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <Task_1+0x1c>)
 80002f2:	801a      	strh	r2, [r3, #0]

		printf("%s\n",(char*) parameters);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f002 fb63 	bl	80029c0 <puts>
		counter ++;
 80002fa:	e7f5      	b.n	80002e8 <Task_1+0x8>
 80002fc:	20000090 	.word	0x20000090

08000300 <Task_2>:
	}
//	vTaskDelete(NULL);
}

void Task_2(void* parameters)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

	while(1)
	{
		counter_2 ++;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <Task_2+0x1c>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	b29a      	uxth	r2, r3
 8000310:	4b02      	ldr	r3, [pc, #8]	; (800031c <Task_2+0x1c>)
 8000312:	801a      	strh	r2, [r3, #0]

		printf("%s\n",(char*) parameters);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f002 fb53 	bl	80029c0 <puts>
		counter_2 ++;
 800031a:	e7f5      	b.n	8000308 <Task_2+0x8>
 800031c:	20000092 	.word	0x20000092

08000320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d101      	bne.n	8000336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000332:	f000 f9af 	bl	8000694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40000800 	.word	0x40000800

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>
	...

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003bc:	2300      	movs	r3, #0
 80003be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003c0:	2300      	movs	r3, #0
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80003ca:	4b34      	ldr	r3, [pc, #208]	; (800049c <HAL_InitTick+0xe8>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a33      	ldr	r2, [pc, #204]	; (800049c <HAL_InitTick+0xe8>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b31      	ldr	r3, [pc, #196]	; (800049c <HAL_InitTick+0xe8>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 0304 	and.w	r3, r3, #4
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003e2:	f107 0210 	add.w	r2, r7, #16
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 ffc7 	bl	8001380 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003f2:	6a3b      	ldr	r3, [r7, #32]
 80003f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d103      	bne.n	8000404 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003fc:	f000 ffac 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 8000400:	6378      	str	r0, [r7, #52]	; 0x34
 8000402:	e004      	b.n	800040e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000404:	f000 ffa8 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 8000408:	4603      	mov	r3, r0
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800040e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000410:	4a23      	ldr	r2, [pc, #140]	; (80004a0 <HAL_InitTick+0xec>)
 8000412:	fba2 2303 	umull	r2, r3, r2, r3
 8000416:	0c9b      	lsrs	r3, r3, #18
 8000418:	3b01      	subs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <HAL_InitTick+0xf0>)
 800041e:	4a22      	ldr	r2, [pc, #136]	; (80004a8 <HAL_InitTick+0xf4>)
 8000420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000422:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <HAL_InitTick+0xf0>)
 8000424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000428:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800042a:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <HAL_InitTick+0xf0>)
 800042c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800042e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <HAL_InitTick+0xf0>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <HAL_InitTick+0xf0>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <HAL_InitTick+0xf0>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000442:	4818      	ldr	r0, [pc, #96]	; (80004a4 <HAL_InitTick+0xf0>)
 8000444:	f000 ffea 	bl	800141c <HAL_TIM_Base_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800044e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000452:	2b00      	cmp	r3, #0
 8000454:	d11b      	bne.n	800048e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000456:	4813      	ldr	r0, [pc, #76]	; (80004a4 <HAL_InitTick+0xf0>)
 8000458:	f001 f838 	bl	80014cc <HAL_TIM_Base_Start_IT>
 800045c:	4603      	mov	r3, r0
 800045e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000466:	2b00      	cmp	r3, #0
 8000468:	d111      	bne.n	800048e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800046a:	201e      	movs	r0, #30
 800046c:	f000 f9ff 	bl	800086e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b0f      	cmp	r3, #15
 8000474:	d808      	bhi.n	8000488 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000476:	2200      	movs	r2, #0
 8000478:	6879      	ldr	r1, [r7, #4]
 800047a:	201e      	movs	r0, #30
 800047c:	f000 f9db 	bl	8000836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <HAL_InitTick+0xf8>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	e002      	b.n	800048e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000488:	2301      	movs	r3, #1
 800048a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800048e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000492:	4618      	mov	r0, r3
 8000494:	3738      	adds	r7, #56	; 0x38
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	431bde83 	.word	0x431bde83
 80004a4:	20000094 	.word	0x20000094
 80004a8:	40000800 	.word	0x40000800
 80004ac:	20000004 	.word	0x20000004

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
	...

080004dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <TIM4_IRQHandler+0x10>)
 80004e2:	f001 f845 	bl	8001570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000094 	.word	0x20000094

080004f0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <ITM_SendChar+0x44>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <ITM_SendChar+0x44>)
 8000500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000504:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <ITM_SendChar+0x48>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <ITM_SendChar+0x48>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000512:	bf00      	nop
 8000514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f8      	beq.n	8000514 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000522:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	6013      	str	r3, [r2, #0]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	e000edfc 	.word	0xe000edfc
 8000538:	e0000e00 	.word	0xe0000e00

0800053c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e00a      	b.n	8000564 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800054e:	f3af 8000 	nop.w
 8000552:	4601      	mov	r1, r0
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	b2ca      	uxtb	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf0      	blt.n	800054e <_read+0x12>
  }

  return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b086      	sub	sp, #24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	e009      	b.n	800059c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	60ba      	str	r2, [r7, #8]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffad 	bl	80004f0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dbf1      	blt.n	8000588 <_write+0x12>
  }
  return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_close>:

int _close(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d4:	605a      	str	r2, [r3, #4]
  return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <_isatty>:

int _isatty(int file)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff fff7 	bl	800060e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000638:	4c09      	ldr	r4, [pc, #36]	; (8000660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f002 fae9 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fd81 	bl	8000150 <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000658:	08003174 	.word	0x08003174
  ldr r2, =_sbss
 800065c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000660:	20004750 	.word	0x20004750

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f8d1 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f7ff fe98 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff fe64 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000008 	.word	0x20000008
 80006b4:	200000dc 	.word	0x200000dc

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	200000dc 	.word	0x200000dc

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db0b      	blt.n	800075a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f003 021f 	and.w	r2, r3, #31
 8000748:	4906      	ldr	r1, [pc, #24]	; (8000764 <__NVIC_EnableIRQ+0x34>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	2001      	movs	r0, #1
 8000752:	fa00 f202 	lsl.w	r2, r0, r2
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff4f 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000848:	f7ff ff64 	bl	8000714 <__NVIC_GetPriorityGrouping>
 800084c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f7ff ffb2 	bl	80007bc <NVIC_EncodePriority>
 8000858:	4602      	mov	r2, r0
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff81 	bl	8000768 <__NVIC_SetPriority>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff57 	bl	8000730 <__NVIC_EnableIRQ>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b08b      	sub	sp, #44	; 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e169      	b.n	8000b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a0:	2201      	movs	r2, #1
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 8158 	bne.w	8000b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	4a9a      	ldr	r2, [pc, #616]	; (8000b2c <HAL_GPIO_Init+0x2a0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d05e      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008c8:	4a98      	ldr	r2, [pc, #608]	; (8000b2c <HAL_GPIO_Init+0x2a0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d875      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008ce:	4a98      	ldr	r2, [pc, #608]	; (8000b30 <HAL_GPIO_Init+0x2a4>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d058      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008d4:	4a96      	ldr	r2, [pc, #600]	; (8000b30 <HAL_GPIO_Init+0x2a4>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d86f      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008da:	4a96      	ldr	r2, [pc, #600]	; (8000b34 <HAL_GPIO_Init+0x2a8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d052      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008e0:	4a94      	ldr	r2, [pc, #592]	; (8000b34 <HAL_GPIO_Init+0x2a8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d869      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008e6:	4a94      	ldr	r2, [pc, #592]	; (8000b38 <HAL_GPIO_Init+0x2ac>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d04c      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008ec:	4a92      	ldr	r2, [pc, #584]	; (8000b38 <HAL_GPIO_Init+0x2ac>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d863      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008f2:	4a92      	ldr	r2, [pc, #584]	; (8000b3c <HAL_GPIO_Init+0x2b0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d046      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008f8:	4a90      	ldr	r2, [pc, #576]	; (8000b3c <HAL_GPIO_Init+0x2b0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d85d      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d82a      	bhi.n	8000958 <HAL_GPIO_Init+0xcc>
 8000902:	2b12      	cmp	r3, #18
 8000904:	d859      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <HAL_GPIO_Init+0x80>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000987 	.word	0x08000987
 8000910:	08000961 	.word	0x08000961
 8000914:	08000973 	.word	0x08000973
 8000918:	080009b5 	.word	0x080009b5
 800091c:	080009bb 	.word	0x080009bb
 8000920:	080009bb 	.word	0x080009bb
 8000924:	080009bb 	.word	0x080009bb
 8000928:	080009bb 	.word	0x080009bb
 800092c:	080009bb 	.word	0x080009bb
 8000930:	080009bb 	.word	0x080009bb
 8000934:	080009bb 	.word	0x080009bb
 8000938:	080009bb 	.word	0x080009bb
 800093c:	080009bb 	.word	0x080009bb
 8000940:	080009bb 	.word	0x080009bb
 8000944:	080009bb 	.word	0x080009bb
 8000948:	080009bb 	.word	0x080009bb
 800094c:	080009bb 	.word	0x080009bb
 8000950:	08000969 	.word	0x08000969
 8000954:	0800097d 	.word	0x0800097d
 8000958:	4a79      	ldr	r2, [pc, #484]	; (8000b40 <HAL_GPIO_Init+0x2b4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d013      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095e:	e02c      	b.n	80009ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e029      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	3304      	adds	r3, #4
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e024      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	3308      	adds	r3, #8
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e01f      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	330c      	adds	r3, #12
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e01a      	b.n	80009bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098e:	2304      	movs	r3, #4
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e013      	b.n	80009bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	611a      	str	r2, [r3, #16]
          break;
 80009a6:	e009      	b.n	80009bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	615a      	str	r2, [r3, #20]
          break;
 80009b2:	e003      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x130>
          break;
 80009ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2bff      	cmp	r3, #255	; 0xff
 80009c0:	d801      	bhi.n	80009c6 <HAL_GPIO_Init+0x13a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	e001      	b.n	80009ca <HAL_GPIO_Init+0x13e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2bff      	cmp	r3, #255	; 0xff
 80009d0:	d802      	bhi.n	80009d8 <HAL_GPIO_Init+0x14c>
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x152>
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	3b08      	subs	r3, #8
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	210f      	movs	r1, #15
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	401a      	ands	r2, r3
 80009f0:	6a39      	ldr	r1, [r7, #32]
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	431a      	orrs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a24:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <HAL_GPIO_Init+0x2bc>)
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a40      	ldr	r2, [pc, #256]	; (8000b4c <HAL_GPIO_Init+0x2c0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d013      	beq.n	8000a78 <HAL_GPIO_Init+0x1ec>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a3f      	ldr	r2, [pc, #252]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1e8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3e      	ldr	r2, [pc, #248]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1e0>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	e004      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a8a:	492f      	ldr	r1, [pc, #188]	; (8000b48 <HAL_GPIO_Init+0x2bc>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	492c      	ldr	r1, [pc, #176]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	608b      	str	r3, [r1, #8]
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	4928      	ldr	r1, [pc, #160]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	4922      	ldr	r1, [pc, #136]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	60cb      	str	r3, [r1, #12]
 8000ad8:	e006      	b.n	8000ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	491e      	ldr	r1, [pc, #120]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	4918      	ldr	r1, [pc, #96]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4914      	ldr	r1, [pc, #80]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d021      	beq.n	8000b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	490e      	ldr	r1, [pc, #56]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	600b      	str	r3, [r1, #0]
 8000b28:	e021      	b.n	8000b6e <HAL_GPIO_Init+0x2e2>
 8000b2a:	bf00      	nop
 8000b2c:	10320000 	.word	0x10320000
 8000b30:	10310000 	.word	0x10310000
 8000b34:	10220000 	.word	0x10220000
 8000b38:	10210000 	.word	0x10210000
 8000b3c:	10120000 	.word	0x10120000
 8000b40:	10110000 	.word	0x10110000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40011400 	.word	0x40011400
 8000b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	4909      	ldr	r1, [pc, #36]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f47f ae8e 	bne.w	80008a0 <HAL_GPIO_Init+0x14>
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	372c      	adds	r7, #44	; 0x2c
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40010400 	.word	0x40010400

08000b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba4:	787b      	ldrb	r3, [r7, #1]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bb0:	e003      	b.n	8000bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e272      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8087 	beq.w	8000cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be4:	4b92      	ldr	r3, [pc, #584]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d00c      	beq.n	8000c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d112      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
 8000bfc:	4b8c      	ldr	r3, [pc, #560]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d10b      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0a:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d06c      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d168      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e24c      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x76>
 8000c2c:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a7f      	ldr	r2, [pc, #508]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e02e      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10c      	bne.n	8000c5c <HAL_RCC_OscConfig+0x98>
 8000c42:	4b7b      	ldr	r3, [pc, #492]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a7a      	ldr	r2, [pc, #488]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a77      	ldr	r2, [pc, #476]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e01d      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c64:	d10c      	bne.n	8000c80 <HAL_RCC_OscConfig+0xbc>
 8000c66:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a71      	ldr	r2, [pc, #452]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e00b      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c80:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6a      	ldr	r2, [pc, #424]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fd0a 	bl	80006b8 <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fd06 	bl	80006b8 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e200      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0xe4>
 8000cc6:	e014      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcf6 	bl	80006b8 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcf2 	bl	80006b8 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1ec      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x10c>
 8000cee:	e000      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d063      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d11c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d116      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e1c0      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4939      	ldr	r1, [pc, #228]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	e03a      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d020      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fcab 	bl	80006b8 <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d66:	f7ff fca7 	bl	80006b8 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e1a1      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4927      	ldr	r1, [pc, #156]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
 8000d98:	e015      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc8a 	bl	80006b8 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc86 	bl	80006b8 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e180      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03a      	beq.n	8000e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc6a 	bl	80006b8 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc66 	bl	80006b8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e160      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 faea 	bl	80013e0 <RCC_Delay>
 8000e0c:	e01c      	b.n	8000e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc50 	bl	80006b8 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1a:	e00f      	b.n	8000e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc4c 	bl	80006b8 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d908      	bls.n	8000e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e146      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	42420000 	.word	0x42420000
 8000e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e9      	bne.n	8000e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a6 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4b8b      	ldr	r3, [pc, #556]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10d      	bne.n	8000e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b88      	ldr	r3, [pc, #544]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a87      	ldr	r2, [pc, #540]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b85      	ldr	r3, [pc, #532]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d118      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7e      	ldr	r2, [pc, #504]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fc0d 	bl	80006b8 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea2:	f7ff fc09 	bl	80006b8 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	; 0x64
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e103      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	4b75      	ldr	r3, [pc, #468]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	e02d      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x334>
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a69      	ldr	r2, [pc, #420]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a66      	ldr	r2, [pc, #408]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	e01c      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d10c      	bne.n	8000f1a <HAL_RCC_OscConfig+0x356>
 8000f00:	4b61      	ldr	r3, [pc, #388]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a60      	ldr	r2, [pc, #384]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a5d      	ldr	r2, [pc, #372]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e00b      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	4b5b      	ldr	r3, [pc, #364]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a5a      	ldr	r2, [pc, #360]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6213      	str	r3, [r2, #32]
 8000f26:	4b58      	ldr	r3, [pc, #352]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a57      	ldr	r2, [pc, #348]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f023 0304 	bic.w	r3, r3, #4
 8000f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d015      	beq.n	8000f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fbbd 	bl	80006b8 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fbb9 	bl	80006b8 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0b1      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0ee      	beq.n	8000f42 <HAL_RCC_OscConfig+0x37e>
 8000f64:	e014      	b.n	8000f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fba7 	bl	80006b8 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fba3 	bl	80006b8 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e09b      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ee      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8087 	beq.w	80010ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d061      	beq.n	800107c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d146      	bne.n	800104e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb77 	bl	80006b8 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fb73 	bl	80006b8 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e06d      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d108      	bne.n	8001008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4921      	ldr	r1, [pc, #132]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a19      	ldr	r1, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	430b      	orrs	r3, r1
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fb47 	bl	80006b8 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fb43 	bl	80006b8 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e03d      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x46a>
 800104c:	e035      	b.n	80010ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fb30 	bl	80006b8 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff fb2c 	bl	80006b8 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e026      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x498>
 800107a:	e01e      	b.n	80010ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d107      	bne.n	8001094 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e019      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
 8001088:	40021000 	.word	0x40021000
 800108c:	40007000 	.word	0x40007000
 8001090:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x500>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0d0      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d910      	bls.n	800110c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ea:	4b67      	ldr	r3, [pc, #412]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 0207 	bic.w	r2, r3, #7
 80010f2:	4965      	ldr	r1, [pc, #404]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0b8      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800112e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	494d      	ldr	r1, [pc, #308]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d040      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d115      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e07f      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001186:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e073      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06b      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f023 0203 	bic.w	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4936      	ldr	r1, [pc, #216]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b8:	f7ff fa7e 	bl	80006b8 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f7ff fa7a 	bl	80006b8 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e053      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 020c 	and.w	r2, r3, #12
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d1eb      	bne.n	80011c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d210      	bcs.n	8001218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4922      	ldr	r1, [pc, #136]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e032      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4916      	ldr	r1, [pc, #88]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	490e      	ldr	r1, [pc, #56]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001256:	f000 f821 	bl	800129c <HAL_RCC_GetSysClockFreq>
 800125a:	4602      	mov	r2, r0
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	490a      	ldr	r1, [pc, #40]	; (8001290 <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	5ccb      	ldrb	r3, [r1, r3]
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_RCC_ClockConfig+0x1cc>)
 8001270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1d0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f89c 	bl	80003b4 <HAL_InitTick>

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000
 800128c:	40021000 	.word	0x40021000
 8001290:	08003140 	.word	0x08003140
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_GetSysClockFreq+0x94>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d002      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x30>
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d003      	beq.n	80012d2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ca:	e027      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ce:	613b      	str	r3, [r7, #16]
      break;
 80012d0:	e027      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	0c5b      	lsrs	r3, r3, #17
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_RCC_GetSysClockFreq+0x98>)
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e004      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	613b      	str	r3, [r7, #16]
      break;
 800131a:	e002      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_RCC_GetSysClockFreq+0x98>)
 800131e:	613b      	str	r3, [r7, #16]
      break;
 8001320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001322:	693b      	ldr	r3, [r7, #16]
}
 8001324:	4618      	mov	r0, r3
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	007a1200 	.word	0x007a1200
 8001338:	08003158 	.word	0x08003158
 800133c:	08003168 	.word	0x08003168
 8001340:	003d0900 	.word	0x003d0900

08001344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <HAL_RCC_GetHCLKFreq+0x10>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000000 	.word	0x20000000

08001358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800135c:	f7ff fff2 	bl	8001344 <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <HAL_RCC_GetPCLK1Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	08003150 	.word	0x08003150

08001380 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	220f      	movs	r2, #15
 800138e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_GetClockConfig+0x5c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0207 	and.w	r2, r3, #7
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40022000 	.word	0x40022000

080013e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <RCC_Delay+0x34>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <RCC_Delay+0x38>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0a5b      	lsrs	r3, r3, #9
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013fc:	bf00      	nop
  }
  while (Delay --);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	60fa      	str	r2, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f9      	bne.n	80013fc <RCC_Delay+0x1c>
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000000 	.word	0x20000000
 8001418:	10624dd3 	.word	0x10624dd3

0800141c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e041      	b.n	80014b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f839 	bl	80014ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3304      	adds	r3, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f000 f9b4 	bl	80017c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d001      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e03a      	b.n	800155a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a18      	ldr	r2, [pc, #96]	; (8001564 <HAL_TIM_Base_Start_IT+0x98>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00e      	beq.n	8001524 <HAL_TIM_Base_Start_IT+0x58>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150e:	d009      	beq.n	8001524 <HAL_TIM_Base_Start_IT+0x58>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_TIM_Base_Start_IT+0x9c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d004      	beq.n	8001524 <HAL_TIM_Base_Start_IT+0x58>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <HAL_TIM_Base_Start_IT+0xa0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b06      	cmp	r3, #6
 8001534:	d010      	beq.n	8001558 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001546:	e007      	b.n	8001558 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40012c00 	.word	0x40012c00
 8001568:	40000400 	.word	0x40000400
 800156c:	40000800 	.word	0x40000800

08001570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d122      	bne.n	80015cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d11b      	bne.n	80015cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0202 	mvn.w	r2, #2
 800159c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8ed 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 80015b8:	e005      	b.n	80015c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8e0 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8ef 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d122      	bne.n	8001620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d11b      	bne.n	8001620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0204 	mvn.w	r2, #4
 80015f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8c3 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 800160c:	e005      	b.n	800161a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8b6 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f8c5 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d122      	bne.n	8001674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b08      	cmp	r3, #8
 800163a:	d11b      	bne.n	8001674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0208 	mvn.w	r2, #8
 8001644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2204      	movs	r2, #4
 800164a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f899 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 8001660:	e005      	b.n	800166e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f88c 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f89b 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b10      	cmp	r3, #16
 8001680:	d122      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	d11b      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0210 	mvn.w	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2208      	movs	r2, #8
 800169e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f86f 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 80016b4:	e005      	b.n	80016c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f862 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f871 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0201 	mvn.w	r2, #1
 80016ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7fe fe16 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b80      	cmp	r3, #128	; 0x80
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d107      	bne.n	8001720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f8bf 	bl	800189e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d10e      	bne.n	800174c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d107      	bne.n	800174c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f835 	bl	80017b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b20      	cmp	r3, #32
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d107      	bne.n	8001778 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0220 	mvn.w	r2, #32
 8001770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f88a 	bl	800188c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a29      	ldr	r2, [pc, #164]	; (8001880 <TIM_Base_SetConfig+0xb8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00b      	beq.n	80017f8 <TIM_Base_SetConfig+0x30>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e6:	d007      	beq.n	80017f8 <TIM_Base_SetConfig+0x30>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a26      	ldr	r2, [pc, #152]	; (8001884 <TIM_Base_SetConfig+0xbc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d003      	beq.n	80017f8 <TIM_Base_SetConfig+0x30>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <TIM_Base_SetConfig+0xc0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d108      	bne.n	800180a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <TIM_Base_SetConfig+0xb8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00b      	beq.n	800182a <TIM_Base_SetConfig+0x62>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d007      	beq.n	800182a <TIM_Base_SetConfig+0x62>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <TIM_Base_SetConfig+0xbc>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d003      	beq.n	800182a <TIM_Base_SetConfig+0x62>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <TIM_Base_SetConfig+0xc0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d108      	bne.n	800183c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <TIM_Base_SetConfig+0xb8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d103      	bne.n	8001870 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	615a      	str	r2, [r3, #20]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	40012c00 	.word	0x40012c00
 8001884:	40000400 	.word	0x40000400
 8001888:	40000800 	.word	0x40000800

0800188c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f103 0208 	add.w	r2, r3, #8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f103 0208 	add.w	r2, r3, #8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f103 0208 	add.w	r2, r3, #8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6892      	ldr	r2, [r2, #8]
 800191c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6852      	ldr	r2, [r2, #4]
 8001926:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d103      	bne.n	800193a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af04      	add	r7, sp, #16
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fd97 	bl	80024a0 <pvPortMalloc>
 8001972:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d013      	beq.n	80019a2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800197a:	205c      	movs	r0, #92	; 0x5c
 800197c:	f000 fd90 	bl	80024a0 <pvPortMalloc>
 8001980:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001988:	225c      	movs	r2, #92	; 0x5c
 800198a:	2100      	movs	r1, #0
 800198c:	69f8      	ldr	r0, [r7, #28]
 800198e:	f001 f8f7 	bl	8002b80 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
 8001998:	e005      	b.n	80019a6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f000 fe1a 	bl	80025d4 <vPortFree>
 80019a0:	e001      	b.n	80019a6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019ac:	88fa      	ldrh	r2, [r7, #6]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f80e 	bl	80019e4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80019c8:	69f8      	ldr	r0, [r7, #28]
 80019ca:	f000 f87b 	bl	8001ac4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	e002      	b.n	80019da <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019da:	69bb      	ldr	r3, [r7, #24]
    }
 80019dc:	4618      	mov	r0, r3
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	461a      	mov	r2, r3
 80019fc:	21a5      	movs	r1, #165	; 0xa5
 80019fe:	f001 f8bf 	bl	8002b80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01e      	beq.n	8001a60 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e012      	b.n	8001a4e <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	7819      	ldrb	r1, [r3, #0]
 8001a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4413      	add	r3, r2
 8001a36:	3334      	adds	r3, #52	; 0x34
 8001a38:	460a      	mov	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d9e9      	bls.n	8001a28 <prvInitialiseNewTask+0x44>
 8001a54:	e000      	b.n	8001a58 <prvInitialiseNewTask+0x74>
            {
                break;
 8001a56:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d901      	bls.n	8001a6a <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	6a3a      	ldr	r2, [r7, #32]
 8001a74:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	3304      	adds	r3, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff37 	bl	80018ee <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	3318      	adds	r3, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff32 	bl	80018ee <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f1c3 0205 	rsb	r2, r3, #5
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	6938      	ldr	r0, [r7, #16]
 8001aa6:	f000 fbd5 	bl	8002254 <pxPortInitialiseStack>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001acc:	f000 fc4e 	bl	800236c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <prvAddNewTaskToReadyList+0x110>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <prvAddNewTaskToReadyList+0x110>)
 8001ad8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <prvAddNewTaskToReadyList+0x110>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d110      	bne.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001af0:	f000 fb18 	bl	8002124 <prvInitialiseTaskLists>
 8001af4:	e00d      	b.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <prvAddNewTaskToReadyList+0x118>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d802      	bhi.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <prvAddNewTaskToReadyList+0x11c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <prvAddNewTaskToReadyList+0x11c>)
 8001b1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <prvAddNewTaskToReadyList+0x11c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <prvAddNewTaskToReadyList+0x120>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <prvAddNewTaskToReadyList+0x120>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3a:	492b      	ldr	r1, [pc, #172]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	3304      	adds	r3, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	3204      	adds	r2, #4
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1d1a      	adds	r2, r3, #4
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b7a:	441a      	add	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	4918      	ldr	r1, [pc, #96]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	4814      	ldr	r0, [pc, #80]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ba2:	f000 fbfd 	bl	80023a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <prvAddNewTaskToReadyList+0x118>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <prvAddNewTaskToReadyList+0x128>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200001b8 	.word	0x200001b8
 8001bd8:	200000e0 	.word	0x200000e0
 8001bdc:	200001c4 	.word	0x200001c4
 8001be0:	200001d4 	.word	0x200001d4
 8001be4:	200001c0 	.word	0x200001c0
 8001be8:	200000e4 	.word	0x200000e4
 8001bec:	e000ed04 	.word	0xe000ed04

08001bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <vTaskStartScheduler+0x5c>)
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2278      	movs	r2, #120	; 0x78
 8001c02:	4913      	ldr	r1, [pc, #76]	; (8001c50 <vTaskStartScheduler+0x60>)
 8001c04:	4813      	ldr	r0, [pc, #76]	; (8001c54 <vTaskStartScheduler+0x64>)
 8001c06:	f7ff fea7 	bl	8001958 <xTaskCreate>
 8001c0a:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d115      	bne.n	8001c3e <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c12:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c16:	f383 8811 	msr	BASEPRI, r3
 8001c1a:	f3bf 8f6f 	isb	sy
 8001c1e:	f3bf 8f4f 	dsb	sy
 8001c22:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c24:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <vTaskStartScheduler+0x68>)
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <vTaskStartScheduler+0x6c>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <vTaskStartScheduler+0x70>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001c3a:	f000 fb77 	bl	800232c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <vTaskStartScheduler+0x74>)
 8001c40:	681b      	ldr	r3, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200001dc 	.word	0x200001dc
 8001c50:	08003138 	.word	0x08003138
 8001c54:	080020f5 	.word	0x080020f5
 8001c58:	200001d8 	.word	0x200001d8
 8001c5c:	200001c4 	.word	0x200001c4
 8001c60:	200001bc 	.word	0x200001bc
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <vTaskSuspendAll+0x18>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <vTaskSuspendAll+0x18>)
 8001c74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200001e0 	.word	0x200001e0

08001c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001c92:	f000 fb6b 	bl	800236c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001c96:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <xTaskResumeAll+0x1b4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	4a66      	ldr	r2, [pc, #408]	; (8001e38 <xTaskResumeAll+0x1b4>)
 8001c9e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ca0:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <xTaskResumeAll+0x1b4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 80c0 	bne.w	8001e2a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001caa:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <xTaskResumeAll+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80bb 	beq.w	8001e2a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cb4:	e08a      	b.n	8001dcc <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cb6:	4b62      	ldr	r3, [pc, #392]	; (8001e40 <xTaskResumeAll+0x1bc>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6a12      	ldr	r2, [r2, #32]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	69d2      	ldr	r2, [r2, #28]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3318      	adds	r3, #24
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d103      	bne.n	8001cec <xTaskResumeAll+0x68>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	6a1a      	ldr	r2, [r3, #32]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1e5a      	subs	r2, r3, #1
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	6892      	ldr	r2, [r2, #8]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d103      	bne.n	8001d2a <xTaskResumeAll+0xa6>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	2201      	movs	r2, #1
 8001d40:	409a      	lsls	r2, r3
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <xTaskResumeAll+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <xTaskResumeAll+0x1c0>)
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	493d      	ldr	r1, [pc, #244]	; (8001e48 <xTaskResumeAll+0x1c4>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	3204      	adds	r2, #4
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	1d1a      	adds	r2, r3, #4
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <xTaskResumeAll+0x1c4>)
 8001d90:	441a      	add	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	492b      	ldr	r1, [pc, #172]	; (8001e48 <xTaskResumeAll+0x1c4>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	4827      	ldr	r0, [pc, #156]	; (8001e48 <xTaskResumeAll+0x1c4>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4403      	add	r3, r0
 8001db6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <xTaskResumeAll+0x1c8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <xTaskResumeAll+0x1cc>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <xTaskResumeAll+0x1bc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f47f af70 	bne.w	8001cb6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001ddc:	f000 fa20 	bl	8002220 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <xTaskResumeAll+0x1d0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001dec:	f000 f836 	bl	8001e5c <xTaskIncrementTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <xTaskResumeAll+0x1cc>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f1      	bne.n	8001dec <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <xTaskResumeAll+0x1d0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <xTaskResumeAll+0x1cc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <xTaskResumeAll+0x1d4>)
 8001e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001e2a:	f000 fab9 	bl	80023a0 <vPortExitCritical>

    return xAlreadyYielded;
 8001e2e:	693b      	ldr	r3, [r7, #16]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200001e0 	.word	0x200001e0
 8001e3c:	200001b8 	.word	0x200001b8
 8001e40:	20000178 	.word	0x20000178
 8001e44:	200001c0 	.word	0x200001c0
 8001e48:	200000e4 	.word	0x200000e4
 8001e4c:	200000e0 	.word	0x200000e0
 8001e50:	200001cc 	.word	0x200001cc
 8001e54:	200001c8 	.word	0x200001c8
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e66:	4b75      	ldr	r3, [pc, #468]	; (800203c <xTaskIncrementTick+0x1e0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 80dc 	bne.w	8002028 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e70:	4b73      	ldr	r3, [pc, #460]	; (8002040 <xTaskIncrementTick+0x1e4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001e78:	4a71      	ldr	r2, [pc, #452]	; (8002040 <xTaskIncrementTick+0x1e4>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d110      	bne.n	8001ea6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <xTaskIncrementTick+0x1e8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <xTaskIncrementTick+0x1ec>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6d      	ldr	r2, [pc, #436]	; (8002044 <xTaskIncrementTick+0x1e8>)
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4a6d      	ldr	r2, [pc, #436]	; (8002048 <xTaskIncrementTick+0x1ec>)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b6c      	ldr	r3, [pc, #432]	; (800204c <xTaskIncrementTick+0x1f0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a6b      	ldr	r2, [pc, #428]	; (800204c <xTaskIncrementTick+0x1f0>)
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	f000 f9bd 	bl	8002220 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001ea6:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <xTaskIncrementTick+0x1f4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f0c0 80a6 	bcc.w	8001ffe <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eb2:	4b64      	ldr	r3, [pc, #400]	; (8002044 <xTaskIncrementTick+0x1e8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <xTaskIncrementTick+0x1f4>)
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec2:	601a      	str	r2, [r3, #0]
                    break;
 8001ec4:	e09b      	b.n	8001ffe <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <xTaskIncrementTick+0x1e8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d203      	bcs.n	8001ee6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ede:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <xTaskIncrementTick+0x1f4>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001ee4:	e08b      	b.n	8001ffe <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68d2      	ldr	r2, [r2, #12]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	6892      	ldr	r2, [r2, #8]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	3304      	adds	r3, #4
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d103      	bne.n	8001f14 <xTaskIncrementTick+0xb8>
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1e5a      	subs	r2, r3, #1
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01e      	beq.n	8001f6a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	6a12      	ldr	r2, [r2, #32]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	69d2      	ldr	r2, [r2, #28]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d103      	bne.n	8001f5a <xTaskIncrementTick+0xfe>
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	2201      	movs	r2, #1
 8001f70:	409a      	lsls	r2, r3
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <xTaskIncrementTick+0x1f8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	4a36      	ldr	r2, [pc, #216]	; (8002054 <xTaskIncrementTick+0x1f8>)
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f80:	4935      	ldr	r1, [pc, #212]	; (8002058 <xTaskIncrementTick+0x1fc>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	3204      	adds	r2, #4
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1d1a      	adds	r2, r3, #4
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4a26      	ldr	r2, [pc, #152]	; (8002058 <xTaskIncrementTick+0x1fc>)
 8001fc0:	441a      	add	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	615a      	str	r2, [r3, #20]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fca:	4923      	ldr	r1, [pc, #140]	; (8002058 <xTaskIncrementTick+0x1fc>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1c59      	adds	r1, r3, #1
 8001fda:	481f      	ldr	r0, [pc, #124]	; (8002058 <xTaskIncrementTick+0x1fc>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4403      	add	r3, r0
 8001fe6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <xTaskIncrementTick+0x200>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	f67f af5d 	bls.w	8001eb2 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ffc:	e759      	b.n	8001eb2 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <xTaskIncrementTick+0x200>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002004:	4914      	ldr	r1, [pc, #80]	; (8002058 <xTaskIncrementTick+0x1fc>)
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d901      	bls.n	800201a <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8002016:	2301      	movs	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <xTaskIncrementTick+0x204>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e004      	b.n	8002032 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <xTaskIncrementTick+0x208>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <xTaskIncrementTick+0x208>)
 8002030:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002032:	69fb      	ldr	r3, [r7, #28]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200001e0 	.word	0x200001e0
 8002040:	200001bc 	.word	0x200001bc
 8002044:	20000170 	.word	0x20000170
 8002048:	20000174 	.word	0x20000174
 800204c:	200001d0 	.word	0x200001d0
 8002050:	200001d8 	.word	0x200001d8
 8002054:	200001c0 	.word	0x200001c0
 8002058:	200000e4 	.word	0x200000e4
 800205c:	200000e0 	.word	0x200000e0
 8002060:	200001cc 	.word	0x200001cc
 8002064:	200001c8 	.word	0x200001c8

08002068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <vTaskSwitchContext+0x78>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <vTaskSwitchContext+0x7c>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800207c:	e02a      	b.n	80020d4 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <vTaskSwitchContext+0x7c>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <vTaskSwitchContext+0x80>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f1c3 031f 	rsb	r3, r3, #31
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <vTaskSwitchContext+0x84>)
 80020a6:	4413      	add	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3308      	adds	r3, #8
 80020bc:	429a      	cmp	r2, r3
 80020be:	d104      	bne.n	80020ca <vTaskSwitchContext+0x62>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <vTaskSwitchContext+0x88>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	200001e0 	.word	0x200001e0
 80020e4:	200001cc 	.word	0x200001cc
 80020e8:	200001c0 	.word	0x200001c0
 80020ec:	200000e4 	.word	0x200000e4
 80020f0:	200000e0 	.word	0x200000e0

080020f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80020fc:	f000 f852 	bl	80021a4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <prvIdleTask+0x28>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d9f9      	bls.n	80020fc <prvIdleTask+0x8>
            {
                taskYIELD();
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <prvIdleTask+0x2c>)
 800210a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002118:	e7f0      	b.n	80020fc <prvIdleTask+0x8>
 800211a:	bf00      	nop
 800211c:	200000e4 	.word	0x200000e4
 8002120:	e000ed04 	.word	0xe000ed04

08002124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	e00c      	b.n	800214a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <prvInitialiseTaskLists+0x60>)
 800213c:	4413      	add	r3, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fbb6 	bl	80018b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d9ef      	bls.n	8002130 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <prvInitialiseTaskLists+0x64>)
 8002152:	f7ff fbad 	bl	80018b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <prvInitialiseTaskLists+0x68>)
 8002158:	f7ff fbaa 	bl	80018b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <prvInitialiseTaskLists+0x6c>)
 800215e:	f7ff fba7 	bl	80018b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <prvInitialiseTaskLists+0x70>)
 8002164:	f7ff fba4 	bl	80018b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <prvInitialiseTaskLists+0x74>)
 800216a:	f7ff fba1 	bl	80018b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <prvInitialiseTaskLists+0x78>)
 8002170:	4a05      	ldr	r2, [pc, #20]	; (8002188 <prvInitialiseTaskLists+0x64>)
 8002172:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <prvInitialiseTaskLists+0x7c>)
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <prvInitialiseTaskLists+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200000e4 	.word	0x200000e4
 8002188:	20000148 	.word	0x20000148
 800218c:	2000015c 	.word	0x2000015c
 8002190:	20000178 	.word	0x20000178
 8002194:	2000018c 	.word	0x2000018c
 8002198:	200001a4 	.word	0x200001a4
 800219c:	20000170 	.word	0x20000170
 80021a0:	20000174 	.word	0x20000174

080021a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021aa:	e019      	b.n	80021e0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80021ac:	f000 f8de 	bl	800236c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <prvCheckTasksWaitingTermination+0x50>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fba2 	bl	8001906 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <prvCheckTasksWaitingTermination+0x54>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <prvCheckTasksWaitingTermination+0x54>)
 80021ca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <prvCheckTasksWaitingTermination+0x58>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <prvCheckTasksWaitingTermination+0x58>)
 80021d4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80021d6:	f000 f8e3 	bl	80023a0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f810 	bl	8002200 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <prvCheckTasksWaitingTermination+0x58>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e1      	bne.n	80021ac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000018c 	.word	0x2000018c
 80021f8:	200001b8 	.word	0x200001b8
 80021fc:	200001a0 	.word	0x200001a0

08002200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f9e1 	bl	80025d4 <vPortFree>
            vPortFree( pxTCB );
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9de 	bl	80025d4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <prvResetNextTaskUnblockTime+0x2c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <prvResetNextTaskUnblockTime+0x30>)
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002236:	e005      	b.n	8002244 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <prvResetNextTaskUnblockTime+0x2c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a03      	ldr	r2, [pc, #12]	; (8002250 <prvResetNextTaskUnblockTime+0x30>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000170 	.word	0x20000170
 8002250:	200001d8 	.word	0x200001d8

08002254 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b04      	subs	r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800226c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3b04      	subs	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f023 0201 	bic.w	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3b04      	subs	r3, #4
 8002282:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <pxPortInitialiseStack+0x54>)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3b14      	subs	r3, #20
 800228e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3b20      	subs	r3, #32
 800229a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800229c:	68fb      	ldr	r3, [r7, #12]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	080022ad 	.word	0x080022ad

080022ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80022b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	607b      	str	r3, [r7, #4]
    }
 80022c8:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80022ca:	bf00      	nop
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0fc      	beq.n	80022cc <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
	...

080022e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <pxCurrentTCBConst2>)
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	6808      	ldr	r0, [r1, #0]
 80022e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022ea:	f380 8809 	msr	PSP, r0
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f380 8811 	msr	BASEPRI, r0
 80022fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80022fe:	4770      	bx	lr

08002300 <pxCurrentTCBConst2>:
 8002300:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop

08002308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <prvPortStartFirstTask+0x1c>)
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	6800      	ldr	r0, [r0, #0]
 800230e:	f380 8808 	msr	MSP, r0
 8002312:	b662      	cpsie	i
 8002314:	b661      	cpsie	f
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	df00      	svc	0
 8002320:	bf00      	nop
 8002322:	0000      	.short	0x0000
 8002324:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop

0800232c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <xPortStartScheduler+0x38>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <xPortStartScheduler+0x38>)
 8002336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800233a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <xPortStartScheduler+0x38>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a08      	ldr	r2, [pc, #32]	; (8002364 <xPortStartScheduler+0x38>)
 8002342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002346:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002348:	f000 f890 	bl	800246c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <xPortStartScheduler+0x3c>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002352:	f7ff ffd9 	bl	8002308 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002356:	f7ff fe87 	bl	8002068 <vTaskSwitchContext>
    prvTaskExitError();
 800235a:	f7ff ffa7 	bl	80022ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000ed20 	.word	0xe000ed20
 8002368:	20000010 	.word	0x20000010

0800236c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
        __asm volatile
 8002372:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002376:	f383 8811 	msr	BASEPRI, r3
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	607b      	str	r3, [r7, #4]
    }
 8002384:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <vPortEnterCritical+0x30>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a03      	ldr	r2, [pc, #12]	; (800239c <vPortEnterCritical+0x30>)
 800238e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000010 	.word	0x20000010

080023a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <vPortExitCritical+0x30>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <vPortExitCritical+0x30>)
 80023ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <vPortExitCritical+0x30>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <vPortExitCritical+0x24>
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80023c2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000010 	.word	0x20000010
	...

080023e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80023e0:	f3ef 8009 	mrs	r0, PSP
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <pxCurrentTCBConst>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023f0:	6010      	str	r0, [r2, #0]
 80023f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80023f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80023fa:	f380 8811 	msr	BASEPRI, r0
 80023fe:	f7ff fe33 	bl	8002068 <vTaskSwitchContext>
 8002402:	f04f 0000 	mov.w	r0, #0
 8002406:	f380 8811 	msr	BASEPRI, r0
 800240a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	6808      	ldr	r0, [r1, #0]
 8002412:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002416:	f380 8809 	msr	PSP, r0
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	4770      	bx	lr

08002420 <pxCurrentTCBConst>:
 8002420:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop

08002428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
        __asm volatile
 800242e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	607b      	str	r3, [r7, #4]
    }
 8002440:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002442:	f7ff fd0b 	bl	8001e5c <xTaskIncrementTick>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <SysTick_Handler+0x40>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f383 8811 	msr	BASEPRI, r3
    }
 800245e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	e000ed04 	.word	0xe000ed04

0800246c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <vPortSetupTimerInterrupt+0x24>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <vPortSetupTimerInterrupt+0x28>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <vPortSetupTimerInterrupt+0x2c>)
 800247e:	4a07      	ldr	r2, [pc, #28]	; (800249c <vPortSetupTimerInterrupt+0x30>)
 8002480:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002482:	4b03      	ldr	r3, [pc, #12]	; (8002490 <vPortSetupTimerInterrupt+0x24>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	e000e010 	.word	0xe000e010
 8002494:	e000e018 	.word	0xe000e018
 8002498:	e000e014 	.word	0xe000e014
 800249c:	0001193f 	.word	0x0001193f

080024a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80024ac:	f7ff fbdc 	bl	8001c68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <pvPortMalloc+0x120>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80024b8:	f000 f8ca 	bl	8002650 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80024c2:	2208      	movs	r2, #8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	3308      	adds	r3, #8
 80024ce:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d804      	bhi.n	80024e4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	e001      	b.n	80024e8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db60      	blt.n	80025b0 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05d      	beq.n	80025b0 <pvPortMalloc+0x110>
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <pvPortMalloc+0x124>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d858      	bhi.n	80025b0 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <pvPortMalloc+0x128>)
 8002500:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <pvPortMalloc+0x128>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002508:	e004      	b.n	8002514 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	d903      	bls.n	8002526 <pvPortMalloc+0x86>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f1      	bne.n	800250a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <pvPortMalloc+0x120>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	429a      	cmp	r2, r3
 800252e:	d03f      	beq.n	80025b0 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1ad2      	subs	r2, r2, r3
 800254a:	2308      	movs	r3, #8
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	429a      	cmp	r2, r3
 8002550:	d90f      	bls.n	8002572 <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f8cb 	bl	8002708 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <pvPortMalloc+0x124>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <pvPortMalloc+0x124>)
 800257e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <pvPortMalloc+0x124>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <pvPortMalloc+0x12c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d203      	bcs.n	8002594 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <pvPortMalloc+0x124>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <pvPortMalloc+0x12c>)
 8002592:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <pvPortMalloc+0x130>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <pvPortMalloc+0x130>)
 80025ae:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80025b0:	f7ff fb68 	bl	8001c84 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80025b4:	697b      	ldr	r3, [r7, #20]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200045ec 	.word	0x200045ec
 80025c4:	200045f0 	.word	0x200045f0
 80025c8:	200045e4 	.word	0x200045e4
 80025cc:	200045f4 	.word	0x200045f4
 80025d0:	200045f8 	.word	0x200045f8

080025d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d02b      	beq.n	800263e <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80025e6:	2308      	movs	r3, #8
 80025e8:	425b      	negs	r3, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0fdb      	lsrs	r3, r3, #31
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d118      	bne.n	800263e <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002618:	f7ff fb26 	bl	8001c68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <vPortFree+0x74>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4413      	add	r3, r2
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <vPortFree+0x74>)
 8002628:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800262a:	68b8      	ldr	r0, [r7, #8]
 800262c:	f000 f86c 	bl	8002708 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <vPortFree+0x78>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <vPortFree+0x78>)
 8002638:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800263a:	f7ff fb23 	bl	8001c84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200045f0 	.word	0x200045f0
 800264c:	200045fc 	.word	0x200045fc

08002650 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002656:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800265a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <prvHeapInit+0xa4>)
 800265e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3307      	adds	r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0307 	bic.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <prvHeapInit+0xa4>)
 8002680:	4413      	add	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <prvHeapInit+0xa8>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <prvHeapInit+0xa8>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800269c:	2208      	movs	r2, #8
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <prvHeapInit+0xac>)
 80026b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <prvHeapInit+0xac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <prvHeapInit+0xac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	1ad2      	subs	r2, r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <prvHeapInit+0xac>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a08      	ldr	r2, [pc, #32]	; (8002700 <prvHeapInit+0xb0>)
 80026de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <prvHeapInit+0xb4>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200001e4 	.word	0x200001e4
 80026f8:	200045e4 	.word	0x200045e4
 80026fc:	200045ec 	.word	0x200045ec
 8002700:	200045f4 	.word	0x200045f4
 8002704:	200045f0 	.word	0x200045f0

08002708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <prvInsertBlockIntoFreeList+0xa8>)
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e002      	b.n	800271c <prvInsertBlockIntoFreeList+0x14>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d8f7      	bhi.n	8002716 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	d108      	bne.n	800274a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	441a      	add	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	441a      	add	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d118      	bne.n	8002790 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <prvInsertBlockIntoFreeList+0xac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d00d      	beq.n	8002786 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e008      	b.n	8002798 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <prvInsertBlockIntoFreeList+0xac>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e003      	b.n	8002798 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d002      	beq.n	80027a6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	200045e4 	.word	0x200045e4
 80027b4:	200045ec 	.word	0x200045ec

080027b8 <std>:
 80027b8:	2300      	movs	r3, #0
 80027ba:	b510      	push	{r4, lr}
 80027bc:	4604      	mov	r4, r0
 80027be:	e9c0 3300 	strd	r3, r3, [r0]
 80027c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027c6:	6083      	str	r3, [r0, #8]
 80027c8:	8181      	strh	r1, [r0, #12]
 80027ca:	6643      	str	r3, [r0, #100]	; 0x64
 80027cc:	81c2      	strh	r2, [r0, #14]
 80027ce:	6183      	str	r3, [r0, #24]
 80027d0:	4619      	mov	r1, r3
 80027d2:	2208      	movs	r2, #8
 80027d4:	305c      	adds	r0, #92	; 0x5c
 80027d6:	f000 f9d3 	bl	8002b80 <memset>
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <std+0x38>)
 80027dc:	6224      	str	r4, [r4, #32]
 80027de:	6263      	str	r3, [r4, #36]	; 0x24
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <std+0x3c>)
 80027e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <std+0x40>)
 80027e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <std+0x44>)
 80027ea:	6323      	str	r3, [r4, #48]	; 0x30
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	bf00      	nop
 80027f0:	080029d1 	.word	0x080029d1
 80027f4:	080029f3 	.word	0x080029f3
 80027f8:	08002a2b 	.word	0x08002a2b
 80027fc:	08002a4f 	.word	0x08002a4f

08002800 <stdio_exit_handler>:
 8002800:	4a02      	ldr	r2, [pc, #8]	; (800280c <stdio_exit_handler+0xc>)
 8002802:	4903      	ldr	r1, [pc, #12]	; (8002810 <stdio_exit_handler+0x10>)
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <stdio_exit_handler+0x14>)
 8002806:	f000 b869 	b.w	80028dc <_fwalk_sglue>
 800280a:	bf00      	nop
 800280c:	20000014 	.word	0x20000014
 8002810:	08002f55 	.word	0x08002f55
 8002814:	20000020 	.word	0x20000020

08002818 <cleanup_stdio>:
 8002818:	6841      	ldr	r1, [r0, #4]
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <cleanup_stdio+0x34>)
 800281c:	b510      	push	{r4, lr}
 800281e:	4299      	cmp	r1, r3
 8002820:	4604      	mov	r4, r0
 8002822:	d001      	beq.n	8002828 <cleanup_stdio+0x10>
 8002824:	f000 fb96 	bl	8002f54 <_fflush_r>
 8002828:	68a1      	ldr	r1, [r4, #8]
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <cleanup_stdio+0x38>)
 800282c:	4299      	cmp	r1, r3
 800282e:	d002      	beq.n	8002836 <cleanup_stdio+0x1e>
 8002830:	4620      	mov	r0, r4
 8002832:	f000 fb8f 	bl	8002f54 <_fflush_r>
 8002836:	68e1      	ldr	r1, [r4, #12]
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <cleanup_stdio+0x3c>)
 800283a:	4299      	cmp	r1, r3
 800283c:	d004      	beq.n	8002848 <cleanup_stdio+0x30>
 800283e:	4620      	mov	r0, r4
 8002840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002844:	f000 bb86 	b.w	8002f54 <_fflush_r>
 8002848:	bd10      	pop	{r4, pc}
 800284a:	bf00      	nop
 800284c:	20004600 	.word	0x20004600
 8002850:	20004668 	.word	0x20004668
 8002854:	200046d0 	.word	0x200046d0

08002858 <global_stdio_init.part.0>:
 8002858:	b510      	push	{r4, lr}
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <global_stdio_init.part.0+0x30>)
 800285c:	4c0b      	ldr	r4, [pc, #44]	; (800288c <global_stdio_init.part.0+0x34>)
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <global_stdio_init.part.0+0x38>)
 8002860:	4620      	mov	r0, r4
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	2104      	movs	r1, #4
 8002866:	2200      	movs	r2, #0
 8002868:	f7ff ffa6 	bl	80027b8 <std>
 800286c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002870:	2201      	movs	r2, #1
 8002872:	2109      	movs	r1, #9
 8002874:	f7ff ffa0 	bl	80027b8 <std>
 8002878:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800287c:	2202      	movs	r2, #2
 800287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002882:	2112      	movs	r1, #18
 8002884:	f7ff bf98 	b.w	80027b8 <std>
 8002888:	20004738 	.word	0x20004738
 800288c:	20004600 	.word	0x20004600
 8002890:	08002801 	.word	0x08002801

08002894 <__sfp_lock_acquire>:
 8002894:	4801      	ldr	r0, [pc, #4]	; (800289c <__sfp_lock_acquire+0x8>)
 8002896:	f000 b9e5 	b.w	8002c64 <__retarget_lock_acquire_recursive>
 800289a:	bf00      	nop
 800289c:	20004741 	.word	0x20004741

080028a0 <__sfp_lock_release>:
 80028a0:	4801      	ldr	r0, [pc, #4]	; (80028a8 <__sfp_lock_release+0x8>)
 80028a2:	f000 b9e0 	b.w	8002c66 <__retarget_lock_release_recursive>
 80028a6:	bf00      	nop
 80028a8:	20004741 	.word	0x20004741

080028ac <__sinit>:
 80028ac:	b510      	push	{r4, lr}
 80028ae:	4604      	mov	r4, r0
 80028b0:	f7ff fff0 	bl	8002894 <__sfp_lock_acquire>
 80028b4:	6a23      	ldr	r3, [r4, #32]
 80028b6:	b11b      	cbz	r3, 80028c0 <__sinit+0x14>
 80028b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028bc:	f7ff bff0 	b.w	80028a0 <__sfp_lock_release>
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__sinit+0x28>)
 80028c2:	6223      	str	r3, [r4, #32]
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__sinit+0x2c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f5      	bne.n	80028b8 <__sinit+0xc>
 80028cc:	f7ff ffc4 	bl	8002858 <global_stdio_init.part.0>
 80028d0:	e7f2      	b.n	80028b8 <__sinit+0xc>
 80028d2:	bf00      	nop
 80028d4:	08002819 	.word	0x08002819
 80028d8:	20004738 	.word	0x20004738

080028dc <_fwalk_sglue>:
 80028dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028e0:	4607      	mov	r7, r0
 80028e2:	4688      	mov	r8, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	2600      	movs	r6, #0
 80028e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028ec:	f1b9 0901 	subs.w	r9, r9, #1
 80028f0:	d505      	bpl.n	80028fe <_fwalk_sglue+0x22>
 80028f2:	6824      	ldr	r4, [r4, #0]
 80028f4:	2c00      	cmp	r4, #0
 80028f6:	d1f7      	bne.n	80028e8 <_fwalk_sglue+0xc>
 80028f8:	4630      	mov	r0, r6
 80028fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028fe:	89ab      	ldrh	r3, [r5, #12]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d907      	bls.n	8002914 <_fwalk_sglue+0x38>
 8002904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002908:	3301      	adds	r3, #1
 800290a:	d003      	beq.n	8002914 <_fwalk_sglue+0x38>
 800290c:	4629      	mov	r1, r5
 800290e:	4638      	mov	r0, r7
 8002910:	47c0      	blx	r8
 8002912:	4306      	orrs	r6, r0
 8002914:	3568      	adds	r5, #104	; 0x68
 8002916:	e7e9      	b.n	80028ec <_fwalk_sglue+0x10>

08002918 <_puts_r>:
 8002918:	6a03      	ldr	r3, [r0, #32]
 800291a:	b570      	push	{r4, r5, r6, lr}
 800291c:	4605      	mov	r5, r0
 800291e:	460e      	mov	r6, r1
 8002920:	6884      	ldr	r4, [r0, #8]
 8002922:	b90b      	cbnz	r3, 8002928 <_puts_r+0x10>
 8002924:	f7ff ffc2 	bl	80028ac <__sinit>
 8002928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800292a:	07db      	lsls	r3, r3, #31
 800292c:	d405      	bmi.n	800293a <_puts_r+0x22>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	0598      	lsls	r0, r3, #22
 8002932:	d402      	bmi.n	800293a <_puts_r+0x22>
 8002934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002936:	f000 f995 	bl	8002c64 <__retarget_lock_acquire_recursive>
 800293a:	89a3      	ldrh	r3, [r4, #12]
 800293c:	0719      	lsls	r1, r3, #28
 800293e:	d513      	bpl.n	8002968 <_puts_r+0x50>
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	b18b      	cbz	r3, 8002968 <_puts_r+0x50>
 8002944:	3e01      	subs	r6, #1
 8002946:	68a3      	ldr	r3, [r4, #8]
 8002948:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800294c:	3b01      	subs	r3, #1
 800294e:	60a3      	str	r3, [r4, #8]
 8002950:	b9e9      	cbnz	r1, 800298e <_puts_r+0x76>
 8002952:	2b00      	cmp	r3, #0
 8002954:	da2e      	bge.n	80029b4 <_puts_r+0x9c>
 8002956:	4622      	mov	r2, r4
 8002958:	210a      	movs	r1, #10
 800295a:	4628      	mov	r0, r5
 800295c:	f000 f87b 	bl	8002a56 <__swbuf_r>
 8002960:	3001      	adds	r0, #1
 8002962:	d007      	beq.n	8002974 <_puts_r+0x5c>
 8002964:	250a      	movs	r5, #10
 8002966:	e007      	b.n	8002978 <_puts_r+0x60>
 8002968:	4621      	mov	r1, r4
 800296a:	4628      	mov	r0, r5
 800296c:	f000 f8b0 	bl	8002ad0 <__swsetup_r>
 8002970:	2800      	cmp	r0, #0
 8002972:	d0e7      	beq.n	8002944 <_puts_r+0x2c>
 8002974:	f04f 35ff 	mov.w	r5, #4294967295
 8002978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800297a:	07da      	lsls	r2, r3, #31
 800297c:	d405      	bmi.n	800298a <_puts_r+0x72>
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	059b      	lsls	r3, r3, #22
 8002982:	d402      	bmi.n	800298a <_puts_r+0x72>
 8002984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002986:	f000 f96e 	bl	8002c66 <__retarget_lock_release_recursive>
 800298a:	4628      	mov	r0, r5
 800298c:	bd70      	pop	{r4, r5, r6, pc}
 800298e:	2b00      	cmp	r3, #0
 8002990:	da04      	bge.n	800299c <_puts_r+0x84>
 8002992:	69a2      	ldr	r2, [r4, #24]
 8002994:	429a      	cmp	r2, r3
 8002996:	dc06      	bgt.n	80029a6 <_puts_r+0x8e>
 8002998:	290a      	cmp	r1, #10
 800299a:	d004      	beq.n	80029a6 <_puts_r+0x8e>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	6022      	str	r2, [r4, #0]
 80029a2:	7019      	strb	r1, [r3, #0]
 80029a4:	e7cf      	b.n	8002946 <_puts_r+0x2e>
 80029a6:	4622      	mov	r2, r4
 80029a8:	4628      	mov	r0, r5
 80029aa:	f000 f854 	bl	8002a56 <__swbuf_r>
 80029ae:	3001      	adds	r0, #1
 80029b0:	d1c9      	bne.n	8002946 <_puts_r+0x2e>
 80029b2:	e7df      	b.n	8002974 <_puts_r+0x5c>
 80029b4:	250a      	movs	r5, #10
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	6022      	str	r2, [r4, #0]
 80029bc:	701d      	strb	r5, [r3, #0]
 80029be:	e7db      	b.n	8002978 <_puts_r+0x60>

080029c0 <puts>:
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <puts+0xc>)
 80029c2:	4601      	mov	r1, r0
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f7ff bfa7 	b.w	8002918 <_puts_r>
 80029ca:	bf00      	nop
 80029cc:	2000006c 	.word	0x2000006c

080029d0 <__sread>:
 80029d0:	b510      	push	{r4, lr}
 80029d2:	460c      	mov	r4, r1
 80029d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d8:	f000 f8fc 	bl	8002bd4 <_read_r>
 80029dc:	2800      	cmp	r0, #0
 80029de:	bfab      	itete	ge
 80029e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029e2:	89a3      	ldrhlt	r3, [r4, #12]
 80029e4:	181b      	addge	r3, r3, r0
 80029e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029ea:	bfac      	ite	ge
 80029ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80029ee:	81a3      	strhlt	r3, [r4, #12]
 80029f0:	bd10      	pop	{r4, pc}

080029f2 <__swrite>:
 80029f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f6:	461f      	mov	r7, r3
 80029f8:	898b      	ldrh	r3, [r1, #12]
 80029fa:	4605      	mov	r5, r0
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	460c      	mov	r4, r1
 8002a00:	4616      	mov	r6, r2
 8002a02:	d505      	bpl.n	8002a10 <__swrite+0x1e>
 8002a04:	2302      	movs	r3, #2
 8002a06:	2200      	movs	r2, #0
 8002a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a0c:	f000 f8d0 	bl	8002bb0 <_lseek_r>
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	4632      	mov	r2, r6
 8002a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a18:	81a3      	strh	r3, [r4, #12]
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a26:	f000 b8e7 	b.w	8002bf8 <_write_r>

08002a2a <__sseek>:
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a32:	f000 f8bd 	bl	8002bb0 <_lseek_r>
 8002a36:	1c43      	adds	r3, r0, #1
 8002a38:	89a3      	ldrh	r3, [r4, #12]
 8002a3a:	bf15      	itete	ne
 8002a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a46:	81a3      	strheq	r3, [r4, #12]
 8002a48:	bf18      	it	ne
 8002a4a:	81a3      	strhne	r3, [r4, #12]
 8002a4c:	bd10      	pop	{r4, pc}

08002a4e <__sclose>:
 8002a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a52:	f000 b89d 	b.w	8002b90 <_close_r>

08002a56 <__swbuf_r>:
 8002a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a58:	460e      	mov	r6, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	b118      	cbz	r0, 8002a68 <__swbuf_r+0x12>
 8002a60:	6a03      	ldr	r3, [r0, #32]
 8002a62:	b90b      	cbnz	r3, 8002a68 <__swbuf_r+0x12>
 8002a64:	f7ff ff22 	bl	80028ac <__sinit>
 8002a68:	69a3      	ldr	r3, [r4, #24]
 8002a6a:	60a3      	str	r3, [r4, #8]
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	071a      	lsls	r2, r3, #28
 8002a70:	d525      	bpl.n	8002abe <__swbuf_r+0x68>
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	b31b      	cbz	r3, 8002abe <__swbuf_r+0x68>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	6922      	ldr	r2, [r4, #16]
 8002a7a:	b2f6      	uxtb	r6, r6
 8002a7c:	1a98      	subs	r0, r3, r2
 8002a7e:	6963      	ldr	r3, [r4, #20]
 8002a80:	4637      	mov	r7, r6
 8002a82:	4283      	cmp	r3, r0
 8002a84:	dc04      	bgt.n	8002a90 <__swbuf_r+0x3a>
 8002a86:	4621      	mov	r1, r4
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 fa63 	bl	8002f54 <_fflush_r>
 8002a8e:	b9e0      	cbnz	r0, 8002aca <__swbuf_r+0x74>
 8002a90:	68a3      	ldr	r3, [r4, #8]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60a3      	str	r3, [r4, #8]
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	6022      	str	r2, [r4, #0]
 8002a9c:	701e      	strb	r6, [r3, #0]
 8002a9e:	6962      	ldr	r2, [r4, #20]
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d004      	beq.n	8002ab0 <__swbuf_r+0x5a>
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	07db      	lsls	r3, r3, #31
 8002aaa:	d506      	bpl.n	8002aba <__swbuf_r+0x64>
 8002aac:	2e0a      	cmp	r6, #10
 8002aae:	d104      	bne.n	8002aba <__swbuf_r+0x64>
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f000 fa4e 	bl	8002f54 <_fflush_r>
 8002ab8:	b938      	cbnz	r0, 8002aca <__swbuf_r+0x74>
 8002aba:	4638      	mov	r0, r7
 8002abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002abe:	4621      	mov	r1, r4
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 f805 	bl	8002ad0 <__swsetup_r>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0d5      	beq.n	8002a76 <__swbuf_r+0x20>
 8002aca:	f04f 37ff 	mov.w	r7, #4294967295
 8002ace:	e7f4      	b.n	8002aba <__swbuf_r+0x64>

08002ad0 <__swsetup_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <__swsetup_r+0xac>)
 8002ad4:	4605      	mov	r5, r0
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	460c      	mov	r4, r1
 8002ada:	b118      	cbz	r0, 8002ae4 <__swsetup_r+0x14>
 8002adc:	6a03      	ldr	r3, [r0, #32]
 8002ade:	b90b      	cbnz	r3, 8002ae4 <__swsetup_r+0x14>
 8002ae0:	f7ff fee4 	bl	80028ac <__sinit>
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002aea:	0718      	lsls	r0, r3, #28
 8002aec:	d422      	bmi.n	8002b34 <__swsetup_r+0x64>
 8002aee:	06d9      	lsls	r1, r3, #27
 8002af0:	d407      	bmi.n	8002b02 <__swsetup_r+0x32>
 8002af2:	2309      	movs	r3, #9
 8002af4:	602b      	str	r3, [r5, #0]
 8002af6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295
 8002afe:	81a3      	strh	r3, [r4, #12]
 8002b00:	e034      	b.n	8002b6c <__swsetup_r+0x9c>
 8002b02:	0758      	lsls	r0, r3, #29
 8002b04:	d512      	bpl.n	8002b2c <__swsetup_r+0x5c>
 8002b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b08:	b141      	cbz	r1, 8002b1c <__swsetup_r+0x4c>
 8002b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b0e:	4299      	cmp	r1, r3
 8002b10:	d002      	beq.n	8002b18 <__swsetup_r+0x48>
 8002b12:	4628      	mov	r0, r5
 8002b14:	f000 f8a8 	bl	8002c68 <_free_r>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6363      	str	r3, [r4, #52]	; 0x34
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b22:	81a3      	strh	r3, [r4, #12]
 8002b24:	2300      	movs	r3, #0
 8002b26:	6063      	str	r3, [r4, #4]
 8002b28:	6923      	ldr	r3, [r4, #16]
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	f043 0308 	orr.w	r3, r3, #8
 8002b32:	81a3      	strh	r3, [r4, #12]
 8002b34:	6923      	ldr	r3, [r4, #16]
 8002b36:	b94b      	cbnz	r3, 8002b4c <__swsetup_r+0x7c>
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b42:	d003      	beq.n	8002b4c <__swsetup_r+0x7c>
 8002b44:	4621      	mov	r1, r4
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 fa51 	bl	8002fee <__smakebuf_r>
 8002b4c:	89a0      	ldrh	r0, [r4, #12]
 8002b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b52:	f010 0301 	ands.w	r3, r0, #1
 8002b56:	d00a      	beq.n	8002b6e <__swsetup_r+0x9e>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60a3      	str	r3, [r4, #8]
 8002b5c:	6963      	ldr	r3, [r4, #20]
 8002b5e:	425b      	negs	r3, r3
 8002b60:	61a3      	str	r3, [r4, #24]
 8002b62:	6923      	ldr	r3, [r4, #16]
 8002b64:	b943      	cbnz	r3, 8002b78 <__swsetup_r+0xa8>
 8002b66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b6a:	d1c4      	bne.n	8002af6 <__swsetup_r+0x26>
 8002b6c:	bd38      	pop	{r3, r4, r5, pc}
 8002b6e:	0781      	lsls	r1, r0, #30
 8002b70:	bf58      	it	pl
 8002b72:	6963      	ldrpl	r3, [r4, #20]
 8002b74:	60a3      	str	r3, [r4, #8]
 8002b76:	e7f4      	b.n	8002b62 <__swsetup_r+0x92>
 8002b78:	2000      	movs	r0, #0
 8002b7a:	e7f7      	b.n	8002b6c <__swsetup_r+0x9c>
 8002b7c:	2000006c 	.word	0x2000006c

08002b80 <memset>:
 8002b80:	4603      	mov	r3, r0
 8002b82:	4402      	add	r2, r0
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d100      	bne.n	8002b8a <memset+0xa>
 8002b88:	4770      	bx	lr
 8002b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8e:	e7f9      	b.n	8002b84 <memset+0x4>

08002b90 <_close_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	2300      	movs	r3, #0
 8002b94:	4d05      	ldr	r5, [pc, #20]	; (8002bac <_close_r+0x1c>)
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	f7fd fd07 	bl	80005ae <_close>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d102      	bne.n	8002baa <_close_r+0x1a>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	b103      	cbz	r3, 8002baa <_close_r+0x1a>
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	bd38      	pop	{r3, r4, r5, pc}
 8002bac:	2000473c 	.word	0x2000473c

08002bb0 <_lseek_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4d05      	ldr	r5, [pc, #20]	; (8002bd0 <_lseek_r+0x20>)
 8002bbc:	602a      	str	r2, [r5, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f7fd fd19 	bl	80005f6 <_lseek>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d102      	bne.n	8002bce <_lseek_r+0x1e>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	b103      	cbz	r3, 8002bce <_lseek_r+0x1e>
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	2000473c 	.word	0x2000473c

08002bd4 <_read_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4d05      	ldr	r5, [pc, #20]	; (8002bf4 <_read_r+0x20>)
 8002be0:	602a      	str	r2, [r5, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7fd fcaa 	bl	800053c <_read>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_read_r+0x1e>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_read_r+0x1e>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	2000473c 	.word	0x2000473c

08002bf8 <_write_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	2200      	movs	r2, #0
 8002c02:	4d05      	ldr	r5, [pc, #20]	; (8002c18 <_write_r+0x20>)
 8002c04:	602a      	str	r2, [r5, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7fd fcb5 	bl	8000576 <_write>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_write_r+0x1e>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_write_r+0x1e>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	2000473c 	.word	0x2000473c

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	2600      	movs	r6, #0
 8002c20:	4d0c      	ldr	r5, [pc, #48]	; (8002c54 <__libc_init_array+0x38>)
 8002c22:	4c0d      	ldr	r4, [pc, #52]	; (8002c58 <__libc_init_array+0x3c>)
 8002c24:	1b64      	subs	r4, r4, r5
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	f000 fa5c 	bl	80030e8 <_init>
 8002c30:	2600      	movs	r6, #0
 8002c32:	4d0a      	ldr	r5, [pc, #40]	; (8002c5c <__libc_init_array+0x40>)
 8002c34:	4c0a      	ldr	r4, [pc, #40]	; (8002c60 <__libc_init_array+0x44>)
 8002c36:	1b64      	subs	r4, r4, r5
 8002c38:	10a4      	asrs	r4, r4, #2
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	0800316c 	.word	0x0800316c
 8002c58:	0800316c 	.word	0x0800316c
 8002c5c:	0800316c 	.word	0x0800316c
 8002c60:	08003170 	.word	0x08003170

08002c64 <__retarget_lock_acquire_recursive>:
 8002c64:	4770      	bx	lr

08002c66 <__retarget_lock_release_recursive>:
 8002c66:	4770      	bx	lr

08002c68 <_free_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	2900      	cmp	r1, #0
 8002c6e:	d040      	beq.n	8002cf2 <_free_r+0x8a>
 8002c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c74:	1f0c      	subs	r4, r1, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bfb8      	it	lt
 8002c7a:	18e4      	addlt	r4, r4, r3
 8002c7c:	f000 f8dc 	bl	8002e38 <__malloc_lock>
 8002c80:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <_free_r+0x8c>)
 8002c82:	6813      	ldr	r3, [r2, #0]
 8002c84:	b933      	cbnz	r3, 8002c94 <_free_r+0x2c>
 8002c86:	6063      	str	r3, [r4, #4]
 8002c88:	6014      	str	r4, [r2, #0]
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c90:	f000 b8d8 	b.w	8002e44 <__malloc_unlock>
 8002c94:	42a3      	cmp	r3, r4
 8002c96:	d908      	bls.n	8002caa <_free_r+0x42>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	1821      	adds	r1, r4, r0
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	bf01      	itttt	eq
 8002ca0:	6819      	ldreq	r1, [r3, #0]
 8002ca2:	685b      	ldreq	r3, [r3, #4]
 8002ca4:	1809      	addeq	r1, r1, r0
 8002ca6:	6021      	streq	r1, [r4, #0]
 8002ca8:	e7ed      	b.n	8002c86 <_free_r+0x1e>
 8002caa:	461a      	mov	r2, r3
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	b10b      	cbz	r3, 8002cb4 <_free_r+0x4c>
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	d9fa      	bls.n	8002caa <_free_r+0x42>
 8002cb4:	6811      	ldr	r1, [r2, #0]
 8002cb6:	1850      	adds	r0, r2, r1
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	d10b      	bne.n	8002cd4 <_free_r+0x6c>
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	4401      	add	r1, r0
 8002cc0:	1850      	adds	r0, r2, r1
 8002cc2:	4283      	cmp	r3, r0
 8002cc4:	6011      	str	r1, [r2, #0]
 8002cc6:	d1e0      	bne.n	8002c8a <_free_r+0x22>
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4408      	add	r0, r1
 8002cce:	6010      	str	r0, [r2, #0]
 8002cd0:	6053      	str	r3, [r2, #4]
 8002cd2:	e7da      	b.n	8002c8a <_free_r+0x22>
 8002cd4:	d902      	bls.n	8002cdc <_free_r+0x74>
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	602b      	str	r3, [r5, #0]
 8002cda:	e7d6      	b.n	8002c8a <_free_r+0x22>
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	1821      	adds	r1, r4, r0
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	bf01      	itttt	eq
 8002ce4:	6819      	ldreq	r1, [r3, #0]
 8002ce6:	685b      	ldreq	r3, [r3, #4]
 8002ce8:	1809      	addeq	r1, r1, r0
 8002cea:	6021      	streq	r1, [r4, #0]
 8002cec:	6063      	str	r3, [r4, #4]
 8002cee:	6054      	str	r4, [r2, #4]
 8002cf0:	e7cb      	b.n	8002c8a <_free_r+0x22>
 8002cf2:	bd38      	pop	{r3, r4, r5, pc}
 8002cf4:	20004744 	.word	0x20004744

08002cf8 <sbrk_aligned>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4e0e      	ldr	r6, [pc, #56]	; (8002d34 <sbrk_aligned+0x3c>)
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	6831      	ldr	r1, [r6, #0]
 8002d00:	4605      	mov	r5, r0
 8002d02:	b911      	cbnz	r1, 8002d0a <sbrk_aligned+0x12>
 8002d04:	f000 f9d2 	bl	80030ac <_sbrk_r>
 8002d08:	6030      	str	r0, [r6, #0]
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 f9cd 	bl	80030ac <_sbrk_r>
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	d00a      	beq.n	8002d2c <sbrk_aligned+0x34>
 8002d16:	1cc4      	adds	r4, r0, #3
 8002d18:	f024 0403 	bic.w	r4, r4, #3
 8002d1c:	42a0      	cmp	r0, r4
 8002d1e:	d007      	beq.n	8002d30 <sbrk_aligned+0x38>
 8002d20:	1a21      	subs	r1, r4, r0
 8002d22:	4628      	mov	r0, r5
 8002d24:	f000 f9c2 	bl	80030ac <_sbrk_r>
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d101      	bne.n	8002d30 <sbrk_aligned+0x38>
 8002d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002d30:	4620      	mov	r0, r4
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	20004748 	.word	0x20004748

08002d38 <_malloc_r>:
 8002d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d3c:	1ccd      	adds	r5, r1, #3
 8002d3e:	f025 0503 	bic.w	r5, r5, #3
 8002d42:	3508      	adds	r5, #8
 8002d44:	2d0c      	cmp	r5, #12
 8002d46:	bf38      	it	cc
 8002d48:	250c      	movcc	r5, #12
 8002d4a:	2d00      	cmp	r5, #0
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	db01      	blt.n	8002d54 <_malloc_r+0x1c>
 8002d50:	42a9      	cmp	r1, r5
 8002d52:	d905      	bls.n	8002d60 <_malloc_r+0x28>
 8002d54:	230c      	movs	r3, #12
 8002d56:	2600      	movs	r6, #0
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e34 <_malloc_r+0xfc>
 8002d64:	f000 f868 	bl	8002e38 <__malloc_lock>
 8002d68:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	bb5c      	cbnz	r4, 8002dc8 <_malloc_r+0x90>
 8002d70:	4629      	mov	r1, r5
 8002d72:	4638      	mov	r0, r7
 8002d74:	f7ff ffc0 	bl	8002cf8 <sbrk_aligned>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	d155      	bne.n	8002e2a <_malloc_r+0xf2>
 8002d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8002d82:	4626      	mov	r6, r4
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	d145      	bne.n	8002e14 <_malloc_r+0xdc>
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d048      	beq.n	8002e1e <_malloc_r+0xe6>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4638      	mov	r0, r7
 8002d92:	eb04 0903 	add.w	r9, r4, r3
 8002d96:	f000 f989 	bl	80030ac <_sbrk_r>
 8002d9a:	4581      	cmp	r9, r0
 8002d9c:	d13f      	bne.n	8002e1e <_malloc_r+0xe6>
 8002d9e:	6821      	ldr	r1, [r4, #0]
 8002da0:	4638      	mov	r0, r7
 8002da2:	1a6d      	subs	r5, r5, r1
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7ff ffa7 	bl	8002cf8 <sbrk_aligned>
 8002daa:	3001      	adds	r0, #1
 8002dac:	d037      	beq.n	8002e1e <_malloc_r+0xe6>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	442b      	add	r3, r5
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	f8d8 3000 	ldr.w	r3, [r8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d038      	beq.n	8002e2e <_malloc_r+0xf6>
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	42a2      	cmp	r2, r4
 8002dc0:	d12b      	bne.n	8002e1a <_malloc_r+0xe2>
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	e00f      	b.n	8002de8 <_malloc_r+0xb0>
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	1b52      	subs	r2, r2, r5
 8002dcc:	d41f      	bmi.n	8002e0e <_malloc_r+0xd6>
 8002dce:	2a0b      	cmp	r2, #11
 8002dd0:	d917      	bls.n	8002e02 <_malloc_r+0xca>
 8002dd2:	1961      	adds	r1, r4, r5
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	6025      	str	r5, [r4, #0]
 8002dd8:	bf18      	it	ne
 8002dda:	6059      	strne	r1, [r3, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	bf08      	it	eq
 8002de0:	f8c8 1000 	streq.w	r1, [r8]
 8002de4:	5162      	str	r2, [r4, r5]
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	4638      	mov	r0, r7
 8002dea:	f104 060b 	add.w	r6, r4, #11
 8002dee:	f000 f829 	bl	8002e44 <__malloc_unlock>
 8002df2:	f026 0607 	bic.w	r6, r6, #7
 8002df6:	1d23      	adds	r3, r4, #4
 8002df8:	1af2      	subs	r2, r6, r3
 8002dfa:	d0ae      	beq.n	8002d5a <_malloc_r+0x22>
 8002dfc:	1b9b      	subs	r3, r3, r6
 8002dfe:	50a3      	str	r3, [r4, r2]
 8002e00:	e7ab      	b.n	8002d5a <_malloc_r+0x22>
 8002e02:	42a3      	cmp	r3, r4
 8002e04:	6862      	ldr	r2, [r4, #4]
 8002e06:	d1dd      	bne.n	8002dc4 <_malloc_r+0x8c>
 8002e08:	f8c8 2000 	str.w	r2, [r8]
 8002e0c:	e7ec      	b.n	8002de8 <_malloc_r+0xb0>
 8002e0e:	4623      	mov	r3, r4
 8002e10:	6864      	ldr	r4, [r4, #4]
 8002e12:	e7ac      	b.n	8002d6e <_malloc_r+0x36>
 8002e14:	4634      	mov	r4, r6
 8002e16:	6876      	ldr	r6, [r6, #4]
 8002e18:	e7b4      	b.n	8002d84 <_malloc_r+0x4c>
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	e7cc      	b.n	8002db8 <_malloc_r+0x80>
 8002e1e:	230c      	movs	r3, #12
 8002e20:	4638      	mov	r0, r7
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	f000 f80e 	bl	8002e44 <__malloc_unlock>
 8002e28:	e797      	b.n	8002d5a <_malloc_r+0x22>
 8002e2a:	6025      	str	r5, [r4, #0]
 8002e2c:	e7dc      	b.n	8002de8 <_malloc_r+0xb0>
 8002e2e:	605b      	str	r3, [r3, #4]
 8002e30:	deff      	udf	#255	; 0xff
 8002e32:	bf00      	nop
 8002e34:	20004744 	.word	0x20004744

08002e38 <__malloc_lock>:
 8002e38:	4801      	ldr	r0, [pc, #4]	; (8002e40 <__malloc_lock+0x8>)
 8002e3a:	f7ff bf13 	b.w	8002c64 <__retarget_lock_acquire_recursive>
 8002e3e:	bf00      	nop
 8002e40:	20004740 	.word	0x20004740

08002e44 <__malloc_unlock>:
 8002e44:	4801      	ldr	r0, [pc, #4]	; (8002e4c <__malloc_unlock+0x8>)
 8002e46:	f7ff bf0e 	b.w	8002c66 <__retarget_lock_release_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	20004740 	.word	0x20004740

08002e50 <__sflush_r>:
 8002e50:	898a      	ldrh	r2, [r1, #12]
 8002e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e54:	4605      	mov	r5, r0
 8002e56:	0710      	lsls	r0, r2, #28
 8002e58:	460c      	mov	r4, r1
 8002e5a:	d457      	bmi.n	8002f0c <__sflush_r+0xbc>
 8002e5c:	684b      	ldr	r3, [r1, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dc04      	bgt.n	8002e6c <__sflush_r+0x1c>
 8002e62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dc01      	bgt.n	8002e6c <__sflush_r+0x1c>
 8002e68:	2000      	movs	r0, #0
 8002e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e6e:	2e00      	cmp	r6, #0
 8002e70:	d0fa      	beq.n	8002e68 <__sflush_r+0x18>
 8002e72:	2300      	movs	r3, #0
 8002e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e78:	682f      	ldr	r7, [r5, #0]
 8002e7a:	6a21      	ldr	r1, [r4, #32]
 8002e7c:	602b      	str	r3, [r5, #0]
 8002e7e:	d032      	beq.n	8002ee6 <__sflush_r+0x96>
 8002e80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	075a      	lsls	r2, r3, #29
 8002e86:	d505      	bpl.n	8002e94 <__sflush_r+0x44>
 8002e88:	6863      	ldr	r3, [r4, #4]
 8002e8a:	1ac0      	subs	r0, r0, r3
 8002e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e8e:	b10b      	cbz	r3, 8002e94 <__sflush_r+0x44>
 8002e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e92:	1ac0      	subs	r0, r0, r3
 8002e94:	2300      	movs	r3, #0
 8002e96:	4602      	mov	r2, r0
 8002e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	6a21      	ldr	r1, [r4, #32]
 8002e9e:	47b0      	blx	r6
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	d106      	bne.n	8002eb4 <__sflush_r+0x64>
 8002ea6:	6829      	ldr	r1, [r5, #0]
 8002ea8:	291d      	cmp	r1, #29
 8002eaa:	d82b      	bhi.n	8002f04 <__sflush_r+0xb4>
 8002eac:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <__sflush_r+0x100>)
 8002eae:	410a      	asrs	r2, r1
 8002eb0:	07d6      	lsls	r6, r2, #31
 8002eb2:	d427      	bmi.n	8002f04 <__sflush_r+0xb4>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	6062      	str	r2, [r4, #4]
 8002eb8:	6922      	ldr	r2, [r4, #16]
 8002eba:	04d9      	lsls	r1, r3, #19
 8002ebc:	6022      	str	r2, [r4, #0]
 8002ebe:	d504      	bpl.n	8002eca <__sflush_r+0x7a>
 8002ec0:	1c42      	adds	r2, r0, #1
 8002ec2:	d101      	bne.n	8002ec8 <__sflush_r+0x78>
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	b903      	cbnz	r3, 8002eca <__sflush_r+0x7a>
 8002ec8:	6560      	str	r0, [r4, #84]	; 0x54
 8002eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ecc:	602f      	str	r7, [r5, #0]
 8002ece:	2900      	cmp	r1, #0
 8002ed0:	d0ca      	beq.n	8002e68 <__sflush_r+0x18>
 8002ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ed6:	4299      	cmp	r1, r3
 8002ed8:	d002      	beq.n	8002ee0 <__sflush_r+0x90>
 8002eda:	4628      	mov	r0, r5
 8002edc:	f7ff fec4 	bl	8002c68 <_free_r>
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	6360      	str	r0, [r4, #52]	; 0x34
 8002ee4:	e7c1      	b.n	8002e6a <__sflush_r+0x1a>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b0      	blx	r6
 8002eec:	1c41      	adds	r1, r0, #1
 8002eee:	d1c8      	bne.n	8002e82 <__sflush_r+0x32>
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0c5      	beq.n	8002e82 <__sflush_r+0x32>
 8002ef6:	2b1d      	cmp	r3, #29
 8002ef8:	d001      	beq.n	8002efe <__sflush_r+0xae>
 8002efa:	2b16      	cmp	r3, #22
 8002efc:	d101      	bne.n	8002f02 <__sflush_r+0xb2>
 8002efe:	602f      	str	r7, [r5, #0]
 8002f00:	e7b2      	b.n	8002e68 <__sflush_r+0x18>
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f08:	81a3      	strh	r3, [r4, #12]
 8002f0a:	e7ae      	b.n	8002e6a <__sflush_r+0x1a>
 8002f0c:	690f      	ldr	r7, [r1, #16]
 8002f0e:	2f00      	cmp	r7, #0
 8002f10:	d0aa      	beq.n	8002e68 <__sflush_r+0x18>
 8002f12:	0793      	lsls	r3, r2, #30
 8002f14:	bf18      	it	ne
 8002f16:	2300      	movne	r3, #0
 8002f18:	680e      	ldr	r6, [r1, #0]
 8002f1a:	bf08      	it	eq
 8002f1c:	694b      	ldreq	r3, [r1, #20]
 8002f1e:	1bf6      	subs	r6, r6, r7
 8002f20:	600f      	str	r7, [r1, #0]
 8002f22:	608b      	str	r3, [r1, #8]
 8002f24:	2e00      	cmp	r6, #0
 8002f26:	dd9f      	ble.n	8002e68 <__sflush_r+0x18>
 8002f28:	4633      	mov	r3, r6
 8002f2a:	463a      	mov	r2, r7
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	6a21      	ldr	r1, [r4, #32]
 8002f30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002f34:	47e0      	blx	ip
 8002f36:	2800      	cmp	r0, #0
 8002f38:	dc06      	bgt.n	8002f48 <__sflush_r+0xf8>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f44:	81a3      	strh	r3, [r4, #12]
 8002f46:	e790      	b.n	8002e6a <__sflush_r+0x1a>
 8002f48:	4407      	add	r7, r0
 8002f4a:	1a36      	subs	r6, r6, r0
 8002f4c:	e7ea      	b.n	8002f24 <__sflush_r+0xd4>
 8002f4e:	bf00      	nop
 8002f50:	dfbffffe 	.word	0xdfbffffe

08002f54 <_fflush_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	4605      	mov	r5, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	b913      	cbnz	r3, 8002f64 <_fflush_r+0x10>
 8002f5e:	2500      	movs	r5, #0
 8002f60:	4628      	mov	r0, r5
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	b118      	cbz	r0, 8002f6e <_fflush_r+0x1a>
 8002f66:	6a03      	ldr	r3, [r0, #32]
 8002f68:	b90b      	cbnz	r3, 8002f6e <_fflush_r+0x1a>
 8002f6a:	f7ff fc9f 	bl	80028ac <__sinit>
 8002f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f3      	beq.n	8002f5e <_fflush_r+0xa>
 8002f76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f78:	07d0      	lsls	r0, r2, #31
 8002f7a:	d404      	bmi.n	8002f86 <_fflush_r+0x32>
 8002f7c:	0599      	lsls	r1, r3, #22
 8002f7e:	d402      	bmi.n	8002f86 <_fflush_r+0x32>
 8002f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f82:	f7ff fe6f 	bl	8002c64 <__retarget_lock_acquire_recursive>
 8002f86:	4628      	mov	r0, r5
 8002f88:	4621      	mov	r1, r4
 8002f8a:	f7ff ff61 	bl	8002e50 <__sflush_r>
 8002f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f90:	4605      	mov	r5, r0
 8002f92:	07da      	lsls	r2, r3, #31
 8002f94:	d4e4      	bmi.n	8002f60 <_fflush_r+0xc>
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	059b      	lsls	r3, r3, #22
 8002f9a:	d4e1      	bmi.n	8002f60 <_fflush_r+0xc>
 8002f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f9e:	f7ff fe62 	bl	8002c66 <__retarget_lock_release_recursive>
 8002fa2:	e7dd      	b.n	8002f60 <_fflush_r+0xc>

08002fa4 <__swhatbuf_r>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fac:	4615      	mov	r5, r2
 8002fae:	2900      	cmp	r1, #0
 8002fb0:	461e      	mov	r6, r3
 8002fb2:	b096      	sub	sp, #88	; 0x58
 8002fb4:	da0c      	bge.n	8002fd0 <__swhatbuf_r+0x2c>
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fbe:	bf0c      	ite	eq
 8002fc0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002fc4:	2340      	movne	r3, #64	; 0x40
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	6031      	str	r1, [r6, #0]
 8002fca:	602b      	str	r3, [r5, #0]
 8002fcc:	b016      	add	sp, #88	; 0x58
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	466a      	mov	r2, sp
 8002fd2:	f000 f849 	bl	8003068 <_fstat_r>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	dbed      	blt.n	8002fb6 <__swhatbuf_r+0x12>
 8002fda:	9901      	ldr	r1, [sp, #4]
 8002fdc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002fe0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002fe4:	4259      	negs	r1, r3
 8002fe6:	4159      	adcs	r1, r3
 8002fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fec:	e7eb      	b.n	8002fc6 <__swhatbuf_r+0x22>

08002fee <__smakebuf_r>:
 8002fee:	898b      	ldrh	r3, [r1, #12]
 8002ff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ff2:	079d      	lsls	r5, r3, #30
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	d507      	bpl.n	800300a <__smakebuf_r+0x1c>
 8002ffa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	6123      	str	r3, [r4, #16]
 8003002:	2301      	movs	r3, #1
 8003004:	6163      	str	r3, [r4, #20]
 8003006:	b002      	add	sp, #8
 8003008:	bd70      	pop	{r4, r5, r6, pc}
 800300a:	466a      	mov	r2, sp
 800300c:	ab01      	add	r3, sp, #4
 800300e:	f7ff ffc9 	bl	8002fa4 <__swhatbuf_r>
 8003012:	9900      	ldr	r1, [sp, #0]
 8003014:	4605      	mov	r5, r0
 8003016:	4630      	mov	r0, r6
 8003018:	f7ff fe8e 	bl	8002d38 <_malloc_r>
 800301c:	b948      	cbnz	r0, 8003032 <__smakebuf_r+0x44>
 800301e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003022:	059a      	lsls	r2, r3, #22
 8003024:	d4ef      	bmi.n	8003006 <__smakebuf_r+0x18>
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	f043 0302 	orr.w	r3, r3, #2
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	e7e3      	b.n	8002ffa <__smakebuf_r+0xc>
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	6020      	str	r0, [r4, #0]
 8003036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303a:	81a3      	strh	r3, [r4, #12]
 800303c:	9b00      	ldr	r3, [sp, #0]
 800303e:	6120      	str	r0, [r4, #16]
 8003040:	6163      	str	r3, [r4, #20]
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	b15b      	cbz	r3, 800305e <__smakebuf_r+0x70>
 8003046:	4630      	mov	r0, r6
 8003048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800304c:	f000 f81e 	bl	800308c <_isatty_r>
 8003050:	b128      	cbz	r0, 800305e <__smakebuf_r+0x70>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f023 0303 	bic.w	r3, r3, #3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	89a3      	ldrh	r3, [r4, #12]
 8003060:	431d      	orrs	r5, r3
 8003062:	81a5      	strh	r5, [r4, #12]
 8003064:	e7cf      	b.n	8003006 <__smakebuf_r+0x18>
	...

08003068 <_fstat_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	2300      	movs	r3, #0
 800306c:	4d06      	ldr	r5, [pc, #24]	; (8003088 <_fstat_r+0x20>)
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	602b      	str	r3, [r5, #0]
 8003076:	f7fd faa5 	bl	80005c4 <_fstat>
 800307a:	1c43      	adds	r3, r0, #1
 800307c:	d102      	bne.n	8003084 <_fstat_r+0x1c>
 800307e:	682b      	ldr	r3, [r5, #0]
 8003080:	b103      	cbz	r3, 8003084 <_fstat_r+0x1c>
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	bd38      	pop	{r3, r4, r5, pc}
 8003086:	bf00      	nop
 8003088:	2000473c 	.word	0x2000473c

0800308c <_isatty_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	2300      	movs	r3, #0
 8003090:	4d05      	ldr	r5, [pc, #20]	; (80030a8 <_isatty_r+0x1c>)
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7fd faa3 	bl	80005e2 <_isatty>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_isatty_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_isatty_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	2000473c 	.word	0x2000473c

080030ac <_sbrk_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	2300      	movs	r3, #0
 80030b0:	4d05      	ldr	r5, [pc, #20]	; (80030c8 <_sbrk_r+0x1c>)
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	f000 f808 	bl	80030cc <_sbrk>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d102      	bne.n	80030c6 <_sbrk_r+0x1a>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	b103      	cbz	r3, 80030c6 <_sbrk_r+0x1a>
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	2000473c 	.word	0x2000473c

080030cc <_sbrk>:
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <_sbrk+0x14>)
 80030ce:	4603      	mov	r3, r0
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	b909      	cbnz	r1, 80030d8 <_sbrk+0xc>
 80030d4:	4903      	ldr	r1, [pc, #12]	; (80030e4 <_sbrk+0x18>)
 80030d6:	6011      	str	r1, [r2, #0]
 80030d8:	6810      	ldr	r0, [r2, #0]
 80030da:	4403      	add	r3, r0
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4770      	bx	lr
 80030e0:	2000474c 	.word	0x2000474c
 80030e4:	20004750 	.word	0x20004750

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
